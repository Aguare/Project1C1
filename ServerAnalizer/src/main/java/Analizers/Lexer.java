/* The following code was generated by JFlex 1.7.0 */

/* SECTION 1: user code */
package Analizers;

import java_cup.runtime.Symbol;
import Analizers.sym;
import java.util.ArrayList;

/* SECTION 2: config */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    54, 54, 54, 54, 54, 54, 54, 54, 54, 31,  2,  2,  2,  2, 54, 54, 
    54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
    31, 45, 23, 54, 54, 44, 48, 29, 37, 38,  6, 42, 41,  4, 26,  1, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 40, 39, 47, 43, 46, 54, 
    54,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 52, 
     5,  5,  5, 20,  5,  5,  5,  5,  5,  5,  5, 35, 54, 36, 54, 30, 
    54,  3,  9, 12, 18, 16, 27, 21, 22, 11, 53, 50, 10, 51, 19, 17, 
     7,  5, 13, 28, 15,  8, 14, 49,  5,  5,  5, 33, 32, 34, 54, 54, 
    54, 54, 54, 54, 54,  2, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
    54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
    31, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
    54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\13\3\1\6"+
    "\1\7\1\10\1\11\2\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\6\1\30\1\31\1\32\2\3\1\6"+
    "\2\0\1\33\1\34\1\35\1\36\6\3\1\37\12\3"+
    "\1\40\2\3\2\0\5\3\1\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\32\2\3\1\47\1\0\6\3"+
    "\1\50\13\3\1\51\1\3\1\52\1\10\2\3\1\53"+
    "\2\3\1\54\2\3\1\47\7\3\1\55\2\3\1\56"+
    "\1\57\1\60\1\61\14\3\1\62\2\3\1\63\4\3"+
    "\1\64\2\3\1\65\2\3\1\66\3\3\1\67\1\70"+
    "\1\3\1\71\1\72\1\73\1\74\1\3\1\75\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\245\0\u044c\0\u044c\0\u044c\0\u044c\0\u044c\0\u044c\0\u044c"+
    "\0\u044c\0\u044c\0\u0528\0\u055f\0\u044c\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u044c\0\u06e0\0\u0717\0\u044c\0\u044c"+
    "\0\u044c\0\u044c\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\245\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u044c\0\u044c"+
    "\0\u044c\0\u044c\0\u044c\0\u044c\0\u044c\0\u0d1b\0\u0d52\0\u06e0"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\245"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\245\0\u1167\0\u0b63\0\u0b9a\0\u119e"+
    "\0\u11d5\0\245\0\u120c\0\u1243\0\u044c\0\u127a\0\u12b1\0\u044c"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\245"+
    "\0\u1469\0\u14a0\0\245\0\245\0\245\0\245\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\245\0\u176b\0\u17a2\0\245\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\245\0\u18b5\0\u18ec\0\245\0\u1923\0\u195a"+
    "\0\245\0\u1991\0\u19c8\0\u19ff\0\245\0\245\0\u1a36\0\245"+
    "\0\245\0\245\0\245\0\u1a6d\0\245\0\u1aa4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\4\1\6\1\7"+
    "\1\4\1\10\1\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\4\1\17\1\20\1\21\2\4\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\4\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\4\1\53\1\4\1\54\1\0\1\55\4\0"+
    "\1\56\44\0\1\57\15\0\1\3\34\0\1\3\32\0"+
    "\1\4\1\0\1\4\1\0\20\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\5\0"+
    "\1\60\46\0\1\61\66\0\1\62\16\0\1\63\1\0"+
    "\1\4\1\0\1\4\1\64\4\4\1\65\11\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\6\4\1\66"+
    "\3\4\1\67\5\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\14\4\1\70\3\4\1\0\2\4\1\0"+
    "\1\71\1\4\1\0\1\4\1\0\1\4\20\0\2\4"+
    "\1\72\2\4\4\0\1\73\1\0\1\4\1\0\3\4"+
    "\1\74\13\4\1\75\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\11\4\1\76\6\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\12\4\1\77\5\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\6\4\1\100"+
    "\10\4\1\101\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\102\14\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\11\4\1\103\1\104\5\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\11\4\1\105"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\10\4\1\106\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\1\0\2\107\1\0"+
    "\64\107\3\0\1\4\1\0\1\4\1\0\20\4\1\0"+
    "\1\23\1\24\1\110\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\20\4"+
    "\1\0\2\24\1\110\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\73\0\1\111\1\0\1\4\1\0\4\4"+
    "\1\112\5\4\1\113\5\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\10\4\1\114\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\1\115"+
    "\4\4\4\0\1\116\1\0\1\116\1\0\20\116\4\0"+
    "\2\116\24\0\5\116\53\0\1\117\1\120\66\0\1\121"+
    "\66\0\1\122\66\0\1\123\66\0\1\124\73\0\1\125"+
    "\11\0\1\4\1\0\1\4\1\0\17\4\1\126\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\2\4\1\127"+
    "\15\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\1\0\2\130\1\0\64\130\6\56"+
    "\1\131\60\56\3\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\132\12\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\2\4\1\133\15\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\134\5\4\1\135\5\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\11\4"+
    "\1\136\6\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\12\4\1\137\5\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\10\4\1\140\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\141\17\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\20\4\1\0"+
    "\2\4\1\0\1\4\1\142\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\143\1\0\1\4\1\0\20\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\144\1\0\1\4\1\0\20\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\10\4"+
    "\1\145\7\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\146\13\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\147\16\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\4\4\1\150\13\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\20\4"+
    "\1\0\2\4\1\0\1\4\1\151\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\20\4\1\0\2\4\1\0\1\152\1\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\153\16\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\20\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\1\154\4\4\4\0"+
    "\1\4\1\0\1\4\1\0\6\4\1\155\11\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\1\0\2\107\1\0\24\107\1\156\37\107\30\0"+
    "\2\157\40\0\1\4\1\0\1\4\1\0\3\4\1\160"+
    "\14\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\14\4\1\161\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\6\4\1\162\11\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\163\1\0\1\4\1\0\20\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\164\13\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\36\0\1\165\34\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\166\13\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\20\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\4\4\1\167\1\0\1\56"+
    "\1\170\4\56\1\131\60\56\3\0\1\4\1\0\1\4"+
    "\1\0\20\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\1\4\1\171\3\4\4\0\1\4"+
    "\1\0\1\4\1\0\3\4\1\172\14\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\7\4\1\173\10\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\10\4"+
    "\1\174\7\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\175\1\0\1\4"+
    "\1\0\20\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\176\14\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\12\4\1\177\5\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\11\4\1\200\6\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\20\4"+
    "\1\0\2\4\1\0\1\4\1\201\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\6\4\1\140\11\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\202\16\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\13\4\1\203\4\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\11\4\1\204"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\20\4\1\0\2\4\1\0\1\4\1\205\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\11\4\1\206\6\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\207"+
    "\1\0\1\4\1\0\20\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\2\4\1\210\15\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\4\4\1\211\13\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\20\4"+
    "\1\0\2\4\1\0\1\4\1\147\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\212\1\0\1\4\1\0"+
    "\20\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\10\4\1\213\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\10\4\1\214\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\3\4\1\215\14\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\11\4\1\216"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\217\1\0\1\4\1\0"+
    "\20\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\220\13\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\221\1\0"+
    "\1\4\1\0\20\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\11\4\1\222\6\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\20\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\1\4\1\223"+
    "\3\4\4\0\1\4\1\0\1\4\1\0\11\4\1\224"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\6\4\1\225\11\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\20\4\1\0\2\4\1\0\1\4\1\226"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\6\4\1\227\11\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\1\230\16\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\3\4"+
    "\1\231\14\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\14\4\1\232\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\3\4\1\233\14\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\4\4\1\234\13\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\235\12\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\11\4\1\236\6\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\237\12\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\16\4\1\240\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\241\12\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\10\4\1\242\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\243\12\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\244\1\0\1\4\1\0\20\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\10\4\1\245\7\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\14\4"+
    "\1\246\3\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\247\14\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\1\0\1\4\20\0\5\4\4\0\1\4"+
    "\1\0\1\4\1\0\11\4\1\140\6\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\20\0\5\4"+
    "\4\0\1\4\1\0\1\4\1\0\16\4\1\140\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\1\0\1\4"+
    "\20\0\5\4\4\0\1\4\1\0\1\4\1\0\5\4"+
    "\1\250\12\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\20\0\5\4\4\0\1\4\1\0\1\4"+
    "\1\0\17\4\1\251\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\10\4\1\252\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\11\4\1\253\6\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\11\4\1\241"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\10\4\1\254\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\4\0\1\4\1\0"+
    "\1\4\1\0\14\4\1\140\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\20\0\5\4\4\0"+
    "\1\4\1\0\1\4\1\0\10\4\1\255\7\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\4\1\0\1\4\20\0"+
    "\5\4\4\0\1\4\1\0\1\4\1\0\11\4\1\256"+
    "\6\4\1\0\2\4\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\20\0\5\4\4\0\1\4\1\0\1\4\1\0"+
    "\13\4\1\241\4\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\20\0\5\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6875];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\23\1\1\11\4\1\11\11\2\1\1\11\6\1"+
    "\1\11\2\0\4\11\24\1\2\0\5\1\1\0\7\11"+
    "\3\1\1\0\33\1\1\11\2\1\1\11\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ArrayList<ErrorLP> errors = new ArrayList<>();
    private ArrayList<String> comments = new ArrayList<>();

    public void viewToken(Symbol cur_token){
        System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void addError(String lexema, int line, int column){
        errors.add(new ErrorLP(line, column, lexema, 0, "El símbolo no se reconoce"));
        System.out.println("Error -> "+lexema+" L:"+line+" C:"+column);
    }

    public ArrayList<ErrorLP> getErrors(){
        return errors;
    }

    public ArrayList<String> getComments(){
        return comments;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.DIV, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 62: break;
          case 2: 
            { /*Ignore*/
            } 
            // fall through
          case 63: break;
          case 3: 
            { return new Symbol(sym.ID, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 64: break;
          case 4: 
            { return new Symbol(sym.REST, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 65: break;
          case 5: 
            { return new Symbol(sym.MULTIPLY, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 66: break;
          case 6: 
            { addError(yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 67: break;
          case 7: 
            { return new Symbol(sym.INTEGER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 68: break;
          case 8: 
            { return new Symbol(sym.DECIMAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 69: break;
          case 9: 
            { return new Symbol(sym.DOT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 70: break;
          case 10: 
            { return new Symbol(sym.APOS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 71: break;
          case 11: 
            { return new Symbol(sym.OR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 72: break;
          case 12: 
            { return new Symbol(sym.O_BRACE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 73: break;
          case 13: 
            { return new Symbol(sym.C_BRACE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 74: break;
          case 14: 
            { return new Symbol(sym.O_SBRACKET, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 75: break;
          case 15: 
            { return new Symbol(sym.C_SBRACKET, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 76: break;
          case 16: 
            { return new Symbol(sym.O_PARENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 77: break;
          case 17: 
            { return new Symbol(sym.C_PARENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 78: break;
          case 18: 
            { return new Symbol(sym.SEMICOLON, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 79: break;
          case 19: 
            { return new Symbol(sym.COLONS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 80: break;
          case 20: 
            { return new Symbol(sym.COMMA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 81: break;
          case 21: 
            { return new Symbol(sym.SUM, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 82: break;
          case 22: 
            { return new Symbol(sym.EQUAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 83: break;
          case 23: 
            { return new Symbol(sym.MOD, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 84: break;
          case 24: 
            { return new Symbol(sym.HIGHER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 85: break;
          case 25: 
            { return new Symbol(sym.SMALLER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 86: break;
          case 26: 
            { return new Symbol(sym.AND, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 87: break;
          case 27: 
            { return new Symbol(sym.C_DIV, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 88: break;
          case 28: 
            { return new Symbol(sym.DECREMENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 89: break;
          case 29: 
            { return new Symbol(sym.C_REST, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 90: break;
          case 30: 
            { return new Symbol(sym.C_MULTIPLY, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 91: break;
          case 31: 
            { return new Symbol(sym.IF, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 92: break;
          case 32: 
            { return new Symbol(sym.DO, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 93: break;
          case 33: 
            { return new Symbol(sym.INCREMENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 94: break;
          case 34: 
            { return new Symbol(sym.C_SUM, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 95: break;
          case 35: 
            { return new Symbol(sym.D_EQUAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 96: break;
          case 36: 
            { return new Symbol(sym.DIFFERENCE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 97: break;
          case 37: 
            { return new Symbol(sym.H_EQUAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 98: break;
          case 38: 
            { return new Symbol(sym.S_EQUAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 99: break;
          case 39: 
            { comments.add(yytext());
            } 
            // fall through
          case 100: break;
          case 40: 
            { return new Symbol(sym.TYPE_VARIABLE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 101: break;
          case 41: 
            { return new Symbol(sym.NEW, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 102: break;
          case 42: 
            { return new Symbol(sym.STRING, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 103: break;
          case 43: 
            { return new Symbol(sym.FOR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 104: break;
          case 44: 
            { return new Symbol(sym.CHAR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 105: break;
          case 45: 
            { return new Symbol(sym.CASE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 106: break;
          case 46: 
            { return new Symbol(sym.VOID, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 107: break;
          case 47: 
            { return new Symbol(sym.BOOLEAN, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 108: break;
          case 48: 
            { return new Symbol(sym.THIS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 109: break;
          case 49: 
            { return new Symbol(sym.ELSE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 110: break;
          case 50: 
            { return new Symbol(sym.BREAK, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 111: break;
          case 51: 
            { return new Symbol(sym.CLASS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 112: break;
          case 52: 
            { return new Symbol(sym.FINAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 113: break;
          case 53: 
            { return new Symbol(sym.WHILE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 114: break;
          case 54: 
            { return new Symbol(sym.VISIBILITY, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 115: break;
          case 55: 
            { return new Symbol(sym.IMPORT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 116: break;
          case 56: 
            { return new Symbol(sym.RETURN, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 117: break;
          case 57: 
            { return new Symbol(sym.STATIC, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 118: break;
          case 58: 
            { return new Symbol(sym.SWITCH, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 119: break;
          case 59: 
            { return new Symbol(sym.OBJECT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 120: break;
          case 60: 
            { return new Symbol(sym.PACKAGE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 121: break;
          case 61: 
            { return new Symbol(sym.DEFAULT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
