
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizers;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\006\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\006\010\000\002\006\007\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\055\003\000\002\055\005\000\002\055\005\000" +
    "\002\055\007\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\012\007\000\002\012\010\000\002\012\007" +
    "\000\002\054\004\000\002\054\005\000\002\054\005\000" +
    "\002\054\006\000\002\054\002\000\002\053\004\000\002" +
    "\053\005\000\002\053\005\000\002\046\003\000\002\046" +
    "\004\000\002\046\004\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\013" +
    "\004\000\002\013\006\000\002\014\015\000\002\015\011" +
    "\000\002\015\010\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\016\013\000\002\016\013\000\002" +
    "\017\011\000\002\017\010\000\002\052\003\000\002\052" +
    "\004\000\002\020\010\000\002\020\007\000\002\020\007" +
    "\000\002\020\006\000\002\021\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\026\011\000\002" +
    "\026\011\000\002\026\011\000\002\027\005\000\002\027" +
    "\007\000\002\027\005\000\002\023\013\000\002\023\013" +
    "\000\002\023\012\000\002\023\012\000\002\024\007\000" +
    "\002\024\007\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\005\000\002\025\005\000\002\030" +
    "\005\000\002\030\006\000\002\030\003\000\002\051\007" +
    "\000\002\051\006\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\005\000\002\033" +
    "\004\000\002\033\005\000\002\034\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\012\006\007\064\004\071\011\072\010\001" +
    "\002\000\004\013\u0133\001\002\000\004\002\u0132\001\002" +
    "\000\004\064\004\001\002\000\004\071\u012b\001\002\000" +
    "\004\013\u0129\001\002\000\004\013\015\001\002\000\004" +
    "\002\ufffe\001\002\000\006\006\007\071\011\001\002\000" +
    "\004\002\uffff\001\002\000\004\014\016\001\002\000\016" +
    "\006\023\007\017\013\025\015\ufff3\066\026\067\020\001" +
    "\002\000\004\013\u0123\001\002\000\006\007\uffe6\066\u0122" +
    "\001\002\000\004\007\u011f\001\002\000\004\015\u011e\001" +
    "\002\000\012\007\u0110\066\u0112\067\u0111\070\u0113\001\002" +
    "\000\016\006\023\007\017\013\025\015\ufff3\066\026\067" +
    "\020\001\002\000\014\032\156\047\157\050\155\051\161" +
    "\052\152\001\002\000\006\007\uffe5\067\u010b\001\002\000" +
    "\004\013\032\001\002\000\016\006\023\007\017\013\025" +
    "\015\ufff3\066\026\067\020\001\002\000\004\015\ufff5\001" +
    "\002\000\004\020\033\001\002\000\010\007\034\015\uffdd" +
    "\021\036\001\002\000\004\013\u0108\001\002\000\004\021" +
    "\u0105\001\002\000\004\014\041\001\002\000\004\015\040" +
    "\001\002\000\016\006\uffe4\007\uffe4\013\uffe4\015\uffe4\066" +
    "\uffe4\067\uffe4\001\002\000\034\003\063\007\060\013\051" +
    "\015\uffe1\053\047\055\067\056\042\057\053\060\045\061" +
    "\062\063\044\065\054\074\066\001\002\000\004\020\373" +
    "\001\002\000\036\003\uffcf\007\uffcf\013\uffcf\015\uffcf\053" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\065\uffcf\074\uffcf\001\002\000\020\004\212\005" +
    "\206\010\216\011\214\012\220\013\370\073\213\001\002" +
    "\000\004\020\355\001\002\000\040\003\uffd0\007\uffd0\013" +
    "\uffd0\015\uffd0\053\uffd0\054\347\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\074\uffd0\001" +
    "\002\000\004\020\327\001\002\000\036\003\uffd6\007\uffd6" +
    "\013\uffd6\015\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\074\uffd6\001\002" +
    "\000\024\013\176\020\320\032\156\045\153\046\160\047" +
    "\157\050\155\051\161\052\152\001\002\000\036\003\uffd1" +
    "\007\uffd1\013\uffd1\015\uffd1\053\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\074\uffd1" +
    "\001\002\000\004\014\304\001\002\000\004\013\272\001" +
    "\002\000\036\003\uffcc\007\uffcc\013\uffcc\015\uffcc\053\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\065\uffcc\074\uffcc\001\002\000\004\015\uffdf\001\002" +
    "\000\036\003\uffd5\007\uffd5\013\uffd5\015\uffd5\053\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\065\uffd5\074\uffd5\001\002\000\004\013\261\001\002\000" +
    "\036\003\063\007\060\013\051\015\uffd9\053\047\055\067" +
    "\056\042\057\053\060\045\061\062\062\uffd9\063\044\065" +
    "\054\074\066\001\002\000\012\004\247\010\250\012\252" +
    "\013\246\001\002\000\030\007\060\013\051\053\047\055" +
    "\067\056\042\057\053\060\045\061\062\063\044\065\054" +
    "\074\066\001\002\000\040\003\uffa2\007\uffa2\013\uffa2\015" +
    "\uffa2\022\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\065\uffa2\074\uffa2\001\002\000" +
    "\036\003\uffce\007\uffce\013\uffce\015\uffce\053\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065" +
    "\uffce\074\uffce\001\002\000\004\023\240\001\002\000\004" +
    "\020\074\001\002\000\036\003\uffd2\007\uffd2\013\uffd2\015" +
    "\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\065\uffd2\074\uffd2\001\002\000\036\003" +
    "\uffd4\007\uffd4\013\uffd4\015\uffd4\053\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\074" +
    "\uffd4\001\002\000\036\003\uffd3\007\uffd3\013\uffd3\015\uffd3" +
    "\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\065\uffd3\074\uffd3\001\002\000\036\003\uffcd" +
    "\007\uffcd\013\uffcd\015\uffcd\053\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\074\uffcd" +
    "\001\002\000\010\007\060\013\075\065\054\001\002\000" +
    "\016\013\176\032\156\047\157\050\155\051\161\052\152" +
    "\001\002\000\004\022\077\001\002\000\016\004\102\005" +
    "\101\011\103\012\110\013\105\020\100\001\002\000\016" +
    "\004\102\005\101\011\103\012\110\013\105\020\100\001" +
    "\002\000\042\021\uff9a\022\uff9a\024\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\001\002\000\042" +
    "\021\uff9b\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\001\002\000\030\021\uff7c\022" +
    "\uff7c\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\001\002\000\034\026\127\027" +
    "\126\030\130\031\131\033\115\035\114\036\117\037\112" +
    "\040\120\041\113\042\116\043\111\044\122\001\002\000" +
    "\030\021\uff7b\022\uff7b\033\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\001\002\000" +
    "\004\022\142\001\002\000\024\033\115\035\114\036\117" +
    "\037\112\040\120\041\113\042\116\043\111\044\122\001" +
    "\002\000\030\021\uff7d\022\uff7d\033\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\001" +
    "\002\000\016\004\uff6d\005\uff6d\011\uff6d\012\uff6d\013\uff6d" +
    "\020\uff6d\001\002\000\016\004\uff71\005\uff71\011\uff71\012" +
    "\uff71\013\uff71\020\uff71\001\002\000\016\004\uff6f\005\uff6f" +
    "\011\uff6f\012\uff6f\013\uff6f\020\uff6f\001\002\000\016\004" +
    "\uff73\005\uff73\011\uff73\012\uff73\013\uff73\020\uff73\001\002" +
    "\000\016\004\uff74\005\uff74\011\uff74\012\uff74\013\uff74\020" +
    "\uff74\001\002\000\016\004\uff6e\005\uff6e\011\uff6e\012\uff6e" +
    "\013\uff6e\020\uff6e\001\002\000\016\004\uff72\005\uff72\011" +
    "\uff72\012\uff72\013\uff72\020\uff72\001\002\000\016\004\uff70" +
    "\005\uff70\011\uff70\012\uff70\013\uff70\020\uff70\001\002\000" +
    "\016\004\102\005\101\011\103\012\110\013\105\020\100" +
    "\001\002\000\016\004\uff6c\005\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\020\uff6c\001\002\000\040\021\uff90\022\uff90\026\127" +
    "\027\126\030\130\031\131\033\115\035\114\036\117\037" +
    "\112\040\120\041\113\042\116\043\111\044\122\001\002" +
    "\000\006\021\uff91\022\uff91\001\002\000\030\021\uff93\022" +
    "\uff93\033\115\035\114\036\117\037\112\040\120\041\113" +
    "\042\116\043\111\044\122\001\002\000\010\004\uff79\005" +
    "\uff79\020\uff79\001\002\000\010\004\uff7a\005\uff7a\020\uff7a" +
    "\001\002\000\010\004\uff77\005\uff77\020\uff77\001\002\000" +
    "\010\004\uff78\005\uff78\020\uff78\001\002\000\016\004\102" +
    "\005\101\011\103\012\110\013\105\020\100\001\002\000" +
    "\010\004\102\005\101\020\134\001\002\000\010\004\102" +
    "\005\101\020\134\001\002\000\042\021\uff98\022\uff98\024" +
    "\uff98\026\127\027\126\030\130\031\131\033\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\001\002\000\014\021\137\026\127\027\126\030\130" +
    "\031\131\001\002\000\042\021\uff99\022\uff99\024\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\033\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\001" +
    "\002\000\040\021\uff94\022\uff94\026\127\027\126\030\130" +
    "\031\131\033\115\035\114\036\117\037\112\040\120\041" +
    "\113\042\116\043\111\044\122\001\002\000\006\021\uff92" +
    "\022\uff92\001\002\000\004\013\143\001\002\000\020\032" +
    "\156\045\153\046\160\047\157\050\155\051\161\052\152" +
    "\001\002\000\004\021\145\001\002\000\004\014\146\001" +
    "\002\000\032\003\063\007\060\013\051\053\047\055\067" +
    "\056\042\057\053\060\045\061\062\063\044\065\054\074" +
    "\066\001\002\000\004\015\150\001\002\000\036\003\uffc9" +
    "\007\uffc9\013\uffc9\015\uffc9\053\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\074\uffc9" +
    "\001\002\000\004\021\uff97\001\002\000\020\004\uff8b\005" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\020\uff8b\001\002" +
    "\000\006\021\uff76\022\uff76\001\002\000\020\004\102\005" +
    "\101\010\165\011\163\012\170\013\167\020\134\001\002" +
    "\000\020\004\uff8d\005\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\020\uff8d\001\002\000\020\004\uff8a\005\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\020\uff8a\001\002\000\020\004" +
    "\uff8e\005\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\020\uff8e" +
    "\001\002\000\006\021\uff75\022\uff75\001\002\000\020\004" +
    "\uff8c\005\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\020\uff8c" +
    "\001\002\000\012\021\uff9f\022\uff9f\024\uff9f\026\uff9f\001" +
    "\002\000\012\021\uff82\022\uff82\024\uff82\026\uff82\001\002" +
    "\000\006\021\uff96\026\171\001\002\000\012\021\uff84\022" +
    "\uff84\024\uff84\026\uff84\001\002\000\020\021\uff9e\022\uff9e" +
    "\024\uff9e\026\127\027\126\030\130\031\131\001\002\000" +
    "\012\021\uff9d\022\uff9d\024\uff9d\026\uff9d\001\002\000\012" +
    "\021\uff83\022\uff83\024\uff83\026\uff83\001\002\000\020\004" +
    "\102\005\101\010\165\011\163\012\170\013\167\020\134" +
    "\001\002\000\012\021\uff9c\022\uff9c\024\uff9c\026\uff9c\001" +
    "\002\000\036\021\137\026\127\027\126\030\130\031\131" +
    "\033\115\035\114\036\117\037\112\040\120\041\113\042" +
    "\116\043\111\044\122\001\002\000\004\021\175\001\002" +
    "\000\006\021\uff8f\022\uff8f\001\002\000\004\032\202\001" +
    "\002\000\020\004\102\005\101\010\165\011\163\012\170" +
    "\013\167\020\134\001\002\000\006\022\201\026\171\001" +
    "\002\000\040\003\uffa3\007\uffa3\013\uffa3\015\uffa3\022\uffa3" +
    "\053\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\065\uffa3\074\uffa3\001\002\000\004\073\203" +
    "\001\002\000\004\013\204\001\002\000\004\020\205\001" +
    "\002\000\022\004\212\005\206\010\216\011\214\012\220" +
    "\013\217\021\211\073\213\001\002\000\010\021\uff88\022" +
    "\uff88\024\uff88\001\002\000\004\021\236\001\002\000\006" +
    "\021\uffa9\024\234\001\002\000\004\022\233\001\002\000" +
    "\010\021\uff87\022\uff87\024\uff87\001\002\000\006\013\223" +
    "\065\224\001\002\000\010\021\uff85\022\uff85\024\uff85\001" +
    "\002\000\006\021\uffa8\024\221\001\002\000\010\021\uff89" +
    "\022\uff89\024\uff89\001\002\000\004\021\uffa7\001\002\000" +
    "\010\021\uff86\022\uff86\024\uff86\001\002\000\020\004\212" +
    "\005\206\010\216\011\214\012\220\013\217\073\213\001" +
    "\002\000\004\021\uffa5\001\002\000\004\020\230\001\002" +
    "\000\004\020\225\001\002\000\020\004\212\005\206\010" +
    "\216\011\214\012\220\013\217\073\213\001\002\000\004" +
    "\021\227\001\002\000\010\021\uffab\022\uffab\024\uffab\001" +
    "\002\000\020\004\212\005\206\010\216\011\214\012\220" +
    "\013\217\073\213\001\002\000\004\021\232\001\002\000" +
    "\010\021\uffaa\022\uffaa\024\uffaa\001\002\000\040\003\uffac" +
    "\007\uffac\013\uffac\015\uffac\022\uffac\053\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065\uffac" +
    "\074\uffac\001\002\000\020\004\212\005\206\010\216\011" +
    "\214\012\220\013\217\073\213\001\002\000\004\021\uffa6" +
    "\001\002\000\004\022\237\001\002\000\040\003\uffae\007" +
    "\uffae\013\uffae\015\uffae\022\uffae\053\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\065\uffae\074" +
    "\uffae\001\002\000\032\003\063\007\060\013\051\053\047" +
    "\055\067\056\042\057\053\060\045\061\062\063\044\065" +
    "\054\074\066\001\002\000\006\062\242\063\044\001\002" +
    "\000\004\022\244\001\002\000\036\003\uffba\007\uffba\013" +
    "\uffba\015\uffba\053\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\065\uffba\074\uffba\001\002\000" +
    "\036\003\uffbb\007\uffbb\013\uffbb\015\uffbb\053\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\065" +
    "\uffbb\074\uffbb\001\002\000\010\015\uffd7\062\uffd7\063\uffd7" +
    "\001\002\000\006\021\uff7e\023\uff7e\001\002\000\006\021" +
    "\uff80\023\uff80\001\002\000\006\021\uff81\023\uff81\001\002" +
    "\000\004\023\253\001\002\000\006\021\uff7f\023\uff7f\001" +
    "\002\000\032\003\063\007\060\013\051\053\047\055\067" +
    "\056\042\057\053\060\045\061\062\063\044\065\054\074" +
    "\066\001\002\000\006\062\255\063\044\001\002\000\004" +
    "\022\257\001\002\000\036\003\uffbc\007\uffbc\013\uffbc\015" +
    "\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\065\uffbc\074\uffbc\001\002\000\036\003" +
    "\uffbd\007\uffbd\013\uffbd\015\uffbd\053\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\074" +
    "\uffbd\001\002\000\010\015\uffd8\062\uffd8\063\uffd8\001\002" +
    "\000\010\022\uffee\024\264\032\265\001\002\000\004\022" +
    "\263\001\002\000\040\003\uffa4\007\uffa4\013\uffa4\015\uffa4" +
    "\022\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\065\uffa4\074\uffa4\001\002\000\004" +
    "\013\261\001\002\000\020\004\102\005\101\010\165\011" +
    "\163\012\170\013\167\020\134\001\002\000\010\022\uffed" +
    "\024\267\026\171\001\002\000\004\013\261\001\002\000" +
    "\004\022\uffeb\001\002\000\004\022\uffec\001\002\000\004" +
    "\032\273\001\002\000\004\073\274\001\002\000\004\065" +
    "\275\001\002\000\004\020\276\001\002\000\022\004\212" +
    "\005\206\010\216\011\214\012\220\013\217\021\300\073" +
    "\213\001\002\000\004\021\302\001\002\000\004\022\301" +
    "\001\002\000\040\003\uffad\007\uffad\013\uffad\015\uffad\022" +
    "\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\065\uffad\074\uffad\001\002\000\004\022" +
    "\303\001\002\000\040\003\uffaf\007\uffaf\013\uffaf\015\uffaf" +
    "\022\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\065\uffaf\074\uffaf\001\002\000\032" +
    "\003\063\007\060\013\051\053\047\055\067\056\042\057" +
    "\053\060\045\061\062\063\044\065\054\074\066\001\002" +
    "\000\004\015\306\001\002\000\004\056\307\001\002\000" +
    "\004\020\310\001\002\000\016\004\102\005\101\011\311" +
    "\012\110\013\105\020\100\001\002\000\026\021\315\033" +
    "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c" +
    "\043\uff7c\044\uff7c\001\002\000\004\021\313\001\002\000" +
    "\004\022\314\001\002\000\036\003\uffc3\007\uffc3\013\uffc3" +
    "\015\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\074\uffc3\001\002\000\004" +
    "\022\316\001\002\000\036\003\uffc2\007\uffc2\013\uffc2\015" +
    "\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\065\uffc2\074\uffc2\001\002\000\004\022" +
    "\326\001\002\000\022\004\212\005\206\010\216\011\214" +
    "\012\220\013\217\021\322\073\213\001\002\000\004\021" +
    "\324\001\002\000\004\022\323\001\002\000\036\003\uffa0" +
    "\007\uffa0\013\uffa0\015\uffa0\053\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\065\uffa0\074\uffa0" +
    "\001\002\000\004\022\325\001\002\000\036\003\uffa1\007" +
    "\uffa1\013\uffa1\015\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\065\uffa1\074\uffa1\001" +
    "\002\000\036\003\uff95\007\uff95\013\uff95\015\uff95\053\uff95" +
    "\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063" +
    "\uff95\065\uff95\074\uff95\001\002\000\016\004\102\005\101" +
    "\011\330\012\110\013\331\020\100\001\002\000\026\021" +
    "\343\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\001\002\000\026\021\337\033" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\001\002\000\004\021\333\001\002\000" +
    "\004\014\334\001\002\000\032\003\063\007\060\013\051" +
    "\053\047\055\067\056\042\057\053\060\045\061\062\063" +
    "\044\065\054\074\066\001\002\000\004\015\336\001\002" +
    "\000\040\003\uffb5\007\uffb5\013\uffb5\015\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\065\uffb5\074\uffb5\001\002\000\004\014\340\001" +
    "\002\000\032\003\063\007\060\013\051\053\047\055\067" +
    "\056\042\057\053\060\045\061\062\063\044\065\054\074" +
    "\066\001\002\000\004\015\342\001\002\000\040\003\uffb3" +
    "\007\uffb3\013\uffb3\015\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\074\uffb3\001\002\000\004\014\344\001\002\000\032\003" +
    "\063\007\060\013\051\053\047\055\067\056\042\057\053" +
    "\060\045\061\062\063\044\065\054\074\066\001\002\000" +
    "\004\015\346\001\002\000\040\003\uffb4\007\uffb4\013\uffb4" +
    "\015\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\065\uffb4\074\uffb4\001\002" +
    "\000\006\014\351\053\047\001\002\000\036\003\uffb0\007" +
    "\uffb0\013\uffb0\015\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\065\uffb0\074\uffb0\001" +
    "\002\000\032\003\063\007\060\013\051\053\047\055\067" +
    "\056\042\057\053\060\045\061\062\063\044\065\054\074" +
    "\066\001\002\000\040\003\uffb2\007\uffb2\013\uffb2\015\uffb2" +
    "\053\uffb2\054\347\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\065\uffb2\074\uffb2\001\002\000\004" +
    "\015\354\001\002\000\036\003\uffb1\007\uffb1\013\uffb1\015" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\065\uffb1\074\uffb1\001\002\000\012\004" +
    "\247\010\250\012\252\013\246\001\002\000\004\021\357" +
    "\001\002\000\004\014\360\001\002\000\010\015\362\061" +
    "\062\074\066\001\002\000\004\015\365\001\002\000\036" +
    "\003\uffc0\007\uffc0\013\uffc0\015\uffc0\053\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0" +
    "\074\uffc0\001\002\000\010\015\uffbf\061\062\074\066\001" +
    "\002\000\004\015\uffbe\001\002\000\036\003\uffc1\007\uffc1" +
    "\013\uffc1\015\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\065\uffc1\074\uffc1\001\002" +
    "\000\004\022\uffb6\001\002\000\004\022\uffb7\001\002\000" +
    "\004\022\uffb8\001\002\000\004\022\372\001\002\000\036" +
    "\003\uffb9\007\uffb9\013\uffb9\015\uffb9\053\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9" +
    "\074\uffb9\001\002\000\016\004\102\005\101\011\374\012" +
    "\110\013\375\020\100\001\002\000\026\021\uffc5\033\uff7c" +
    "\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\001\002\000\026\021\uffc4\033\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\001\002\000\004\021\uffc6\001\002\000\004\021\u0100" +
    "\001\002\000\004\014\u0101\001\002\000\034\003\063\007" +
    "\060\013\051\015\u0102\053\047\055\067\056\042\057\053" +
    "\060\045\061\062\063\044\065\054\074\066\001\002\000" +
    "\036\003\uffc7\007\uffc7\013\uffc7\015\uffc7\053\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065" +
    "\uffc7\074\uffc7\001\002\000\004\015\u0104\001\002\000\036" +
    "\003\uffc8\007\uffc8\013\uffc8\015\uffc8\053\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8" +
    "\074\uffc8\001\002\000\004\014\u0106\001\002\000\034\003" +
    "\063\007\060\013\051\015\uffe0\053\047\055\067\056\042" +
    "\057\053\060\045\061\062\063\044\065\054\074\066\001" +
    "\002\000\004\015\uffde\001\002\000\006\021\uffcb\024\u0109" +
    "\001\002\000\004\007\034\001\002\000\004\021\uffca\001" +
    "\002\000\004\007\uffe8\001\002\000\020\004\102\005\101" +
    "\010\165\011\163\012\170\013\167\020\134\001\002\000" +
    "\006\022\u010e\026\171\001\002\000\016\006\uffef\007\uffef" +
    "\013\uffef\015\uffef\066\uffef\067\uffef\001\002\000\004\015" +
    "\ufff4\001\002\000\004\013\u0118\001\002\000\010\007\u0115" +
    "\066\u0116\070\u0117\001\002\000\004\067\u0114\001\002\000" +
    "\004\013\uffdc\001\002\000\004\007\uffe9\001\002\000\004" +
    "\013\uffda\001\002\000\004\007\uffea\001\002\000\004\013" +
    "\uffdb\001\002\000\012\020\u011b\022\uffee\024\264\032\265" +
    "\001\002\000\004\022\u011a\001\002\000\016\006\ufff1\007" +
    "\ufff1\013\ufff1\015\ufff1\066\ufff1\067\ufff1\001\002\000\010" +
    "\007\034\015\uffdd\021\036\001\002\000\004\015\u011d\001" +
    "\002\000\016\006\uffe3\007\uffe3\013\uffe3\015\uffe3\066\uffe3" +
    "\067\uffe3\001\002\000\004\002\ufff6\001\002\000\004\013" +
    "\261\001\002\000\004\022\u0121\001\002\000\016\006\ufff2" +
    "\007\ufff2\013\ufff2\015\ufff2\066\ufff2\067\ufff2\001\002\000" +
    "\004\007\uffe7\001\002\000\012\020\u0126\022\uffee\024\264" +
    "\032\265\001\002\000\004\022\u0125\001\002\000\016\006" +
    "\ufff0\007\ufff0\013\ufff0\015\ufff0\066\ufff0\067\ufff0\001\002" +
    "\000\010\007\034\015\uffdd\021\036\001\002\000\004\015" +
    "\u0128\001\002\000\016\006\uffe2\007\uffe2\013\uffe2\015\uffe2" +
    "\066\uffe2\067\uffe2\001\002\000\004\022\u012a\001\002\000" +
    "\004\064\ufffd\001\002\000\004\013\u012c\001\002\000\004" +
    "\014\u012d\001\002\000\016\006\023\007\017\013\025\015" +
    "\ufff3\066\026\067\020\001\002\000\004\015\u012f\001\002" +
    "\000\004\002\ufff7\001\002\000\006\006\007\071\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "\000\010\013\u0133\022\ufffa\025\u0138\001\002\000\004\022" +
    "\u0135\001\002\000\010\006\ufffc\064\004\071\ufffc\001\002" +
    "\000\006\006\ufffb\071\ufffb\001\002\000\004\022\ufff8\001" +
    "\002\000\004\030\u0139\001\002\000\004\022\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\012\002\004\003\005\004\012\006\011\001" +
    "\001\000\004\005\u0133\001\001\000\002\001\001\000\004" +
    "\004\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\021\010" +
    "\027\011\020\012\023\053\026\001\001\000\004\055\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\u010e\010\027\011\020" +
    "\012\023\053\026\001\001\000\004\036\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\030\010\027" +
    "\011\020\012\023\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\034\054\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\056\015\070\016\071" +
    "\017\067\020\051\021\072\023\063\026\045\027\042\030" +
    "\047\034\064\045\060\046\055\051\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\365\037\366\047" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\176\043\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\261\001\001\000\036\014\056\015\070\016\071" +
    "\017\067\020\051\021\072\023\063\026\045\027\042\030" +
    "\047\034\064\045\060\046\257\051\054\001\001\000\004" +
    "\040\250\001\001\000\034\014\056\015\070\016\071\017" +
    "\067\020\051\021\072\023\063\026\045\027\042\030\047" +
    "\034\064\045\244\051\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\063\030\075\001\001\000\004\036\176" +
    "\001\001\000\002\001\001\000\010\032\103\035\105\041" +
    "\106\001\001\000\010\032\172\035\173\041\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\132\044\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\122\035\123\041\124" +
    "\001\001\000\002\001\001\000\006\042\132\044\131\001" +
    "\001\000\002\001\001\000\004\044\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\137\035\140\041\106\001\001\000\004" +
    "\032\134\001\001\000\004\032\135\001\001\000\004\042" +
    "\132\001\001\000\004\042\132\001\001\000\002\001\001" +
    "\000\006\042\132\044\131\001\001\000\002\001\001\000" +
    "\004\033\143\001\001\000\006\036\153\043\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\056\015" +
    "\070\016\071\017\067\020\051\021\072\023\063\026\045" +
    "\027\042\030\047\034\064\045\060\046\146\051\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\161\031" +
    "\163\032\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\161\031\171\032\165\001\001" +
    "\000\002\001\001\000\006\042\132\044\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\161\031\177\032\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\207\025\206\037\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\207\025\221\037\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\207\025\225\037\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\207\025\230\037\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\207\025\234\037\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\014" +
    "\056\015\070\016\071\017\067\020\051\021\072\023\063" +
    "\026\045\027\042\030\047\034\064\045\060\046\240\051" +
    "\054\001\001\000\004\021\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\014\056\015\070\016" +
    "\071\017\067\020\051\021\072\023\063\026\045\027\042" +
    "\030\047\034\064\045\060\046\253\051\054\001\001\000" +
    "\004\021\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\270\001\001" +
    "\000\010\022\161\031\265\032\165\001\001\000\002\001" +
    "\001\000\004\055\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\207\025\276\037\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\056" +
    "\015\070\016\071\017\067\020\051\021\072\023\063\026" +
    "\045\027\042\030\047\034\064\045\060\046\304\051\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\103\035\311\041\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\207\025\320\037\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\103\035" +
    "\331\041\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\056\015" +
    "\070\016\071\017\067\020\051\021\072\023\063\026\045" +
    "\027\042\030\047\034\064\045\060\046\334\051\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\056\015\070\016\071\017\067\020\051\021" +
    "\072\023\063\026\045\027\042\030\047\034\064\045\060" +
    "\046\340\051\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\056\015\070\016\071" +
    "\017\067\020\051\021\072\023\063\026\045\027\042\030" +
    "\047\034\064\045\060\046\344\051\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\351\027\347\001" +
    "\001\000\002\001\001\000\036\014\056\015\070\016\071" +
    "\017\067\020\051\021\072\023\063\026\045\027\042\030" +
    "\047\034\064\045\060\046\352\051\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\362\052\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\362\052\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\103\035\375\041\106\050\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\056\015\070\016\071\017" +
    "\067\020\051\021\072\023\063\026\045\027\042\030\047" +
    "\034\064\045\060\046\u0102\051\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\056\015\070\016\071\017\067\020\051\021" +
    "\072\023\063\026\045\027\042\030\047\034\064\045\060" +
    "\046\u0106\051\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\161\031\u010c\032\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\034\054\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\034\054\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\u012d" +
    "\010\027\011\020\012\023\053\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0136\001\001\000" +
    "\002\001\001\000\004\004\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();

        public Sintactic(Lexer lexer){
             super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                }
                printStack();
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "Pendiente"));
                } catch (Exception e) {
                }
                printStack();
        }

        public void printStack() {
                System.out.println("------------STACK--------------");
                for (Object object : stack) {
                        if (object != null) {
                                Symbol s = (Symbol) object;
                                if (s.value != null) {
                                System.out.println("L: " + s.left + " C:" + s.right + " Contenido: " + s.value);
                                }
                        }
                }
                System.out.println("________________________________");
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactic$actions {
  private final Sintactic parser;

  /** Constructor */
  CUP$Sintactic$actions(Sintactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action_part00000000(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactic$result;

      /* select the action based on the action number */
      switch (CUP$Sintactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		RESULT = start_val;
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactic$parser.done_parsing();
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= package_estructure import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_estructure ::= PACKAGE ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("package_estructure",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_estructure ::= IMPORT import_id_estructure SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_estructure ::= IMPORT import_id_estructure SEMICOLON import_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_id_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_id_estructure ::= ID DOT MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_id_estructure ::= ID import_id_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_estructure ::= VISIBILITY CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_estructure ::= CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_internal_estructure ::= declarated_variable_class_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_internal_estructure ::= function_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_internal_estructure ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarated_variable_class_estructure ::= properties_variables TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarated_variable_class_estructure ::= VISIBILITY TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarated_variable_class_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarated_variable_class_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarated_several_variables ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarated_several_variables ::= ID EQUAL variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarated_several_variables ::= ID COMMA declarated_several_variables 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarated_several_variables ::= ID EQUAL variable_values COMMA declarated_several_variables 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // properties_variables ::= VISIBILITY STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // properties_variables ::= VISIBILITY FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // properties_variables ::= FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // properties_variables ::= STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // properties_variables ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // properties_variables ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_estructure ::= properties_function ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_estructure ::= VISIBILITY TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_estructure ::= TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // internal_function ::= C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // internal_function ::= function_args_estructure C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // internal_function ::= C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // internal_function ::= function_args_estructure C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internal_function ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // properties_function ::= VISIBILITY VOID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // properties_function ::= VISIBILITY STATIC VOID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // properties_function ::= VISIBILITY STATIC TYPE_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // internal_estructures ::= all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // internal_estructures ::= all_estructures internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // internal_estructures ::= error all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // all_estructures ::= declarated_variable_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // all_estructures ::= for_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // all_estructures ::= while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // all_estructures ::= do_while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // all_estructures ::= switch_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // all_estructures ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_estructures ::= if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_estructures ::= if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_estructures ::= inc_dec_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_estructures ::= return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // all_estructures ::= call_function_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_args_estructure ::= TYPE_VARIABLE ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_args_estructure ::= TYPE_VARIABLE ID COMMA function_args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_estructure ::= FOR O_PARENT declarated_variable_estructure SEMICOLON logical_comparation SEMICOLON for_increment_in C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_estructure",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // internal_while ::= logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // internal_while ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // internal_while ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT logical_comparation C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT BOOLEAN C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE internal_switch C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // internal_switch ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // internal_switch ::= case_estructure internal_switch 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_estructure ::= CASE types_values_switch COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_estructure ::= CASE types_values_switch COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_estructure ::= DEFAULT COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_estructure ::= DEFAULT COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // return_estructure ::= RETURN internal_return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("return_estructure",15, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // internal_return ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // internal_return ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // internal_return ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_estructure ::= IF O_PARENT logical_comparation C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_estructure ::= IF O_PARENT BOOLEAN C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_estructure ::= IF O_PARENT ID C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_else_estructure ::= if_estructure ELSE if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_else_estructure ::= if_estructure ELSE O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_else_estructure ::= if_estructure ELSE if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new_estructure ::= NEW OBJECT O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_estructure ::= NEW ID O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // args_estructure ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // args_estructure ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // args_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args_estructure ::= new_estructure COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // args_estructure ::= types_values COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declarated_variable_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declarated_variable_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declarated_variable_estructure ::= create_obj_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // call_function_estructure ::= ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call_function_estructure ::= ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable_values ::= types_values_other 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_values ::= number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_values ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_values ::= variable_values SUM variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // number_operations ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // number_operations ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // number_operations ::= O_PARENT number_operations C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // number_operations ::= number_operations arithmetics_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_increment_in ::= ID increment_operators 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_increment_in ::= ID asign_values variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // inc_dec_estructure ::= ID increment_operators SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logical_comparation ::= number_operations logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logical_comparation ::= types_values_without logical_operations types_values_without 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // logical_comparation ::= number_operations logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logical_comparation ::= types_values_without logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logical_comparation ::= types_values_without logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // logical_comparation ::= O_PARENT logical_comparation C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asign_values ::= C_SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asign_values ::= C_REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asign_values ::= C_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asign_values ::= C_DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asign_values ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // types_values ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // types_values ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // types_values ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // types_values ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // types_values ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // types_values_other ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // types_values_other ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // types_values_other ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // types_values_switch ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // types_values_switch ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // types_values_switch ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // types_values_switch ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // types_values_without ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // types_values_without ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // types_values_without ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithmetics_operations ::= SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithmetics_operations ::= REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmetics_operations ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmetics_operations ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // increment_operators ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // increment_operators ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // logical_operations ::= D_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // logical_operations ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // logical_operations ::= DIFFERENCE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // logical_operations ::= HIGHER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // logical_operations ::= H_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logical_operations ::= SMALLER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logical_operations ::= S_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logical_operations ::= AND 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logical_operations ::= OR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
              return CUP$Sintactic$do_action_part00000000(
                               CUP$Sintactic$act_num,
                               CUP$Sintactic$parser,
                               CUP$Sintactic$stack,
                               CUP$Sintactic$top);
    }
}

}
