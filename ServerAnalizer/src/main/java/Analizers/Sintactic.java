
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizers;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\006\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\006\010\000\002\006\007\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\055\003\000\002\055\005\000\002\055\005\000" +
    "\002\055\007\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\012\007\000\002\012\010\000\002\012\007" +
    "\000\002\054\004\000\002\054\005\000\002\054\005\000" +
    "\002\054\006\000\002\054\002\000\002\053\004\000\002" +
    "\053\005\000\002\053\005\000\002\046\003\000\002\046" +
    "\004\000\002\046\004\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\013\004\000\002\013\006\000\002\014\015" +
    "\000\002\015\011\000\002\015\010\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\016\013\000\002" +
    "\016\013\000\002\017\011\000\002\017\010\000\002\052" +
    "\003\000\002\052\004\000\002\020\010\000\002\020\007" +
    "\000\002\020\007\000\002\020\006\000\002\021\005\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\026\011\000\002\026\011\000\002\026\011\000\002\027" +
    "\005\000\002\027\007\000\002\027\005\000\002\023\013" +
    "\000\002\023\013\000\002\023\012\000\002\023\012\000" +
    "\002\024\007\000\002\024\007\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\005\000\002\030\005\000\002\030\006\000\002\030\010" +
    "\000\002\030\003\000\002\056\004\000\002\060\005\000" +
    "\002\057\003\000\002\057\006\000\002\057\005\000\002" +
    "\057\005\000\002\057\010\000\002\057\007\000\002\051" +
    "\007\000\002\051\006\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\005\000\002" +
    "\032\005\000\002\033\004\000\002\033\005\000\002\034" +
    "\005\000\002\034\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\012\006\007\064\004\071\011\072\010\001" +
    "\002\000\004\013\u0151\001\002\000\004\002\u0150\001\002" +
    "\000\004\064\004\001\002\000\004\071\u0149\001\002\000" +
    "\004\013\u0147\001\002\000\004\013\015\001\002\000\004" +
    "\002\ufffe\001\002\000\006\006\007\071\011\001\002\000" +
    "\004\002\uffff\001\002\000\004\014\016\001\002\000\016" +
    "\006\023\007\017\013\025\015\ufff3\066\026\067\020\001" +
    "\002\000\004\013\u0141\001\002\000\006\007\uffe6\066\u0140" +
    "\001\002\000\004\007\u013d\001\002\000\004\015\u013c\001" +
    "\002\000\012\007\u012e\066\u0130\067\u012f\070\u0131\001\002" +
    "\000\016\006\023\007\017\013\025\015\ufff3\066\026\067" +
    "\020\001\002\000\014\032\154\047\156\050\155\051\157" +
    "\052\152\001\002\000\006\007\uffe5\067\u0129\001\002\000" +
    "\004\013\032\001\002\000\016\006\023\007\017\013\025" +
    "\015\ufff3\066\026\067\020\001\002\000\004\015\ufff5\001" +
    "\002\000\004\020\033\001\002\000\010\007\034\015\uffdd" +
    "\021\036\001\002\000\004\013\u0126\001\002\000\004\021" +
    "\u0123\001\002\000\004\014\041\001\002\000\004\015\040" +
    "\001\002\000\016\006\uffe4\007\uffe4\013\uffe4\015\uffe4\066" +
    "\uffe4\067\uffe4\001\002\000\042\003\070\007\064\013\054" +
    "\015\uffe1\045\066\046\045\053\053\055\074\056\043\057" +
    "\057\060\050\061\067\063\046\065\060\074\073\075\056" +
    "\001\002\000\044\003\uffcb\007\uffcb\013\uffcb\015\uffcb\045" +
    "\uffcb\046\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\065\uffcb\074\uffcb\075\uffcb\001" +
    "\002\000\004\020\u0119\001\002\000\044\003\uffcf\007\uffcf" +
    "\013\uffcf\015\uffcf\045\uffcf\046\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf" +
    "\074\uffcf\075\uffcf\001\002\000\010\013\uff69\021\uff69\022" +
    "\uff69\001\002\000\020\004\122\005\117\010\126\011\124" +
    "\012\130\013\u0116\073\123\001\002\000\004\022\u0113\001" +
    "\002\000\004\020\u010a\001\002\000\046\003\uffd0\007\uffd0" +
    "\013\uffd0\015\uffd0\045\uffd0\046\uffd0\053\uffd0\054\u0104\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\074\uffd0\075\uffd0\001\002\000\044\003\uffd6\007" +
    "\uffd6\013\uffd6\015\uffd6\045\uffd6\046\uffd6\053\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\065" +
    "\uffd6\074\uffd6\075\uffd6\001\002\000\004\020\364\001\002" +
    "\000\024\013\256\020\355\032\154\045\066\046\045\047" +
    "\156\050\155\051\157\052\152\001\002\000\044\003\uffd1" +
    "\007\uffd1\013\uffd1\015\uffd1\045\uffd1\046\uffd1\053\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\065\uffd1\074\uffd1\075\uffd1\001\002\000\004\025\352\001" +
    "\002\000\004\014\337\001\002\000\004\013\325\001\002" +
    "\000\044\003\uffcc\007\uffcc\013\uffcc\015\uffcc\045\uffcc\046" +
    "\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\065\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\004\015\uffdf\001\002\000\044\003\uffd5\007\uffd5\013\uffd5" +
    "\015\uffd5\045\uffd5\046\uffd5\053\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5\074\uffd5" +
    "\075\uffd5\001\002\000\004\013\314\001\002\000\044\003" +
    "\070\007\064\013\054\015\uffd9\045\066\046\045\053\053" +
    "\055\074\056\043\057\057\060\050\061\067\062\uffd9\063" +
    "\046\065\060\074\073\075\056\001\002\000\010\013\uff6a" +
    "\021\uff6a\022\uff6a\001\002\000\012\004\302\010\303\012" +
    "\305\013\301\001\002\000\036\007\064\013\054\045\066" +
    "\046\045\053\053\055\074\056\043\057\057\060\050\061" +
    "\067\063\046\065\060\074\073\075\056\001\002\000\046" +
    "\003\uffa0\007\uffa0\013\uffa0\015\uffa0\022\uffa0\045\uffa0\046" +
    "\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\065\uffa0\074\uffa0\075\uffa0\001\002\000" +
    "\044\003\uffce\007\uffce\013\uffce\015\uffce\045\uffce\046\uffce" +
    "\053\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\065\uffce\074\uffce\075\uffce\001\002\000\004" +
    "\023\273\001\002\000\004\020\104\001\002\000\004\013" +
    "\102\001\002\000\044\003\uffd2\007\uffd2\013\uffd2\015\uffd2" +
    "\045\uffd2\046\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\074\uffd2\075\uffd2" +
    "\001\002\000\044\003\uffd4\007\uffd4\013\uffd4\015\uffd4\045" +
    "\uffd4\046\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\065\uffd4\074\uffd4\075\uffd4\001" +
    "\002\000\044\003\uffd3\007\uffd3\013\uffd3\015\uffd3\045\uffd3" +
    "\046\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\065\uffd3\074\uffd3\075\uffd3\001\002" +
    "\000\044\003\uffcd\007\uffcd\013\uffcd\015\uffcd\045\uffcd\046" +
    "\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\065\uffcd\074\uffcd\075\uffcd\001\002\000" +
    "\004\022\103\001\002\000\044\003\uff89\007\uff89\013\uff89" +
    "\015\uff89\045\uff89\046\uff89\053\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\063\uff89\065\uff89\074\uff89" +
    "\075\uff89\001\002\000\012\007\064\013\105\065\060\075" +
    "\107\001\002\000\016\013\256\032\154\047\156\050\155" +
    "\051\157\052\152\001\002\000\004\022\211\001\002\000" +
    "\004\025\110\001\002\000\004\013\112\001\002\000\014" +
    "\032\154\047\156\050\155\051\157\052\152\001\002\000" +
    "\030\020\113\021\uff9d\022\uff9d\024\uff9d\025\114\026\uff9d" +
    "\032\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\001\002\000" +
    "\022\004\122\005\117\010\126\011\124\012\130\013\127" +
    "\021\121\073\123\001\002\000\004\013\112\001\002\000" +
    "\024\021\uff9a\022\uff9a\024\uff9a\026\uff9a\032\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\001\002\000\004\021\147\001" +
    "\002\000\010\021\uff7c\022\uff7c\024\uff7c\001\002\000\006" +
    "\021\uffa8\024\145\001\002\000\026\021\uff9b\022\uff9b\024" +
    "\uff9b\025\143\026\uff9b\032\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\001\002\000\010\021\uff7b\022\uff7b\024\uff7b\001" +
    "\002\000\006\013\133\065\134\001\002\000\010\021\uff79" +
    "\022\uff79\024\uff79\001\002\000\006\021\uffa7\024\131\001" +
    "\002\000\010\021\uff7d\022\uff7d\024\uff7d\001\002\000\004" +
    "\021\uffa6\001\002\000\010\021\uff7a\022\uff7a\024\uff7a\001" +
    "\002\000\020\004\122\005\117\010\126\011\124\012\130" +
    "\013\127\073\123\001\002\000\004\021\uffa4\001\002\000" +
    "\004\020\140\001\002\000\004\020\135\001\002\000\020" +
    "\004\122\005\117\010\126\011\124\012\130\013\127\073" +
    "\123\001\002\000\004\021\137\001\002\000\010\021\uffaa" +
    "\022\uffaa\024\uffaa\001\002\000\020\004\122\005\117\010" +
    "\126\011\124\012\130\013\127\073\123\001\002\000\004" +
    "\021\142\001\002\000\010\021\uffa9\022\uffa9\024\uffa9\001" +
    "\002\000\004\013\112\001\002\000\024\021\uff98\022\uff98" +
    "\024\uff98\026\uff98\032\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\001\002\000\020\004\122\005\117\010\126\011\124" +
    "\012\130\013\127\073\123\001\002\000\004\021\uffa5\001" +
    "\002\000\026\021\uff9c\022\uff9c\024\uff9c\025\150\026\uff9c" +
    "\032\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\001\002\000" +
    "\004\013\112\001\002\000\024\021\uff99\022\uff99\024\uff99" +
    "\026\uff99\032\uff99\047\uff99\050\uff99\051\uff99\052\uff99\001" +
    "\002\000\022\004\uff7f\005\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\020\uff7f\075\uff7f\001\002\000\022\004\163\005" +
    "\161\010\166\011\164\012\173\013\170\020\160\075\172" +
    "\001\002\000\022\004\uff7e\005\uff7e\010\uff7e\011\uff7e\012" +
    "\uff7e\013\uff7e\020\uff7e\075\uff7e\001\002\000\022\004\uff81" +
    "\005\uff81\010\uff81\011\uff81\012\uff81\013\uff81\020\uff81\075" +
    "\uff81\001\002\000\022\004\uff82\005\uff82\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\020\uff82\075\uff82\001\002\000\022\004" +
    "\uff80\005\uff80\010\uff80\011\uff80\012\uff80\013\uff80\020\uff80" +
    "\075\uff80\001\002\000\010\004\163\005\161\020\160\001" +
    "\002\000\042\021\uff8f\022\uff8f\024\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\001\002\000\012" +
    "\021\uff95\022\uff95\024\uff95\026\uff95\001\002\000\042\021" +
    "\uff90\022\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\033\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\001\002\000\012\021\uff76\022\uff76" +
    "\024\uff76\026\uff76\001\002\000\006\022\204\026\205\001" +
    "\002\000\012\021\uff78\022\uff78\024\uff78\026\uff78\001\002" +
    "\000\020\021\uff94\022\uff94\024\uff94\026\176\027\202\030" +
    "\201\031\177\001\002\000\012\021\uff93\022\uff93\024\uff93" +
    "\026\uff93\001\002\000\012\021\uff92\022\uff92\024\uff92\026" +
    "\uff92\001\002\000\004\025\174\001\002\000\012\021\uff77" +
    "\022\uff77\024\uff77\026\uff77\001\002\000\004\013\112\001" +
    "\002\000\012\021\uff9e\022\uff9e\024\uff9e\026\uff9e\001\002" +
    "\000\010\004\uff6e\005\uff6e\020\uff6e\001\002\000\010\004" +
    "\uff6c\005\uff6c\020\uff6c\001\002\000\010\004\163\005\161" +
    "\020\160\001\002\000\010\004\uff6b\005\uff6b\020\uff6b\001" +
    "\002\000\010\004\uff6d\005\uff6d\020\uff6d\001\002\000\042" +
    "\021\uff8d\022\uff8d\024\uff8d\026\176\027\202\030\201\031" +
    "\177\033\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\001\002\000\046\003\uffa1\007" +
    "\uffa1\013\uffa1\015\uffa1\022\uffa1\045\uffa1\046\uffa1\053\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\065\uffa1\074\uffa1\075\uffa1\001\002\000\022\004\163" +
    "\005\161\010\166\011\164\012\173\013\170\020\160\075" +
    "\172\001\002\000\012\021\uff91\022\uff91\024\uff91\026\uff91" +
    "\001\002\000\014\021\210\026\176\027\202\030\201\031" +
    "\177\001\002\000\042\021\uff8e\022\uff8e\024\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\033\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\001\002" +
    "\000\016\004\163\005\161\011\213\012\220\013\215\020" +
    "\212\001\002\000\016\004\163\005\161\011\213\012\220" +
    "\013\215\020\212\001\002\000\030\021\uff70\022\uff70\033" +
    "\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\001\002\000\034\026\176\027\202\030" +
    "\201\031\177\033\225\035\224\036\227\037\222\040\230" +
    "\041\223\042\226\043\221\044\232\001\002\000\030\021" +
    "\uff6f\022\uff6f\033\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\001\002\000\004\022" +
    "\241\001\002\000\024\033\225\035\224\036\227\037\222" +
    "\040\230\041\223\042\226\043\221\044\232\001\002\000" +
    "\030\021\uff71\022\uff71\033\uff71\035\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\001\002\000" +
    "\016\004\uff61\005\uff61\011\uff61\012\uff61\013\uff61\020\uff61" +
    "\001\002\000\016\004\uff65\005\uff65\011\uff65\012\uff65\013" +
    "\uff65\020\uff65\001\002\000\016\004\uff63\005\uff63\011\uff63" +
    "\012\uff63\013\uff63\020\uff63\001\002\000\016\004\uff67\005" +
    "\uff67\011\uff67\012\uff67\013\uff67\020\uff67\001\002\000\016" +
    "\004\uff68\005\uff68\011\uff68\012\uff68\013\uff68\020\uff68\001" +
    "\002\000\016\004\uff62\005\uff62\011\uff62\012\uff62\013\uff62" +
    "\020\uff62\001\002\000\016\004\uff66\005\uff66\011\uff66\012" +
    "\uff66\013\uff66\020\uff66\001\002\000\016\004\uff64\005\uff64" +
    "\011\uff64\012\uff64\013\uff64\020\uff64\001\002\000\016\004" +
    "\163\005\161\011\213\012\220\013\215\020\212\001\002" +
    "\000\016\004\uff60\005\uff60\011\uff60\012\uff60\013\uff60\020" +
    "\uff60\001\002\000\040\021\uff84\022\uff84\026\176\027\202" +
    "\030\201\031\177\033\225\035\224\036\227\037\222\040" +
    "\230\041\223\042\226\043\221\044\232\001\002\000\006" +
    "\021\uff85\022\uff85\001\002\000\030\021\uff87\022\uff87\033" +
    "\225\035\224\036\227\037\222\040\230\041\223\042\226" +
    "\043\221\044\232\001\002\000\016\004\163\005\161\011" +
    "\213\012\220\013\215\020\212\001\002\000\040\021\uff88" +
    "\022\uff88\026\176\027\202\030\201\031\177\033\225\035" +
    "\224\036\227\037\222\040\230\041\223\042\226\043\221" +
    "\044\232\001\002\000\006\021\uff86\022\uff86\001\002\000" +
    "\004\013\242\001\002\000\020\032\154\045\066\046\045" +
    "\047\156\050\155\051\157\052\152\001\002\000\004\021" +
    "\244\001\002\000\004\014\245\001\002\000\040\003\070" +
    "\007\064\013\054\045\066\046\045\053\053\055\074\056" +
    "\043\057\057\060\050\061\067\063\046\065\060\074\073" +
    "\075\056\001\002\000\004\015\247\001\002\000\044\003" +
    "\uffc8\007\uffc8\013\uffc8\015\uffc8\045\uffc8\046\uffc8\053\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\065\uffc8\074\uffc8\075\uffc8\001\002\000\004\021\uff8c" +
    "\001\002\000\022\004\163\005\161\010\166\011\164\012" +
    "\173\013\170\020\160\075\172\001\002\000\006\021\uff8b" +
    "\026\205\001\002\000\036\021\210\026\176\027\202\030" +
    "\201\031\177\033\225\035\224\036\227\037\222\040\230" +
    "\041\223\042\226\043\221\044\232\001\002\000\004\021" +
    "\255\001\002\000\006\021\uff83\022\uff83\001\002\000\004" +
    "\032\262\001\002\000\022\004\163\005\161\010\166\011" +
    "\164\012\173\013\170\020\160\075\172\001\002\000\006" +
    "\022\261\026\205\001\002\000\046\003\uffa2\007\uffa2\013" +
    "\uffa2\015\uffa2\022\uffa2\045\uffa2\046\uffa2\053\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\065" +
    "\uffa2\074\uffa2\075\uffa2\001\002\000\004\073\263\001\002" +
    "\000\004\013\264\001\002\000\004\020\265\001\002\000" +
    "\022\004\122\005\117\010\126\011\124\012\130\013\127" +
    "\021\267\073\123\001\002\000\004\021\271\001\002\000" +
    "\004\022\270\001\002\000\046\003\uffab\007\uffab\013\uffab" +
    "\015\uffab\022\uffab\045\uffab\046\uffab\053\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\065\uffab" +
    "\074\uffab\075\uffab\001\002\000\004\022\272\001\002\000" +
    "\046\003\uffad\007\uffad\013\uffad\015\uffad\022\uffad\045\uffad" +
    "\046\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\065\uffad\074\uffad\075\uffad\001\002" +
    "\000\040\003\070\007\064\013\054\045\066\046\045\053" +
    "\053\055\074\056\043\057\057\060\050\061\067\063\046" +
    "\065\060\074\073\075\056\001\002\000\006\062\275\063" +
    "\046\001\002\000\004\022\277\001\002\000\044\003\uffb9" +
    "\007\uffb9\013\uffb9\015\uffb9\045\uffb9\046\uffb9\053\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\065\uffb9\074\uffb9\075\uffb9\001\002\000\044\003\uffba\007" +
    "\uffba\013\uffba\015\uffba\045\uffba\046\uffba\053\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065" +
    "\uffba\074\uffba\075\uffba\001\002\000\010\015\uffd7\062\uffd7" +
    "\063\uffd7\001\002\000\006\021\uff72\023\uff72\001\002\000" +
    "\006\021\uff74\023\uff74\001\002\000\006\021\uff75\023\uff75" +
    "\001\002\000\004\023\306\001\002\000\006\021\uff73\023" +
    "\uff73\001\002\000\040\003\070\007\064\013\054\045\066" +
    "\046\045\053\053\055\074\056\043\057\057\060\050\061" +
    "\067\063\046\065\060\074\073\075\056\001\002\000\006" +
    "\062\310\063\046\001\002\000\004\022\312\001\002\000" +
    "\044\003\uffbb\007\uffbb\013\uffbb\015\uffbb\045\uffbb\046\uffbb" +
    "\053\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\065\uffbb\074\uffbb\075\uffbb\001\002\000\044" +
    "\003\uffbc\007\uffbc\013\uffbc\015\uffbc\045\uffbc\046\uffbc\053" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\065\uffbc\074\uffbc\075\uffbc\001\002\000\010\015" +
    "\uffd8\062\uffd8\063\uffd8\001\002\000\010\022\uffee\024\317" +
    "\032\320\001\002\000\004\022\316\001\002\000\046\003" +
    "\uffa3\007\uffa3\013\uffa3\015\uffa3\022\uffa3\045\uffa3\046\uffa3" +
    "\053\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\065\uffa3\074\uffa3\075\uffa3\001\002\000\004" +
    "\013\314\001\002\000\022\004\163\005\161\010\166\011" +
    "\164\012\173\013\170\020\160\075\172\001\002\000\010" +
    "\022\uffed\024\322\026\205\001\002\000\004\013\314\001" +
    "\002\000\004\022\uffeb\001\002\000\004\022\uffec\001\002" +
    "\000\004\032\326\001\002\000\004\073\327\001\002\000" +
    "\004\065\330\001\002\000\004\020\331\001\002\000\022" +
    "\004\122\005\117\010\126\011\124\012\130\013\127\021" +
    "\333\073\123\001\002\000\004\021\335\001\002\000\004" +
    "\022\334\001\002\000\046\003\uffac\007\uffac\013\uffac\015" +
    "\uffac\022\uffac\045\uffac\046\uffac\053\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065\uffac\074" +
    "\uffac\075\uffac\001\002\000\004\022\336\001\002\000\046" +
    "\003\uffae\007\uffae\013\uffae\015\uffae\022\uffae\045\uffae\046" +
    "\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\065\uffae\074\uffae\075\uffae\001\002\000" +
    "\040\003\070\007\064\013\054\045\066\046\045\053\053" +
    "\055\074\056\043\057\057\060\050\061\067\063\046\065" +
    "\060\074\073\075\056\001\002\000\004\015\341\001\002" +
    "\000\004\056\342\001\002\000\004\020\343\001\002\000" +
    "\016\004\163\005\161\011\344\012\220\013\215\020\212" +
    "\001\002\000\026\021\350\033\uff70\035\uff70\036\uff70\037" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\001\002" +
    "\000\004\021\346\001\002\000\004\022\347\001\002\000" +
    "\044\003\uffc2\007\uffc2\013\uffc2\015\uffc2\045\uffc2\046\uffc2" +
    "\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\065\uffc2\074\uffc2\075\uffc2\001\002\000\004" +
    "\022\351\001\002\000\044\003\uffc1\007\uffc1\013\uffc1\015" +
    "\uffc1\045\uffc1\046\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\065\uffc1\074\uffc1\075" +
    "\uffc1\001\002\000\004\013\112\001\002\000\016\022\uff9e" +
    "\032\154\047\156\050\155\051\157\052\152\001\002\000" +
    "\004\022\363\001\002\000\022\004\122\005\117\010\126" +
    "\011\124\012\130\013\127\021\357\073\123\001\002\000" +
    "\004\021\361\001\002\000\004\022\360\001\002\000\044" +
    "\003\uff96\007\uff96\013\uff96\015\uff96\045\uff96\046\uff96\053" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\065\uff96\074\uff96\075\uff96\001\002\000\004\022" +
    "\362\001\002\000\044\003\uff97\007\uff97\013\uff97\015\uff97" +
    "\045\uff97\046\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\065\uff97\074\uff97\075\uff97" +
    "\001\002\000\044\003\uff8a\007\uff8a\013\uff8a\015\uff8a\045" +
    "\uff8a\046\uff8a\053\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\061\uff8a\062\uff8a\063\uff8a\065\uff8a\074\uff8a\075\uff8a\001" +
    "\002\000\016\004\163\005\161\011\365\012\220\013\366" +
    "\020\212\001\002\000\026\021\u0100\033\uff70\035\uff70\036" +
    "\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70" +
    "\001\002\000\026\021\374\033\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\001\002" +
    "\000\004\021\370\001\002\000\004\014\371\001\002\000" +
    "\040\003\070\007\064\013\054\045\066\046\045\053\053" +
    "\055\074\056\043\057\057\060\050\061\067\063\046\065" +
    "\060\074\073\075\056\001\002\000\004\015\373\001\002" +
    "\000\046\003\uffb4\007\uffb4\013\uffb4\015\uffb4\045\uffb4\046" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\065\uffb4\074\uffb4\075\uffb4\001" +
    "\002\000\004\014\375\001\002\000\040\003\070\007\064" +
    "\013\054\045\066\046\045\053\053\055\074\056\043\057" +
    "\057\060\050\061\067\063\046\065\060\074\073\075\056" +
    "\001\002\000\004\015\377\001\002\000\046\003\uffb2\007" +
    "\uffb2\013\uffb2\015\uffb2\045\uffb2\046\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\065\uffb2\074\uffb2\075\uffb2\001\002\000\004\014\u0101" +
    "\001\002\000\040\003\070\007\064\013\054\045\066\046" +
    "\045\053\053\055\074\056\043\057\057\060\050\061\067" +
    "\063\046\065\060\074\073\075\056\001\002\000\004\015" +
    "\u0103\001\002\000\046\003\uffb3\007\uffb3\013\uffb3\015\uffb3" +
    "\045\uffb3\046\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\074\uffb3" +
    "\075\uffb3\001\002\000\006\014\u0106\053\053\001\002\000" +
    "\044\003\uffaf\007\uffaf\013\uffaf\015\uffaf\045\uffaf\046\uffaf" +
    "\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\065\uffaf\074\uffaf\075\uffaf\001\002\000\040" +
    "\003\070\007\064\013\054\045\066\046\045\053\053\055" +
    "\074\056\043\057\057\060\050\061\067\063\046\065\060" +
    "\074\073\075\056\001\002\000\046\003\uffb1\007\uffb1\013" +
    "\uffb1\015\uffb1\045\uffb1\046\uffb1\053\uffb1\054\u0104\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\065" +
    "\uffb1\074\uffb1\075\uffb1\001\002\000\004\015\u0109\001\002" +
    "\000\044\003\uffb0\007\uffb0\013\uffb0\015\uffb0\045\uffb0\046" +
    "\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\065\uffb0\074\uffb0\075\uffb0\001\002\000" +
    "\012\004\302\010\303\012\305\013\301\001\002\000\004" +
    "\021\u010c\001\002\000\004\014\u010d\001\002\000\010\015" +
    "\u010f\061\067\074\073\001\002\000\004\015\u0112\001\002" +
    "\000\044\003\uffbf\007\uffbf\013\uffbf\015\uffbf\045\uffbf\046" +
    "\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\065\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\010\015\uffbe\061\067\074\073\001\002\000\004\015\uffbd" +
    "\001\002\000\044\003\uffc0\007\uffc0\013\uffc0\015\uffc0\045" +
    "\uffc0\046\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\065\uffc0\074\uffc0\075\uffc0\001" +
    "\002\000\044\003\uff9f\007\uff9f\013\uff9f\015\uff9f\045\uff9f" +
    "\046\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\065\uff9f\074\uff9f\075\uff9f\001\002" +
    "\000\004\022\uffb5\001\002\000\004\022\uffb6\001\002\000" +
    "\004\022\uffb7\001\002\000\004\022\u0118\001\002\000\044" +
    "\003\uffb8\007\uffb8\013\uffb8\015\uffb8\045\uffb8\046\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\065\uffb8\074\uffb8\075\uffb8\001\002\000\016\004" +
    "\163\005\161\011\u011a\012\220\013\u011b\020\212\001\002" +
    "\000\026\021\uffc4\033\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\001\002\000\026" +
    "\021\uffc3\033\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\044\uff6f\001\002\000\004\021\uffc5" +
    "\001\002\000\004\021\u011e\001\002\000\004\014\u011f\001" +
    "\002\000\042\003\070\007\064\013\054\015\u0120\045\066" +
    "\046\045\053\053\055\074\056\043\057\057\060\050\061" +
    "\067\063\046\065\060\074\073\075\056\001\002\000\044" +
    "\003\uffc6\007\uffc6\013\uffc6\015\uffc6\045\uffc6\046\uffc6\053" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\065\uffc6\074\uffc6\075\uffc6\001\002\000\004\015" +
    "\u0122\001\002\000\044\003\uffc7\007\uffc7\013\uffc7\015\uffc7" +
    "\045\uffc7\046\uffc7\053\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\074\uffc7\075\uffc7" +
    "\001\002\000\004\014\u0124\001\002\000\042\003\070\007" +
    "\064\013\054\015\uffe0\045\066\046\045\053\053\055\074" +
    "\056\043\057\057\060\050\061\067\063\046\065\060\074" +
    "\073\075\056\001\002\000\004\015\uffde\001\002\000\006" +
    "\021\uffca\024\u0127\001\002\000\004\007\034\001\002\000" +
    "\004\021\uffc9\001\002\000\004\007\uffe8\001\002\000\022" +
    "\004\163\005\161\010\166\011\164\012\173\013\170\020" +
    "\160\075\172\001\002\000\006\022\u012c\026\205\001\002" +
    "\000\016\006\uffef\007\uffef\013\uffef\015\uffef\066\uffef\067" +
    "\uffef\001\002\000\004\015\ufff4\001\002\000\004\013\u0136" +
    "\001\002\000\010\007\u0133\066\u0134\070\u0135\001\002\000" +
    "\004\067\u0132\001\002\000\004\013\uffdc\001\002\000\004" +
    "\007\uffe9\001\002\000\004\013\uffda\001\002\000\004\007" +
    "\uffea\001\002\000\004\013\uffdb\001\002\000\012\020\u0139" +
    "\022\uffee\024\317\032\320\001\002\000\004\022\u0138\001" +
    "\002\000\016\006\ufff1\007\ufff1\013\ufff1\015\ufff1\066\ufff1" +
    "\067\ufff1\001\002\000\010\007\034\015\uffdd\021\036\001" +
    "\002\000\004\015\u013b\001\002\000\016\006\uffe3\007\uffe3" +
    "\013\uffe3\015\uffe3\066\uffe3\067\uffe3\001\002\000\004\002" +
    "\ufff6\001\002\000\004\013\314\001\002\000\004\022\u013f" +
    "\001\002\000\016\006\ufff2\007\ufff2\013\ufff2\015\ufff2\066" +
    "\ufff2\067\ufff2\001\002\000\004\007\uffe7\001\002\000\012" +
    "\020\u0144\022\uffee\024\317\032\320\001\002\000\004\022" +
    "\u0143\001\002\000\016\006\ufff0\007\ufff0\013\ufff0\015\ufff0" +
    "\066\ufff0\067\ufff0\001\002\000\010\007\034\015\uffdd\021" +
    "\036\001\002\000\004\015\u0146\001\002\000\016\006\uffe2" +
    "\007\uffe2\013\uffe2\015\uffe2\066\uffe2\067\uffe2\001\002\000" +
    "\004\022\u0148\001\002\000\004\064\ufffd\001\002\000\004" +
    "\013\u014a\001\002\000\004\014\u014b\001\002\000\016\006" +
    "\023\007\017\013\025\015\ufff3\066\026\067\020\001\002" +
    "\000\004\015\u014d\001\002\000\004\002\ufff7\001\002\000" +
    "\006\006\007\071\011\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\010\013\u0151\022\ufffa\025" +
    "\u0156\001\002\000\004\022\u0153\001\002\000\010\006\ufffc" +
    "\064\004\071\ufffc\001\002\000\006\006\ufffb\071\ufffb\001" +
    "\002\000\004\022\ufff8\001\002\000\004\030\u0157\001\002" +
    "\000\004\022\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\012\002\004\003\005\004\012\006\011\001" +
    "\001\000\004\005\u0151\001\001\000\002\001\001\000\004" +
    "\004\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\021\010" +
    "\027\011\020\012\023\053\026\001\001\000\004\055\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\u012c\010\027\011\020" +
    "\012\023\053\026\001\001\000\004\036\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\030\010\027" +
    "\011\020\012\023\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\034\054\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\062\015\076\016\077" +
    "\017\075\020\054\021\100\023\070\026\050\027\043\030" +
    "\051\034\071\043\074\045\064\046\061\051\060\056\041" +
    "\060\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\u0113\037\u0114" +
    "\047\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\256\043\353\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\314\001" +
    "\001\000\044\014\062\015\076\016\077\017\075\020\054" +
    "\021\100\023\070\026\050\027\043\030\051\034\071\043" +
    "\074\045\064\046\312\051\060\056\041\060\046\001\001" +
    "\000\002\001\001\000\004\040\303\001\001\000\042\014" +
    "\062\015\076\016\077\017\075\020\054\021\100\023\070" +
    "\026\050\027\043\030\051\034\071\043\074\045\277\051" +
    "\060\056\041\060\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\070\030\105\001\001\000\004\036\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\110\001" +
    "\001\000\004\036\152\001\001\000\002\001\001\000\010" +
    "\024\117\025\115\037\124\001\001\000\004\057\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\117\025\131\037\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\117\025\135\037" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\117\025\140\037\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\143\001\001\000\002\001\001" +
    "\000\010\024\117\025\145\037\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\161\031\164\032" +
    "\166\060\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\177\001\001\000\002\001\001\000\012" +
    "\022\161\031\205\032\166\060\170\001\001\000\002\001" +
    "\001\000\004\042\177\001\001\000\002\001\001\000\010" +
    "\032\213\035\215\041\216\001\001\000\010\032\252\035" +
    "\253\041\216\001\001\000\002\001\001\000\006\042\177" +
    "\044\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\232\035\233\041\234\001\001\000" +
    "\002\001\001\000\006\042\177\044\235\001\001\000\002" +
    "\001\001\000\004\044\230\001\001\000\010\032\236\035" +
    "\237\041\216\001\001\000\006\042\177\044\235\001\001" +
    "\000\002\001\001\000\004\033\242\001\001\000\006\036" +
    "\250\043\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\062\015\076\016\077\017\075\020\054\021" +
    "\100\023\070\026\050\027\043\030\051\034\071\043\074" +
    "\045\064\046\245\051\060\056\041\060\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\161\031\251\032\166\060\170\001\001\000\002\001" +
    "\001\000\006\042\177\044\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\161\031" +
    "\257\032\166\060\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\117\025\265\037\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\062\015\076\016\077" +
    "\017\075\020\054\021\100\023\070\026\050\027\043\030" +
    "\051\034\071\043\074\045\064\046\273\051\060\056\041" +
    "\060\046\001\001\000\004\021\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\062\015\076" +
    "\016\077\017\075\020\054\021\100\023\070\026\050\027" +
    "\043\030\051\034\071\043\074\045\064\046\306\051\060" +
    "\056\041\060\046\001\001\000\004\021\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\323\001\001\000\012\022\161\031\320" +
    "\032\166\060\170\001\001\000\002\001\001\000\004\055" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\117\025\331\037\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\062\015\076\016\077" +
    "\017\075\020\054\021\100\023\070\026\050\027\043\030" +
    "\051\034\071\043\074\045\064\046\337\051\060\056\041" +
    "\060\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\213\035\344\041\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\352\001\001\000\004\036\152\001\001\000\002\001" +
    "\001\000\010\024\117\025\355\037\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\213" +
    "\035\366\041\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\014\062" +
    "\015\076\016\077\017\075\020\054\021\100\023\070\026" +
    "\050\027\043\030\051\034\071\043\074\045\064\046\371" +
    "\051\060\056\041\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\062\015\076" +
    "\016\077\017\075\020\054\021\100\023\070\026\050\027" +
    "\043\030\051\034\071\043\074\045\064\046\375\051\060" +
    "\056\041\060\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\062\015\076\016\077" +
    "\017\075\020\054\021\100\023\070\026\050\027\043\030" +
    "\051\034\071\043\074\045\064\046\u0101\051\060\056\041" +
    "\060\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0106\027\u0104\001\001\000\002\001\001\000\044" +
    "\014\062\015\076\016\077\017\075\020\054\021\100\023" +
    "\070\026\050\027\043\030\051\034\071\043\074\045\064" +
    "\046\u0107\051\060\056\041\060\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\u010f\052\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u010f\052\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\032\213\035\u011b\041\216\050\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\062\015\076" +
    "\016\077\017\075\020\054\021\100\023\070\026\050\027" +
    "\043\030\051\034\071\043\074\045\064\046\u0120\051\060" +
    "\056\041\060\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\014\062" +
    "\015\076\016\077\017\075\020\054\021\100\023\070\026" +
    "\050\027\043\030\051\034\071\043\074\045\064\046\u0124" +
    "\051\060\056\041\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\161\031\u012a\032\166\060" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\034" +
    "\054\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\034\054\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\u014b\010\027\011\020\012\023\053\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0154\001\001\000\002\001\001\000\004\004\u0153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();

        public Sintactic(Lexer lexer){
             super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                }
                printStack();
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "Pendiente"));
                } catch (Exception e) {
                }
                printStack();
        }

        public void printStack() {
                System.out.println("------------STACK--------------");
                for (Object object : stack) {
                        if (object != null) {
                                Symbol s = (Symbol) object;
                                if (s.value != null) {
                                        System.out.println("L: " + s.left + " C:" + s.right + " Contenido: " + s.value);
                                }
                        }
                }
                System.out.println("________________________________");
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactic$actions {
  private final Sintactic parser;

  /** Constructor */
  CUP$Sintactic$actions(Sintactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action_part00000000(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactic$result;

      /* select the action based on the action number */
      switch (CUP$Sintactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		RESULT = start_val;
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactic$parser.done_parsing();
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= package_estructure import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_estructure ::= PACKAGE ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("package_estructure",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_estructure ::= IMPORT import_id_estructure SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_estructure ::= IMPORT import_id_estructure SEMICOLON import_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_id_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_id_estructure ::= ID DOT MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_id_estructure ::= ID import_id_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_estructure ::= VISIBILITY CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_estructure ::= CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_internal_estructure ::= declarated_variable_class_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_internal_estructure ::= function_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_internal_estructure ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarated_variable_class_estructure ::= properties_variables TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarated_variable_class_estructure ::= VISIBILITY TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarated_variable_class_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarated_variable_class_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarated_several_variables ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarated_several_variables ::= ID EQUAL variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarated_several_variables ::= ID COMMA declarated_several_variables 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarated_several_variables ::= ID EQUAL variable_values COMMA declarated_several_variables 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // properties_variables ::= VISIBILITY STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // properties_variables ::= VISIBILITY FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // properties_variables ::= FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // properties_variables ::= STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // properties_variables ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // properties_variables ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_estructure ::= properties_function ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_estructure ::= VISIBILITY TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_estructure ::= TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // internal_function ::= C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // internal_function ::= function_args_estructure C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // internal_function ::= C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // internal_function ::= function_args_estructure C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internal_function ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // properties_function ::= VISIBILITY VOID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // properties_function ::= VISIBILITY STATIC VOID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // properties_function ::= VISIBILITY STATIC TYPE_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // internal_estructures ::= all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // internal_estructures ::= all_estructures internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // internal_estructures ::= error all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // all_estructures ::= declarated_variable_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // all_estructures ::= for_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // all_estructures ::= while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // all_estructures ::= do_while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // all_estructures ::= switch_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // all_estructures ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_estructures ::= if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_estructures ::= if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_estructures ::= inc_dec_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_estructures ::= return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // all_estructures ::= call_function_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // all_estructures ::= this_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_args_estructure ::= TYPE_VARIABLE ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_args_estructure ::= TYPE_VARIABLE ID COMMA function_args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_estructure ::= FOR O_PARENT declarated_variable_estructure SEMICOLON logical_comparation SEMICOLON for_increment_in C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_estructure",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // internal_while ::= logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // internal_while ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // internal_while ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT logical_comparation C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT BOOLEAN C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE internal_switch C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // internal_switch ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // internal_switch ::= case_estructure internal_switch 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_estructure ::= CASE types_values_switch COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_estructure ::= CASE types_values_switch COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_estructure ::= DEFAULT COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_estructure ::= DEFAULT COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_estructure ::= RETURN internal_return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("return_estructure",15, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // internal_return ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // internal_return ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // internal_return ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_estructure ::= IF O_PARENT logical_comparation C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_estructure ::= IF O_PARENT BOOLEAN C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_estructure ::= IF O_PARENT ID C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_else_estructure ::= if_estructure ELSE if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_else_estructure ::= if_estructure ELSE O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_else_estructure ::= if_estructure ELSE if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_estructure ::= NEW OBJECT O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_estructure ::= NEW ID O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // args_estructure ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // args_estructure ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // args_estructure ::= new_estructure COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // args_estructure ::= types_values COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declarated_variable_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declarated_variable_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declarated_variable_estructure ::= THIS DOT call_function_this asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declarated_variable_estructure ::= create_obj_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // this_estructure ::= this_internal SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_estructure",44, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // this_internal ::= THIS DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_internal",46, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // call_function_this ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // call_function_this ::= ID O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // call_function_this ::= ID O_PARENT C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // call_function_this ::= ID DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // call_function_this ::= ID O_PARENT args_estructure C_PARENT DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // call_function_this ::= ID O_PARENT C_PARENT DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // call_function_estructure ::= ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // call_function_estructure ::= ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variable_values ::= types_values_other 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variable_values ::= number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable_values ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable_values ::= this_internal 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable_values ::= variable_values SUM variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // number_operations ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // number_operations ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // number_operations ::= O_PARENT number_operations C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // number_operations ::= number_operations arithmetics_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_increment_in ::= ID increment_operators 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_increment_in ::= ID asign_values variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // inc_dec_estructure ::= ID increment_operators SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // inc_dec_estructure ::= increment_operators ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // logical_comparation ::= number_operations logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logical_comparation ::= types_values_without logical_operations types_values_without 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logical_comparation ::= number_operations logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logical_comparation ::= types_values_without logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logical_comparation ::= types_values_without logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logical_comparation ::= O_PARENT logical_comparation C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asign_values ::= C_SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asign_values ::= C_REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asign_values ::= C_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asign_values ::= C_DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asign_values ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // types_values ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // types_values ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // types_values ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // types_values ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // types_values ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // types_values_other ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // types_values_other ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // types_values_other ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // types_values_switch ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // types_values_switch ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // types_values_switch ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // types_values_switch ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // types_values_without ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // types_values_without ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // types_values_without ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arithmetics_operations ::= SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arithmetics_operations ::= REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arithmetics_operations ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arithmetics_operations ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // increment_operators ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // increment_operators ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logical_operations ::= D_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logical_operations ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // logical_operations ::= DIFFERENCE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // logical_operations ::= HIGHER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // logical_operations ::= H_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // logical_operations ::= SMALLER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // logical_operations ::= S_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // logical_operations ::= AND 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // logical_operations ::= OR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
              return CUP$Sintactic$do_action_part00000000(
                               CUP$Sintactic$act_num,
                               CUP$Sintactic$parser,
                               CUP$Sintactic$stack,
                               CUP$Sintactic$top);
    }
}

}
