//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------
package Back.Analizers;

import Back.Controller.SaveInfo;
import java_cup.runtime.*;
import java.util.ArrayList;
import Back.Objects.ClassInfo;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintactic extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintactic() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintactic(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\255\000\002\002\004\000\002\002\005\000\002\002"
        + "\004\000\002\002\003\000\002\002\002\000\002\003\005"
        + "\000\002\004\005\000\002\004\006\000\002\005\003\000"
        + "\002\005\005\000\002\005\004\000\002\006\010\000\002"
        + "\006\007\000\002\007\004\000\002\007\004\000\002\007"
        + "\002\000\002\007\004\000\002\010\006\000\002\010\006"
        + "\000\002\010\005\000\002\010\006\000\002\010\006\000"
        + "\002\010\005\000\002\010\006\000\002\010\004\000\002"
        + "\055\003\000\002\055\005\000\002\055\005\000\002\055"
        + "\007\000\002\011\004\000\002\011\003\000\002\061\004"
        + "\000\002\061\004\000\002\061\003\000\002\061\003\000"
        + "\002\012\007\000\002\012\010\000\002\012\007\000\002"
        + "\012\010\000\002\012\007\000\002\054\004\000\002\054"
        + "\005\000\002\054\005\000\002\054\006\000\002\054\002"
        + "\000\002\053\004\000\002\053\005\000\002\053\005\000"
        + "\002\046\003\000\002\046\004\000\002\046\004\000\002"
        + "\045\003\000\002\045\003\000\002\045\003\000\002\045"
        + "\003\000\002\045\003\000\002\045\003\000\002\045\003"
        + "\000\002\045\003\000\002\045\003\000\002\045\003\000"
        + "\002\045\003\000\002\045\003\000\002\013\004\000\002"
        + "\013\004\000\002\013\006\000\002\013\004\000\002\014"
        + "\015\000\002\015\011\000\002\015\010\000\002\050\003"
        + "\000\002\050\003\000\002\050\003\000\002\016\013\000"
        + "\002\016\013\000\002\017\011\000\002\017\010\000\002"
        + "\052\003\000\002\052\004\000\002\020\010\000\002\020"
        + "\007\000\002\020\007\000\002\020\006\000\002\021\005"
        + "\000\002\047\003\000\002\047\003\000\002\047\003\000"
        + "\002\026\011\000\002\026\011\000\002\026\011\000\002"
        + "\027\005\000\002\027\007\000\002\027\005\000\002\023"
        + "\013\000\002\023\013\000\002\023\012\000\002\024\007"
        + "\000\002\024\007\000\002\025\003\000\002\025\003\000"
        + "\002\025\003\000\002\025\005\000\002\025\005\000\002"
        + "\030\005\000\002\030\005\000\002\030\012\000\002\030"
        + "\006\000\002\030\010\000\002\030\003\000\002\056\004"
        + "\000\002\060\005\000\002\057\003\000\002\057\006\000"
        + "\002\057\005\000\002\057\005\000\002\057\010\000\002"
        + "\057\007\000\002\051\007\000\002\051\006\000\002\031"
        + "\003\000\002\031\003\000\002\031\003\000\002\031\003"
        + "\000\002\031\005\000\002\032\003\000\002\032\003\000"
        + "\002\032\005\000\002\032\005\000\002\033\004\000\002"
        + "\033\005\000\002\034\005\000\002\034\005\000\002\035"
        + "\005\000\002\035\005\000\002\035\005\000\002\035\005"
        + "\000\002\035\005\000\002\035\005\000\002\036\003\000"
        + "\002\036\003\000\002\036\003\000\002\036\003\000\002"
        + "\036\003\000\002\037\003\000\002\037\003\000\002\037"
        + "\003\000\002\037\003\000\002\037\003\000\002\022\003"
        + "\000\002\022\003\000\002\022\003\000\002\040\003\000"
        + "\002\040\003\000\002\040\003\000\002\040\003\000\002"
        + "\041\003\000\002\041\003\000\002\041\003\000\002\042"
        + "\003\000\002\042\003\000\002\042\003\000\002\042\003"
        + "\000\002\043\003\000\002\043\003\000\002\044\003\000"
        + "\002\044\003\000\002\044\003\000\002\044\003\000\002"
        + "\044\003\000\002\044\003\000\002\044\003\000\002\044"
        + "\003\000\002\044\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u016d\000\014\002\ufffd\006\007\064\004\071\010\072"
        + "\011\001\002\000\004\013\u0169\001\002\000\004\002\u0168"
        + "\001\002\000\004\064\004\001\002\000\004\071\u0161\001"
        + "\002\000\004\013\017\001\002\000\004\013\015\001\002"
        + "\000\004\002\ufffe\001\002\000\006\006\007\071\010\001"
        + "\002\000\004\002\uffff\001\002\000\004\022\016\001\002"
        + "\000\004\064\ufffc\001\002\000\004\014\020\001\002\000"
        + "\020\003\031\006\026\007\021\013\030\015\ufff2\066\032"
        + "\067\022\001\002\000\004\013\u015b\001\002\000\010\007"
        + "\uffdf\013\uffdf\066\u0146\001\002\000\006\007\u0156\013\u0155"
        + "\001\002\000\004\015\u0154\001\002\000\006\007\uffe3\013"
        + "\uffe3\001\002\000\014\007\u0141\013\u0140\066\032\067\u0143"
        + "\070\u0144\001\002\000\020\003\031\006\026\007\021\013"
        + "\030\015\ufff2\066\032\067\022\001\002\000\016\013\u0136"
        + "\032\162\047\164\050\163\051\165\052\160\001\002\000"
        + "\022\003\031\006\026\007\021\013\030\015\ufff2\022\u0135"
        + "\066\032\067\022\001\002\000\010\007\uffe0\013\uffe0\067"
        + "\u0133\001\002\000\004\013\036\001\002\000\020\003\031"
        + "\006\026\007\021\013\030\015\ufff2\066\032\067\022\001"
        + "\002\000\004\015\ufff4\001\002\000\004\020\037\001\002"
        + "\000\014\003\043\007\041\013\040\015\uffd5\021\044\001"
        + "\002\000\004\013\u0132\001\002\000\004\013\u012f\001\002"
        + "\000\004\021\u012c\001\002\000\010\003\043\007\041\013"
        + "\040\001\002\000\004\014\047\001\002\000\004\015\046"
        + "\001\002\000\020\003\uffde\006\uffde\007\uffde\013\uffde\015"
        + "\uffde\066\uffde\067\uffde\001\002\000\042\003\076\007\072"
        + "\013\062\015\uffd9\045\073\046\053\053\060\055\102\056"
        + "\051\057\066\060\055\061\075\063\054\065\065\074\101"
        + "\075\063\001\002\000\044\003\uffc3\007\uffc3\013\uffc3\015"
        + "\uffc3\045\uffc3\046\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3"
        + "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\074\uffc3\075"
        + "\uffc3\001\002\000\004\020\u0121\001\002\000\044\003\uffc7"
        + "\007\uffc7\013\uffc7\015\uffc7\045\uffc7\046\uffc7\053\uffc7\055"
        + "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7"
        + "\065\uffc7\074\uffc7\075\uffc7\001\002\000\010\013\uff5e\021"
        + "\uff5e\022\uff5e\001\002\000\020\004\130\005\125\010\134"
        + "\011\132\012\136\013\u011e\073\131\001\002\000\004\020"
        + "\u0113\001\002\000\004\022\u0112\001\002\000\046\003\uffc8"
        + "\007\uffc8\013\uffc8\015\uffc8\045\uffc8\046\uffc8\053\uffc8\054"
        + "\u010c\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8"
        + "\063\uffc8\065\uffc8\074\uffc8\075\uffc8\001\002\000\004\020"
        + "\374\001\002\000\044\003\uffce\007\uffce\013\uffce\015\uffce"
        + "\045\uffce\046\uffce\053\uffce\055\uffce\056\uffce\057\uffce\060"
        + "\uffce\061\uffce\062\uffce\063\uffce\065\uffce\074\uffce\075\uffce"
        + "\001\002\000\024\013\264\020\365\032\162\045\073\046"
        + "\053\047\164\050\163\051\165\052\160\001\002\000\004"
        + "\025\362\001\002\000\044\003\uffc9\007\uffc9\013\uffc9\015"
        + "\uffc9\045\uffc9\046\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9"
        + "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\074\uffc9\075"
        + "\uffc9\001\002\000\004\013\350\001\002\000\004\014\335"
        + "\001\002\000\044\003\uffc4\007\uffc4\013\uffc4\015\uffc4\045"
        + "\uffc4\046\uffc4\053\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4"
        + "\061\uffc4\062\uffc4\063\uffc4\065\uffc4\074\uffc4\075\uffc4\001"
        + "\002\000\004\015\uffd7\001\002\000\044\003\uffcd\007\uffcd"
        + "\013\uffcd\015\uffcd\045\uffcd\046\uffcd\053\uffcd\055\uffcd\056"
        + "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd"
        + "\074\uffcd\075\uffcd\001\002\000\004\013\277\001\002\000"
        + "\010\013\uff5f\021\uff5f\022\uff5f\001\002\000\044\003\076"
        + "\007\072\013\062\015\uffd1\045\073\046\053\053\060\055"
        + "\102\056\051\057\066\060\055\061\075\062\uffd1\063\054"
        + "\065\065\074\101\075\063\001\002\000\012\004\321\010"
        + "\322\012\324\013\320\001\002\000\036\007\072\013\062"
        + "\045\073\046\053\053\060\055\102\056\051\057\066\060"
        + "\055\061\075\063\054\065\065\074\101\075\063\001\002"
        + "\000\046\003\uff95\007\uff95\013\uff95\015\uff95\022\uff95\045"
        + "\uff95\046\uff95\053\uff95\055\uff95\056\uff95\057\uff95\060\uff95"
        + "\061\uff95\062\uff95\063\uff95\065\uff95\074\uff95\075\uff95\001"
        + "\002\000\044\003\uffc6\007\uffc6\013\uffc6\015\uffc6\045\uffc6"
        + "\046\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061"
        + "\uffc6\062\uffc6\063\uffc6\065\uffc6\074\uffc6\075\uffc6\001\002"
        + "\000\004\023\312\001\002\000\004\020\112\001\002\000"
        + "\004\013\110\001\002\000\044\003\uffca\007\uffca\013\uffca"
        + "\015\uffca\045\uffca\046\uffca\053\uffca\055\uffca\056\uffca\057"
        + "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\065\uffca\074\uffca"
        + "\075\uffca\001\002\000\044\003\uffcc\007\uffcc\013\uffcc\015"
        + "\uffcc\045\uffcc\046\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc"
        + "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\065\uffcc\074\uffcc\075"
        + "\uffcc\001\002\000\044\003\uffcb\007\uffcb\013\uffcb\015\uffcb"
        + "\045\uffcb\046\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060"
        + "\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb\074\uffcb\075\uffcb"
        + "\001\002\000\044\003\uffc5\007\uffc5\013\uffc5\015\uffc5\045"
        + "\uffc5\046\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5"
        + "\061\uffc5\062\uffc5\063\uffc5\065\uffc5\074\uffc5\075\uffc5\001"
        + "\002\000\004\022\111\001\002\000\044\003\uff7e\007\uff7e"
        + "\013\uff7e\015\uff7e\045\uff7e\046\uff7e\053\uff7e\055\uff7e\056"
        + "\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\065\uff7e"
        + "\074\uff7e\075\uff7e\001\002\000\012\007\072\013\113\065"
        + "\065\075\115\001\002\000\016\013\264\032\162\047\164"
        + "\050\163\051\165\052\160\001\002\000\004\022\217\001"
        + "\002\000\004\025\116\001\002\000\004\013\120\001\002"
        + "\000\014\032\162\047\164\050\163\051\165\052\160\001"
        + "\002\000\030\020\121\021\uff92\022\uff92\024\uff92\025\122"
        + "\026\uff92\032\uff92\047\uff92\050\uff92\051\uff92\052\uff92\001"
        + "\002\000\022\004\130\005\125\010\134\011\132\012\136"
        + "\013\135\021\127\073\131\001\002\000\004\013\120\001"
        + "\002\000\024\021\uff8f\022\uff8f\024\uff8f\026\uff8f\032\uff8f"
        + "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\001\002\000\004\021"
        + "\155\001\002\000\010\021\uff71\022\uff71\024\uff71\001\002"
        + "\000\006\021\uff9f\024\153\001\002\000\026\021\uff90\022"
        + "\uff90\024\uff90\025\151\026\uff90\032\uff90\047\uff90\050\uff90"
        + "\051\uff90\052\uff90\001\002\000\010\021\uff70\022\uff70\024"
        + "\uff70\001\002\000\006\013\141\065\142\001\002\000\010"
        + "\021\uff6e\022\uff6e\024\uff6e\001\002\000\006\021\uff9e\024"
        + "\137\001\002\000\010\021\uff72\022\uff72\024\uff72\001\002"
        + "\000\004\021\uff9d\001\002\000\010\021\uff6f\022\uff6f\024"
        + "\uff6f\001\002\000\020\004\130\005\125\010\134\011\132"
        + "\012\136\013\135\073\131\001\002\000\004\021\uff9b\001"
        + "\002\000\004\020\146\001\002\000\004\020\143\001\002"
        + "\000\020\004\130\005\125\010\134\011\132\012\136\013"
        + "\135\073\131\001\002\000\004\021\145\001\002\000\010"
        + "\021\uffa1\022\uffa1\024\uffa1\001\002\000\020\004\130\005"
        + "\125\010\134\011\132\012\136\013\135\073\131\001\002"
        + "\000\004\021\150\001\002\000\010\021\uffa0\022\uffa0\024"
        + "\uffa0\001\002\000\004\013\120\001\002\000\024\021\uff8d"
        + "\022\uff8d\024\uff8d\026\uff8d\032\uff8d\047\uff8d\050\uff8d\051"
        + "\uff8d\052\uff8d\001\002\000\020\004\130\005\125\010\134"
        + "\011\132\012\136\013\135\073\131\001\002\000\004\021"
        + "\uff9c\001\002\000\026\021\uff91\022\uff91\024\uff91\025\156"
        + "\026\uff91\032\uff91\047\uff91\050\uff91\051\uff91\052\uff91\001"
        + "\002\000\004\013\120\001\002\000\024\021\uff8e\022\uff8e"
        + "\024\uff8e\026\uff8e\032\uff8e\047\uff8e\050\uff8e\051\uff8e\052"
        + "\uff8e\001\002\000\022\004\uff74\005\uff74\010\uff74\011\uff74"
        + "\012\uff74\013\uff74\020\uff74\075\uff74\001\002\000\022\004"
        + "\171\005\167\010\174\011\172\012\201\013\176\020\166"
        + "\075\200\001\002\000\022\004\uff73\005\uff73\010\uff73\011"
        + "\uff73\012\uff73\013\uff73\020\uff73\075\uff73\001\002\000\022"
        + "\004\uff76\005\uff76\010\uff76\011\uff76\012\uff76\013\uff76\020"
        + "\uff76\075\uff76\001\002\000\022\004\uff77\005\uff77\010\uff77"
        + "\011\uff77\012\uff77\013\uff77\020\uff77\075\uff77\001\002\000"
        + "\022\004\uff75\005\uff75\010\uff75\011\uff75\012\uff75\013\uff75"
        + "\020\uff75\075\uff75\001\002\000\010\004\171\005\167\020"
        + "\166\001\002\000\042\021\uff84\022\uff84\024\uff84\026\uff84"
        + "\027\uff84\030\uff84\031\uff84\033\uff84\035\uff84\036\uff84\037"
        + "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\001\002"
        + "\000\012\021\uff8a\022\uff8a\024\uff8a\026\uff8a\001\002\000"
        + "\042\021\uff85\022\uff85\024\uff85\026\uff85\027\uff85\030\uff85"
        + "\031\uff85\033\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041"
        + "\uff85\042\uff85\043\uff85\044\uff85\001\002\000\012\021\uff6b"
        + "\022\uff6b\024\uff6b\026\uff6b\001\002\000\006\022\212\026"
        + "\213\001\002\000\012\021\uff6d\022\uff6d\024\uff6d\026\uff6d"
        + "\001\002\000\020\021\uff89\022\uff89\024\uff89\026\204\027"
        + "\210\030\207\031\205\001\002\000\012\021\uff88\022\uff88"
        + "\024\uff88\026\uff88\001\002\000\012\021\uff87\022\uff87\024"
        + "\uff87\026\uff87\001\002\000\004\025\202\001\002\000\012"
        + "\021\uff6c\022\uff6c\024\uff6c\026\uff6c\001\002\000\004\013"
        + "\120\001\002\000\012\021\uff93\022\uff93\024\uff93\026\uff93"
        + "\001\002\000\010\004\uff63\005\uff63\020\uff63\001\002\000"
        + "\010\004\uff61\005\uff61\020\uff61\001\002\000\010\004\171"
        + "\005\167\020\166\001\002\000\010\004\uff60\005\uff60\020"
        + "\uff60\001\002\000\010\004\uff62\005\uff62\020\uff62\001\002"
        + "\000\042\021\uff82\022\uff82\024\uff82\026\204\027\210\030"
        + "\207\031\205\033\uff82\035\uff82\036\uff82\037\uff82\040\uff82"
        + "\041\uff82\042\uff82\043\uff82\044\uff82\001\002\000\046\003"
        + "\uff96\007\uff96\013\uff96\015\uff96\022\uff96\045\uff96\046\uff96"
        + "\053\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062"
        + "\uff96\063\uff96\065\uff96\074\uff96\075\uff96\001\002\000\022"
        + "\004\171\005\167\010\174\011\172\012\201\013\176\020"
        + "\166\075\200\001\002\000\012\021\uff86\022\uff86\024\uff86"
        + "\026\uff86\001\002\000\014\021\216\026\204\027\210\030"
        + "\207\031\205\001\002\000\042\021\uff83\022\uff83\024\uff83"
        + "\026\uff83\027\uff83\030\uff83\031\uff83\033\uff83\035\uff83\036"
        + "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83"
        + "\001\002\000\016\004\171\005\167\011\221\012\226\013"
        + "\223\020\220\001\002\000\016\004\171\005\167\011\221"
        + "\012\226\013\223\020\220\001\002\000\030\021\uff65\022"
        + "\uff65\033\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65"
        + "\042\uff65\043\uff65\044\uff65\001\002\000\034\026\204\027"
        + "\210\030\207\031\205\033\233\035\232\036\235\037\230"
        + "\040\236\041\231\042\234\043\227\044\240\001\002\000"
        + "\030\021\uff64\022\uff64\033\uff64\035\uff64\036\uff64\037\uff64"
        + "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\001\002\000"
        + "\004\022\247\001\002\000\024\033\233\035\232\036\235"
        + "\037\230\040\236\041\231\042\234\043\227\044\240\001"
        + "\002\000\030\021\uff66\022\uff66\033\uff66\035\uff66\036\uff66"
        + "\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\001"
        + "\002\000\016\004\uff56\005\uff56\011\uff56\012\uff56\013\uff56"
        + "\020\uff56\001\002\000\016\004\uff5a\005\uff5a\011\uff5a\012"
        + "\uff5a\013\uff5a\020\uff5a\001\002\000\016\004\uff58\005\uff58"
        + "\011\uff58\012\uff58\013\uff58\020\uff58\001\002\000\016\004"
        + "\uff5c\005\uff5c\011\uff5c\012\uff5c\013\uff5c\020\uff5c\001\002"
        + "\000\016\004\uff5d\005\uff5d\011\uff5d\012\uff5d\013\uff5d\020"
        + "\uff5d\001\002\000\016\004\uff57\005\uff57\011\uff57\012\uff57"
        + "\013\uff57\020\uff57\001\002\000\016\004\uff5b\005\uff5b\011"
        + "\uff5b\012\uff5b\013\uff5b\020\uff5b\001\002\000\016\004\uff59"
        + "\005\uff59\011\uff59\012\uff59\013\uff59\020\uff59\001\002\000"
        + "\016\004\171\005\167\011\221\012\226\013\223\020\220"
        + "\001\002\000\016\004\uff55\005\uff55\011\uff55\012\uff55\013"
        + "\uff55\020\uff55\001\002\000\040\021\uff79\022\uff79\026\204"
        + "\027\210\030\207\031\205\033\233\035\232\036\235\037"
        + "\230\040\236\041\231\042\234\043\227\044\240\001\002"
        + "\000\006\021\uff7a\022\uff7a\001\002\000\030\021\uff7c\022"
        + "\uff7c\033\233\035\232\036\235\037\230\040\236\041\231"
        + "\042\234\043\227\044\240\001\002\000\016\004\171\005"
        + "\167\011\221\012\226\013\223\020\220\001\002\000\040"
        + "\021\uff7d\022\uff7d\026\204\027\210\030\207\031\205\033"
        + "\233\035\232\036\235\037\230\040\236\041\231\042\234"
        + "\043\227\044\240\001\002\000\006\021\uff7b\022\uff7b\001"
        + "\002\000\004\013\250\001\002\000\020\032\162\045\073"
        + "\046\053\047\164\050\163\051\165\052\160\001\002\000"
        + "\004\021\252\001\002\000\004\014\253\001\002\000\040"
        + "\003\076\007\072\013\062\045\073\046\053\053\060\055"
        + "\102\056\051\057\066\060\055\061\075\063\054\065\065"
        + "\074\101\075\063\001\002\000\004\015\255\001\002\000"
        + "\044\003\uffbe\007\uffbe\013\uffbe\015\uffbe\045\uffbe\046\uffbe"
        + "\053\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062"
        + "\uffbe\063\uffbe\065\uffbe\074\uffbe\075\uffbe\001\002\000\004"
        + "\021\uff81\001\002\000\022\004\171\005\167\010\174\011"
        + "\172\012\201\013\176\020\166\075\200\001\002\000\006"
        + "\021\uff80\026\213\001\002\000\036\021\216\026\204\027"
        + "\210\030\207\031\205\033\233\035\232\036\235\037\230"
        + "\040\236\041\231\042\234\043\227\044\240\001\002\000"
        + "\004\021\263\001\002\000\006\021\uff78\022\uff78\001\002"
        + "\000\010\022\uffe8\024\272\032\273\001\002\000\004\022"
        + "\271\001\002\000\022\004\171\005\167\010\174\011\172"
        + "\012\201\013\176\020\166\075\200\001\002\000\006\022"
        + "\270\026\213\001\002\000\046\003\uff97\007\uff97\013\uff97"
        + "\015\uff97\022\uff97\045\uff97\046\uff97\053\uff97\055\uff97\056"
        + "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\065\uff97"
        + "\074\uff97\075\uff97\001\002\000\046\003\uff99\007\uff99\013"
        + "\uff99\015\uff99\022\uff99\045\uff99\046\uff99\053\uff99\055\uff99"
        + "\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\065"
        + "\uff99\074\uff99\075\uff99\001\002\000\004\013\277\001\002"
        + "\000\024\004\171\005\167\010\174\011\172\012\201\013"
        + "\176\020\166\073\274\075\200\001\002\000\004\013\302"
        + "\001\002\000\010\022\uffe7\024\276\026\213\001\002\000"
        + "\004\013\277\001\002\000\010\022\uffe8\024\272\032\301"
        + "\001\002\000\004\022\uffe5\001\002\000\022\004\171\005"
        + "\167\010\174\011\172\012\201\013\176\020\166\075\200"
        + "\001\002\000\004\020\303\001\002\000\022\004\130\005"
        + "\125\010\134\011\132\012\136\013\135\021\305\073\131"
        + "\001\002\000\004\021\307\001\002\000\004\022\306\001"
        + "\002\000\046\003\uff98\007\uff98\013\uff98\015\uff98\022\uff98"
        + "\045\uff98\046\uff98\053\uff98\055\uff98\056\uff98\057\uff98\060"
        + "\uff98\061\uff98\062\uff98\063\uff98\065\uff98\074\uff98\075\uff98"
        + "\001\002\000\004\022\310\001\002\000\046\003\uffa3\007"
        + "\uffa3\013\uffa3\015\uffa3\022\uffa3\045\uffa3\046\uffa3\053\uffa3"
        + "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063"
        + "\uffa3\065\uffa3\074\uffa3\075\uffa3\001\002\000\004\022\uffe6"
        + "\001\002\000\040\003\076\007\072\013\062\045\073\046"
        + "\053\053\060\055\102\056\051\057\066\060\055\061\075"
        + "\063\054\065\065\074\101\075\063\001\002\000\006\062"
        + "\314\063\054\001\002\000\004\022\316\001\002\000\044"
        + "\003\uffaf\007\uffaf\013\uffaf\015\uffaf\045\uffaf\046\uffaf\053"
        + "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf"
        + "\063\uffaf\065\uffaf\074\uffaf\075\uffaf\001\002\000\044\003"
        + "\uffb0\007\uffb0\013\uffb0\015\uffb0\045\uffb0\046\uffb0\053\uffb0"
        + "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063"
        + "\uffb0\065\uffb0\074\uffb0\075\uffb0\001\002\000\010\015\uffcf"
        + "\062\uffcf\063\uffcf\001\002\000\006\021\uff67\023\uff67\001"
        + "\002\000\006\021\uff69\023\uff69\001\002\000\006\021\uff6a"
        + "\023\uff6a\001\002\000\004\023\325\001\002\000\006\021"
        + "\uff68\023\uff68\001\002\000\040\003\076\007\072\013\062"
        + "\045\073\046\053\053\060\055\102\056\051\057\066\060"
        + "\055\061\075\063\054\065\065\074\101\075\063\001\002"
        + "\000\006\062\327\063\054\001\002\000\004\022\331\001"
        + "\002\000\044\003\uffb1\007\uffb1\013\uffb1\015\uffb1\045\uffb1"
        + "\046\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061"
        + "\uffb1\062\uffb1\063\uffb1\065\uffb1\074\uffb1\075\uffb1\001\002"
        + "\000\044\003\uffb2\007\uffb2\013\uffb2\015\uffb2\045\uffb2\046"
        + "\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2"
        + "\062\uffb2\063\uffb2\065\uffb2\074\uffb2\075\uffb2\001\002\000"
        + "\010\015\uffd0\062\uffd0\063\uffd0\001\002\000\004\022\334"
        + "\001\002\000\046\003\uff9a\007\uff9a\013\uff9a\015\uff9a\022"
        + "\uff9a\045\uff9a\046\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a"
        + "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\065\uff9a\074\uff9a\075"
        + "\uff9a\001\002\000\040\003\076\007\072\013\062\045\073"
        + "\046\053\053\060\055\102\056\051\057\066\060\055\061"
        + "\075\063\054\065\065\074\101\075\063\001\002\000\004"
        + "\015\337\001\002\000\004\056\340\001\002\000\004\020"
        + "\341\001\002\000\016\004\171\005\167\011\342\012\226"
        + "\013\223\020\220\001\002\000\026\021\346\033\uff65\035"
        + "\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65"
        + "\044\uff65\001\002\000\004\021\344\001\002\000\004\022"
        + "\345\001\002\000\044\003\uffb8\007\uffb8\013\uffb8\015\uffb8"
        + "\045\uffb8\046\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060"
        + "\uffb8\061\uffb8\062\uffb8\063\uffb8\065\uffb8\074\uffb8\075\uffb8"
        + "\001\002\000\004\022\347\001\002\000\044\003\uffb7\007"
        + "\uffb7\013\uffb7\015\uffb7\045\uffb7\046\uffb7\053\uffb7\055\uffb7"
        + "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\065"
        + "\uffb7\074\uffb7\075\uffb7\001\002\000\004\032\351\001\002"
        + "\000\004\073\352\001\002\000\004\065\353\001\002\000"
        + "\004\020\354\001\002\000\022\004\130\005\125\010\134"
        + "\011\132\012\136\013\135\021\356\073\131\001\002\000"
        + "\004\021\360\001\002\000\004\022\357\001\002\000\046"
        + "\003\uffa2\007\uffa2\013\uffa2\015\uffa2\022\uffa2\045\uffa2\046"
        + "\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2"
        + "\062\uffa2\063\uffa2\065\uffa2\074\uffa2\075\uffa2\001\002\000"
        + "\004\022\361\001\002\000\046\003\uffa4\007\uffa4\013\uffa4"
        + "\015\uffa4\022\uffa4\045\uffa4\046\uffa4\053\uffa4\055\uffa4\056"
        + "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\065\uffa4"
        + "\074\uffa4\075\uffa4\001\002\000\004\013\120\001\002\000"
        + "\016\022\uff93\032\162\047\164\050\163\051\165\052\160"
        + "\001\002\000\004\022\373\001\002\000\022\004\130\005"
        + "\125\010\134\011\132\012\136\013\135\021\367\073\131"
        + "\001\002\000\004\021\371\001\002\000\004\022\370\001"
        + "\002\000\044\003\uff8b\007\uff8b\013\uff8b\015\uff8b\045\uff8b"
        + "\046\uff8b\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061"
        + "\uff8b\062\uff8b\063\uff8b\065\uff8b\074\uff8b\075\uff8b\001\002"
        + "\000\004\022\372\001\002\000\044\003\uff8c\007\uff8c\013"
        + "\uff8c\015\uff8c\045\uff8c\046\uff8c\053\uff8c\055\uff8c\056\uff8c"
        + "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\074"
        + "\uff8c\075\uff8c\001\002\000\044\003\uff7f\007\uff7f\013\uff7f"
        + "\015\uff7f\045\uff7f\046\uff7f\053\uff7f\055\uff7f\056\uff7f\057"
        + "\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\065\uff7f\074\uff7f"
        + "\075\uff7f\001\002\000\016\004\171\005\167\011\375\012"
        + "\226\013\376\020\220\001\002\000\026\021\u0108\033\uff65"
        + "\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043"
        + "\uff65\044\uff65\001\002\000\026\021\u0104\033\uff64\035\uff64"
        + "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044"
        + "\uff64\001\002\000\004\021\u0100\001\002\000\004\014\u0101"
        + "\001\002\000\040\003\076\007\072\013\062\045\073\046"
        + "\053\053\060\055\102\056\051\057\066\060\055\061\075"
        + "\063\054\065\065\074\101\075\063\001\002\000\004\015"
        + "\u0103\001\002\000\046\003\uffaa\007\uffaa\013\uffaa\015\uffaa"
        + "\045\uffaa\046\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057"
        + "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065\uffaa\074\uffaa"
        + "\075\uffaa\001\002\000\004\014\u0105\001\002\000\040\003"
        + "\076\007\072\013\062\045\073\046\053\053\060\055\102"
        + "\056\051\057\066\060\055\061\075\063\054\065\065\074"
        + "\101\075\063\001\002\000\004\015\u0107\001\002\000\046"
        + "\003\uffa8\007\uffa8\013\uffa8\015\uffa8\045\uffa8\046\uffa8\053"
        + "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8"
        + "\062\uffa8\063\uffa8\065\uffa8\074\uffa8\075\uffa8\001\002\000"
        + "\004\014\u0109\001\002\000\040\003\076\007\072\013\062"
        + "\045\073\046\053\053\060\055\102\056\051\057\066\060"
        + "\055\061\075\063\054\065\065\074\101\075\063\001\002"
        + "\000\004\015\u010b\001\002\000\046\003\uffa9\007\uffa9\013"
        + "\uffa9\015\uffa9\045\uffa9\046\uffa9\053\uffa9\054\uffa9\055\uffa9"
        + "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\065"
        + "\uffa9\074\uffa9\075\uffa9\001\002\000\006\014\u010e\053\060"
        + "\001\002\000\044\003\uffa5\007\uffa5\013\uffa5\015\uffa5\045"
        + "\uffa5\046\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5"
        + "\061\uffa5\062\uffa5\063\uffa5\065\uffa5\074\uffa5\075\uffa5\001"
        + "\002\000\040\003\076\007\072\013\062\045\073\046\053"
        + "\053\060\055\102\056\051\057\066\060\055\061\075\063"
        + "\054\065\065\074\101\075\063\001\002\000\046\003\uffa7"
        + "\007\uffa7\013\uffa7\015\uffa7\045\uffa7\046\uffa7\053\uffa7\054"
        + "\u010c\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7"
        + "\063\uffa7\065\uffa7\074\uffa7\075\uffa7\001\002\000\004\015"
        + "\u0111\001\002\000\044\003\uffa6\007\uffa6\013\uffa6\015\uffa6"
        + "\045\uffa6\046\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060"
        + "\uffa6\061\uffa6\062\uffa6\063\uffa6\065\uffa6\074\uffa6\075\uffa6"
        + "\001\002\000\044\003\uff94\007\uff94\013\uff94\015\uff94\045"
        + "\uff94\046\uff94\053\uff94\055\uff94\056\uff94\057\uff94\060\uff94"
        + "\061\uff94\062\uff94\063\uff94\065\uff94\074\uff94\075\uff94\001"
        + "\002\000\012\004\321\010\322\012\324\013\320\001\002"
        + "\000\004\021\u0115\001\002\000\004\014\u0116\001\002\000"
        + "\010\015\u0118\061\075\074\101\001\002\000\004\015\u011b"
        + "\001\002\000\044\003\uffb5\007\uffb5\013\uffb5\015\uffb5\045"
        + "\uffb5\046\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5"
        + "\061\uffb5\062\uffb5\063\uffb5\065\uffb5\074\uffb5\075\uffb5\001"
        + "\002\000\010\015\uffb4\061\075\074\101\001\002\000\004"
        + "\015\uffb3\001\002\000\044\003\uffb6\007\uffb6\013\uffb6\015"
        + "\uffb6\045\uffb6\046\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6"
        + "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\074\uffb6\075"
        + "\uffb6\001\002\000\004\022\uffab\001\002\000\004\022\uffac"
        + "\001\002\000\004\022\uffad\001\002\000\004\022\u0120\001"
        + "\002\000\044\003\uffae\007\uffae\013\uffae\015\uffae\045\uffae"
        + "\046\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061"
        + "\uffae\062\uffae\063\uffae\065\uffae\074\uffae\075\uffae\001\002"
        + "\000\016\004\171\005\167\011\u0122\012\226\013\u0123\020"
        + "\220\001\002\000\026\021\uffba\033\uff65\035\uff65\036\uff65"
        + "\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\001"
        + "\002\000\026\021\uffb9\033\uff64\035\uff64\036\uff64\037\uff64"
        + "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\001\002\000"
        + "\004\021\uffbb\001\002\000\004\021\u0126\001\002\000\004"
        + "\014\u0127\001\002\000\042\003\076\007\072\013\062\015"
        + "\u0128\045\073\046\053\053\060\055\102\056\051\057\066"
        + "\060\055\061\075\063\054\065\065\074\101\075\063\001"
        + "\002\000\044\003\uffbc\007\uffbc\013\uffbc\015\uffbc\045\uffbc"
        + "\046\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061"
        + "\uffbc\062\uffbc\063\uffbc\065\uffbc\074\uffbc\075\uffbc\001\002"
        + "\000\004\015\u012a\001\002\000\044\003\uffbd\007\uffbd\013"
        + "\uffbd\015\uffbd\045\uffbd\046\uffbd\053\uffbd\055\uffbd\056\uffbd"
        + "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\074"
        + "\uffbd\075\uffbd\001\002\000\004\021\uffbf\001\002\000\004"
        + "\014\u012d\001\002\000\042\003\076\007\072\013\062\015"
        + "\uffd8\045\073\046\053\053\060\055\102\056\051\057\066"
        + "\060\055\061\075\063\054\065\065\074\101\075\063\001"
        + "\002\000\004\015\uffd6\001\002\000\006\021\uffc2\024\u0130"
        + "\001\002\000\010\003\043\007\041\013\040\001\002\000"
        + "\004\021\uffc0\001\002\000\004\021\uffc1\001\002\000\006"
        + "\007\uffe1\013\uffe1\001\002\000\004\015\ufff1\001\002\000"
        + "\020\003\uffe9\006\uffe9\007\uffe9\013\uffe9\015\uffe9\066\uffe9"
        + "\067\uffe9\001\002\000\012\020\u013c\022\uffe8\024\272\032"
        + "\301\001\002\000\004\022\u013b\001\002\000\022\004\171"
        + "\005\167\010\174\011\172\012\201\013\176\020\166\075"
        + "\200\001\002\000\006\022\u013a\026\213\001\002\000\020"
        + "\003\uffea\006\uffea\007\uffea\013\uffea\015\uffea\066\uffea\067"
        + "\uffea\001\002\000\020\003\uffeb\006\uffeb\007\uffeb\013\uffeb"
        + "\015\uffeb\066\uffeb\067\uffeb\001\002\000\014\003\043\007"
        + "\041\013\040\015\uffd5\021\044\001\002\000\004\015\u013e"
        + "\001\002\000\020\003\uffda\006\uffda\007\uffda\013\uffda\015"
        + "\uffda\066\uffda\067\uffda\001\002\000\004\015\ufff3\001\002"
        + "\000\004\013\u014e\001\002\000\004\013\u0148\001\002\000"
        + "\006\007\uffe4\013\uffe4\001\002\000\012\007\uffdf\013\uffdf"
        + "\066\u0146\070\u0147\001\002\000\004\013\uffd4\001\002\000"
        + "\004\013\uffd2\001\002\000\006\007\uffe2\013\uffe2\001\002"
        + "\000\004\013\uffd3\001\002\000\012\020\u014b\022\uffe8\024"
        + "\272\032\301\001\002\000\004\022\u014a\001\002\000\020"
        + "\003\uffef\006\uffef\007\uffef\013\uffef\015\uffef\066\uffef\067"
        + "\uffef\001\002\000\014\003\043\007\041\013\040\015\uffd5"
        + "\021\044\001\002\000\004\015\u014d\001\002\000\020\003"
        + "\uffdd\006\uffdd\007\uffdd\013\uffdd\015\uffdd\066\uffdd\067\uffdd"
        + "\001\002\000\012\020\u0151\022\uffe8\024\272\032\301\001"
        + "\002\000\004\022\u0150\001\002\000\020\003\uffec\006\uffec"
        + "\007\uffec\013\uffec\015\uffec\066\uffec\067\uffec\001\002\000"
        + "\014\003\043\007\041\013\040\015\uffd5\021\044\001\002"
        + "\000\004\015\u0153\001\002\000\020\003\uffdb\006\uffdb\007"
        + "\uffdb\013\uffdb\015\uffdb\066\uffdb\067\uffdb\001\002\000\004"
        + "\002\ufff5\001\002\000\004\013\277\001\002\000\004\013"
        + "\277\001\002\000\004\022\u0158\001\002\000\020\003\ufff0"
        + "\006\ufff0\007\ufff0\013\ufff0\015\ufff0\066\ufff0\067\ufff0\001"
        + "\002\000\004\022\u015a\001\002\000\020\003\uffed\006\uffed"
        + "\007\uffed\013\uffed\015\uffed\066\uffed\067\uffed\001\002\000"
        + "\012\020\u015e\022\uffe8\024\272\032\301\001\002\000\004"
        + "\022\u015d\001\002\000\020\003\uffee\006\uffee\007\uffee\013"
        + "\uffee\015\uffee\066\uffee\067\uffee\001\002\000\014\003\043"
        + "\007\041\013\040\015\uffd5\021\044\001\002\000\004\015"
        + "\u0160\001\002\000\020\003\uffdc\006\uffdc\007\uffdc\013\uffdc"
        + "\015\uffdc\066\uffdc\067\uffdc\001\002\000\004\013\u0162\001"
        + "\002\000\004\014\u0163\001\002\000\020\003\031\006\026"
        + "\007\021\013\030\015\ufff2\066\032\067\022\001\002\000"
        + "\004\015\u0165\001\002\000\004\002\ufff6\001\002\000\006"
        + "\006\007\071\010\001\002\000\004\002\000\001\002\000"
        + "\004\002\001\001\002\000\010\013\u0169\022\ufff9\025\u016e"
        + "\001\002\000\004\022\u016b\001\002\000\010\006\ufffb\064"
        + "\004\071\ufffb\001\002\000\006\006\ufffa\071\ufffa\001\002"
        + "\000\004\022\ufff7\001\002\000\004\030\u016f\001\002\000"
        + "\004\022\ufff8\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u016d\000\012\002\004\003\005\004\012\006\011\001"
        + "\001\000\004\005\u0169\001\001\000\002\001\001\000\004"
        + "\004\u0165\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\006\013\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\016\007\023\010\033\011\022\012\026"
        + "\053\032\061\024\001\001\000\004\055\u015b\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\061\u0141\001\001\000\016\007\u013e\010"
        + "\033\011\022\012\026\053\032\061\024\001\001\000\006"
        + "\036\u0137\055\u0136\001\001\000\016\007\u0133\010\033\011"
        + "\022\012\026\053\032\061\024\001\001\000\002\001\001"
        + "\000\002\001\001\000\016\007\034\010\033\011\022\012"
        + "\026\053\032\061\024\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\013\041\054\044\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\013\u012a"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\044\014\070\015\104\016\105\017\103\020\063"
        + "\021\106\023\076\026\056\027\051\030\060\034\077\043"
        + "\102\045\073\046\067\051\066\056\047\060\055\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\024\u011b\037\u011c\047\u011e\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\010\036\265\043\363"
        + "\055\264\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\055\332\001\001\000"
        + "\002\001\001\000\044\014\070\015\104\016\105\017\103"
        + "\020\063\021\106\023\076\026\056\027\051\030\060\034"
        + "\077\043\102\045\073\046\331\051\066\056\047\060\055"
        + "\001\001\000\004\040\322\001\001\000\042\014\070\015"
        + "\104\016\105\017\103\020\063\021\106\023\076\026\056"
        + "\027\051\030\060\034\077\043\102\045\316\051\066\056"
        + "\047\060\055\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\006\023"
        + "\076\030\113\001\001\000\006\036\265\055\264\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\057\116\001"
        + "\001\000\004\036\160\001\001\000\002\001\001\000\010"
        + "\024\125\025\123\037\132\001\001\000\004\057\122\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\024"
        + "\125\025\137\037\132\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\010\024\125\025\143\037"
        + "\132\001\001\000\002\001\001\000\002\001\001\000\010"
        + "\024\125\025\146\037\132\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\057\151\001\001\000\002\001\001"
        + "\000\010\024\125\025\153\037\132\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\057\156\001\001\000\002"
        + "\001\001\000\002\001\001\000\012\022\167\031\172\032"
        + "\174\060\176\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\032\214\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\042\205\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\057\202\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\032\210\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\042\205\001\001\000\002\001\001\000\012"
        + "\022\167\031\213\032\174\060\176\001\001\000\002\001"
        + "\001\000\004\042\205\001\001\000\002\001\001\000\010"
        + "\032\221\035\223\041\224\001\001\000\010\032\260\035"
        + "\261\041\224\001\001\000\002\001\001\000\006\042\205"
        + "\044\243\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\044\236\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\032\240\035\241\041\242\001\001\000"
        + "\002\001\001\000\006\042\205\044\243\001\001\000\002"
        + "\001\001\000\004\044\236\001\001\000\010\032\244\035"
        + "\245\041\224\001\001\000\006\042\205\044\243\001\001"
        + "\000\002\001\001\000\004\033\250\001\001\000\006\036"
        + "\256\043\255\001\001\000\002\001\001\000\002\001\001"
        + "\000\044\014\070\015\104\016\105\017\103\020\063\021"
        + "\106\023\076\026\056\027\051\030\060\034\077\043\102"
        + "\045\073\046\253\051\066\056\047\060\055\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\022\167\031\257\032\174\060\176\001\001\000\002\001"
        + "\001\000\006\042\205\044\243\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\012\022\167\031\266\032\174\060\176\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\055"
        + "\310\001\001\000\012\022\167\031\274\032\174\060\176"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\055"
        + "\277\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\022\167\031\274\032\174\060\176\001\001\000\002\001"
        + "\001\000\010\024\125\025\303\037\132\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\044\014\070"
        + "\015\104\016\105\017\103\020\063\021\106\023\076\026"
        + "\056\027\051\030\060\034\077\043\102\045\073\046\312"
        + "\051\066\056\047\060\055\001\001\000\004\021\314\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\044"
        + "\014\070\015\104\016\105\017\103\020\063\021\106\023"
        + "\076\026\056\027\051\030\060\034\077\043\102\045\073"
        + "\046\325\051\066\056\047\060\055\001\001\000\004\021"
        + "\327\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\044\014\070\015\104\016\105\017\103\020\063"
        + "\021\106\023\076\026\056\027\051\030\060\034\077\043"
        + "\102\045\073\046\335\051\066\056\047\060\055\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\010\032\221\035\342\041\224\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\024"
        + "\125\025\354\037\132\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\057\362\001\001\000\004\036\160\001\001"
        + "\000\002\001\001\000\010\024\125\025\365\037\132\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\010\032\221\035\376\041\224\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\044\014\070\015\104\016\105\017\103\020\063\021\106"
        + "\023\076\026\056\027\051\030\060\034\077\043\102\045"
        + "\073\046\u0101\051\066\056\047\060\055\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\044\014"
        + "\070\015\104\016\105\017\103\020\063\021\106\023\076"
        + "\026\056\027\051\030\060\034\077\043\102\045\073\046"
        + "\u0105\051\066\056\047\060\055\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\044\014\070\015"
        + "\104\016\105\017\103\020\063\021\106\023\076\026\056"
        + "\027\051\030\060\034\077\043\102\045\073\046\u0109\051"
        + "\066\056\047\060\055\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\026\u010e\027\u010c\001\001\000\002\001"
        + "\001\000\044\014\070\015\104\016\105\017\103\020\063"
        + "\021\106\023\076\026\056\027\051\030\060\034\077\043"
        + "\102\045\073\046\u010f\051\066\056\047\060\055\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\040\u0113\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\020\u0118\052\u0116\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\020\u0118\052\u0119"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\012\032\221\035\u0123\041\224\050"
        + "\u0124\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\044\014"
        + "\070\015\104\016\105\017\103\020\063\021\106\023\076"
        + "\026\056\027\051\030\060\034\077\043\102\045\073\046"
        + "\u0128\051\066\056\047\060\055\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\044\014\070\015\104\016\105\017\103"
        + "\020\063\021\106\023\076\026\056\027\051\030\060\034"
        + "\077\043\102\045\073\046\u012d\051\066\056\047\060\055"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\013"
        + "\u0130\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\012\022\167\031\u0138\032\174"
        + "\060\176\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\013\041\054\u013c\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\055"
        + "\u014e\001\001\000\004\055\u0148\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\013\041\054\u014b\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\013\041\054"
        + "\u0151\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\055\u0158\001\001\000\004\055\u0156\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\013\041\054\u015e\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\016\007\u0163\010\033\011\022\012\026\053\032"
        + "\061\024\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\006\u0166\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\005\u016c\001\001\000\002\001\001\000\004\004"
        + "\u016b\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintactic$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintactic$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintactic$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private ArrayList<ErrorLP> errors = new ArrayList<>();
    private SaveInfo record = new SaveInfo();
    private ArrayList<String> var_entries = new ArrayList<>();
    private String name_archive, name_project;

    public Sintactic(Lexer lexer, String name_archive, String name_project) {
        super(lexer);
        this.name_archive = name_archive;
        this.name_project = name_project;
    }

    public void syntax_error(Symbol cur_token) {
        if (cur_token.sym != sym.EOF) {
            addError(cur_token);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        addError(cur_token);
    }

    public void addError(Symbol token) {
        try {
            errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "No se esperaba Proyecto: " + name_project + name_archive));
        } catch (Exception e) {
        }
    }

    public ArrayList<ErrorLP> getErrors() {
        return errors;
    }

    public ClassInfo getResult(ArrayList<String> comments) {
        return record.getResult(comments, name_project);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintactic$actions {

        private final Sintactic parser;

        /**
         * Constructor
         */
        CUP$Sintactic$actions(Sintactic parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintactic$do_action_part00000000(
                int CUP$Sintactic$act_num,
                java_cup.runtime.lr_parser CUP$Sintactic$parser,
                java.util.Stack CUP$Sintactic$stack,
                int CUP$Sintactic$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintactic$result;

            /* select the action based on the action number */
            switch (CUP$Sintactic$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= initial EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintactic$parser.done_parsing();
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // initial ::= package_estructure import_estructure class_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial", 0, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // initial ::= import_estructure class_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial", 0, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // initial ::= class_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial", 0, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // initial ::= 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial", 0, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // package_estructure ::= PACKAGE ID SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("package_estructure", 1, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // import_estructure ::= IMPORT import_id_estructure SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure", 2, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // import_estructure ::= IMPORT import_id_estructure SEMICOLON import_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure", 2, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // import_id_estructure ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure", 3, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // import_id_estructure ::= ID DOT MULTIPLY 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure", 3, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // import_id_estructure ::= ID import_id_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure", 3, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // class_estructure ::= VISIBILITY CLASS ID O_BRACE class_internal_estructure C_BRACE 
                {
                    Object RESULT = null;
                    int name_classleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int name_classright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name_class = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setname_class(name_class.toString());
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure", 4, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // class_estructure ::= CLASS ID O_BRACE class_internal_estructure C_BRACE 
                {
                    Object RESULT = null;
                    int name_classleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int name_classright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name_class = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setname_class(name_class.toString());
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure", 4, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // class_internal_estructure ::= declarated_variable_class_estructure class_internal_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure", 5, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // class_internal_estructure ::= function_estructure class_internal_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure", 5, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // class_internal_estructure ::= 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure", 5, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // class_internal_estructure ::= error class_internal_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure", 5, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // declarated_variable_class_estructure ::= properties_variables TYPE_VARIABLE declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // declarated_variable_class_estructure ::= VISIBILITY TYPE_VARIABLE declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // declarated_variable_class_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // declarated_variable_class_estructure ::= properties_variables ID declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // declarated_variable_class_estructure ::= VISIBILITY ID declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // declarated_variable_class_estructure ::= ID declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToClass(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // declarated_variable_class_estructure ::= ID asign_values variable_values SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // declarated_variable_class_estructure ::= error SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure", 6, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // declarated_several_variables ::= ID 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    var_entries.add(String.valueOf(id));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables", 43, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // declarated_several_variables ::= ID EQUAL variable_values 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    var_entries.add(String.valueOf(id));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables", 43, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // declarated_several_variables ::= ID COMMA declarated_several_variables 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int id2left = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int id2right = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object id2 = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    var_entries.add(String.valueOf(id));
                    var_entries.add(String.valueOf(id2));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables", 43, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // declarated_several_variables ::= ID EQUAL variable_values COMMA declarated_several_variables 
                {
                    Object RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int id2left = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int id2right = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object id2 = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    var_entries.add(String.valueOf(id));
                    var_entries.add(String.valueOf(id2));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables", 43, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // properties_variables ::= VISIBILITY properties_var_internal 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables", 7, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // properties_variables ::= properties_var_internal 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables", 7, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // properties_var_internal ::= STATIC FINAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_var_internal", 47, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // properties_var_internal ::= FINAL STATIC 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_var_internal", 47, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // properties_var_internal ::= FINAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_var_internal", 47, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // properties_var_internal ::= STATIC 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_var_internal", 47, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // function_estructure ::= properties_function ID O_PARENT internal_function C_BRACE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setName_function(String.valueOf(name));
                    record.setType_return(String.valueOf(type));
                    record.closeDeclarationFun(typeleft, typeright, String.valueOf(name));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure", 8, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // function_estructure ::= VISIBILITY TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setName_function(String.valueOf(name));
                    record.setType_return(String.valueOf(type));
                    record.closeDeclarationFun(typeleft, typeright, String.valueOf(name));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure", 8, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // function_estructure ::= TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setName_function(String.valueOf(name));
                    record.setType_return(String.valueOf(type));
                    record.closeDeclarationFun(typeleft, typeright, String.valueOf(name));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure", 8, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // function_estructure ::= VISIBILITY ID ID O_PARENT internal_function C_BRACE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setName_function(String.valueOf(name));
                    record.setType_return(String.valueOf(type));
                    record.closeDeclarationFun(typeleft, typeright, String.valueOf(name));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure", 8, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // function_estructure ::= ID ID O_PARENT internal_function C_BRACE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object name = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    record.setName_function(String.valueOf(name));
                    record.setType_return(String.valueOf(type));
                    record.closeDeclarationFun(typeleft, typeright, String.valueOf(name));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure", 8, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // internal_function ::= C_PARENT O_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function", 42, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // internal_function ::= function_args_estructure C_PARENT O_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function", 42, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // internal_function ::= C_PARENT O_BRACE internal_estructures 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function", 42, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // internal_function ::= function_args_estructure C_PARENT O_BRACE internal_estructures 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function", 42, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // internal_function ::= 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function", 42, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // properties_function ::= VISIBILITY VOID 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    RESULT = String.valueOf(type);
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function", 41, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // properties_function ::= VISIBILITY STATIC VOID 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    RESULT = String.valueOf(type);
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function", 41, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // properties_function ::= VISIBILITY STATIC TYPE_VARIABLE 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    RESULT = String.valueOf(type);
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function", 41, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // internal_estructures ::= all_estructures 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures", 36, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // internal_estructures ::= all_estructures internal_estructures 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures", 36, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // internal_estructures ::= error all_estructures 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures", 36, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // all_estructures ::= declarated_variable_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // all_estructures ::= for_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // all_estructures ::= while_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // all_estructures ::= do_while_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // all_estructures ::= switch_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // all_estructures ::= case_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // all_estructures ::= if_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // all_estructures ::= if_else_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // all_estructures ::= inc_dec_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // all_estructures ::= return_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // all_estructures ::= call_function_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // all_estructures ::= this_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures", 35, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // function_args_estructure ::= TYPE_VARIABLE ID 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure", 9, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // function_args_estructure ::= ID ID 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
                    record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure", 9, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // function_args_estructure ::= TYPE_VARIABLE ID COMMA function_args_estructure 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure", 9, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // function_args_estructure ::= error function_args_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure", 9, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // for_estructure ::= FOR O_PARENT declarated_variable_estructure SEMICOLON logical_comparation SEMICOLON for_increment_in C_PARENT O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_estructure", 10, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure", 11, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure", 11, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // internal_while ::= logical_comparation 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while", 38, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // internal_while ::= BOOLEAN 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while", 38, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // internal_while ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while", 38, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT logical_comparation C_PARENT SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure", 12, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT BOOLEAN C_PARENT SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure", 12, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE internal_switch C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure", 13, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure", 13, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // internal_switch ::= case_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch", 40, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // internal_switch ::= case_estructure internal_switch 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch", 40, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // case_estructure ::= CASE types_values_switch COLONS internal_estructures BREAK SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure", 14, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // case_estructure ::= CASE types_values_switch COLONS internal_estructures return_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure", 14, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // case_estructure ::= DEFAULT COLONS internal_estructures BREAK SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure", 14, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // case_estructure ::= DEFAULT COLONS internal_estructures return_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure", 14, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // return_estructure ::= RETURN internal_return SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("return_estructure", 15, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // internal_return ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return", 37, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // internal_return ::= types_values 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return", 37, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // internal_return ::= new_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return", 37, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // if_estructure ::= IF O_PARENT logical_comparation C_PARENT O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure", 20, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // if_estructure ::= IF O_PARENT BOOLEAN C_PARENT O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure", 20, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // if_estructure ::= IF O_PARENT ID C_PARENT O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure", 20, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // if_else_estructure ::= if_estructure ELSE if_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure", 21, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // if_else_estructure ::= if_estructure ELSE O_BRACE internal_estructures C_BRACE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure", 21, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // if_else_estructure ::= if_estructure ELSE if_else_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure", 21, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT args_estructure C_PARENT SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).value;
                    var_entries.add(String.valueOf(id));
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure", 17, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT args_estructure C_PARENT SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).value;
                    var_entries.add(String.valueOf(id));
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure", 17, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT C_PARENT SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).value;
                    var_entries.add(String.valueOf(id));
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure", 17, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // new_estructure ::= NEW OBJECT O_PARENT args_estructure C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure", 18, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // new_estructure ::= NEW ID O_PARENT args_estructure C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure", 18, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // args_estructure ::= new_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure", 19, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // args_estructure ::= types_values 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure", 19, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // args_estructure ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure", 19, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // args_estructure ::= new_estructure COMMA args_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure", 19, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // args_estructure ::= types_values COMMA args_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure", 19, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // declarated_variable_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // declarated_variable_estructure ::= ID declarated_several_variables SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)).value;
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // declarated_variable_estructure ::= ID ID EQUAL NEW ID O_PARENT C_PARENT SEMICOLON 
                {
                    Object RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).right;
                    Object type = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).right;
                    Object id = (Object) ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 6)).value;
                    var_entries.add(String.valueOf(id));
                    record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type));
                    var_entries.clear();
                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // declarated_variable_estructure ::= ID asign_values variable_values SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // declarated_variable_estructure ::= THIS DOT call_function_this asign_values variable_values SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // declarated_variable_estructure ::= create_obj_estructure 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure", 22, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // this_estructure ::= this_internal SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_estructure", 44, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // this_internal ::= THIS DOT call_function_this 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_internal", 46, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // call_function_this ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // call_function_this ::= ID O_PARENT args_estructure C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // call_function_this ::= ID O_PARENT C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // call_function_this ::= ID DOT call_function_this 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // call_function_this ::= ID O_PARENT args_estructure C_PARENT DOT call_function_this 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // call_function_this ::= ID O_PARENT C_PARENT DOT call_function_this 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this", 45, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // call_function_estructure ::= ID O_PARENT args_estructure C_PARENT SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure", 39, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // call_function_estructure ::= ID O_PARENT C_PARENT SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure", 39, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // variable_values ::= types_values_other 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values", 23, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // variable_values ::= number_operations 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values", 23, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // variable_values ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values", 23, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // variable_values ::= this_internal 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values", 23, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // variable_values ::= variable_values SUM variable_values 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values", 23, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // number_operations ::= INTEGER 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations", 24, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // number_operations ::= DECIMAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations", 24, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // number_operations ::= O_PARENT number_operations C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations", 24, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // number_operations ::= number_operations arithmetics_operations number_operations 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations", 24, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // for_increment_in ::= ID increment_operators 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in", 25, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // for_increment_in ::= ID asign_values variable_values 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in", 25, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // inc_dec_estructure ::= ID increment_operators SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure", 26, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // inc_dec_estructure ::= increment_operators ID SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure", 26, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // logical_comparation ::= number_operations logical_operations number_operations 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // logical_comparation ::= types_values_without logical_operations types_values_without 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // logical_comparation ::= number_operations logical_operations logical_comparation 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // logical_comparation ::= types_values_without logical_operations logical_comparation 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // logical_comparation ::= types_values_without logical_operations number_operations 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // logical_comparation ::= O_PARENT logical_comparation C_PARENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation", 27, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // asign_values ::= C_SUM 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values", 28, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // asign_values ::= C_REST 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values", 28, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // asign_values ::= C_MULTIPLY 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values", 28, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // asign_values ::= C_DIV 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values", 28, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // asign_values ::= EQUAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values", 28, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // types_values ::= STRING 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values", 29, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // types_values ::= DECIMAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values", 29, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // types_values ::= INTEGER 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values", 29, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // types_values ::= CHAR 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values", 29, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // types_values ::= BOOLEAN 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values", 29, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // types_values_other ::= STRING 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other", 16, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // types_values_other ::= CHAR 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other", 16, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // types_values_other ::= BOOLEAN 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other", 16, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // types_values_switch ::= STRING 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch", 30, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // types_values_switch ::= INTEGER 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch", 30, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // types_values_switch ::= CHAR 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch", 30, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // types_values_switch ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch", 30, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // types_values_without ::= CHAR 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without", 31, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // types_values_without ::= BOOLEAN 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without", 31, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // types_values_without ::= ID 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without", 31, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // arithmetics_operations ::= SUM 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations", 32, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // arithmetics_operations ::= REST 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations", 32, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // arithmetics_operations ::= DIV 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations", 32, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // arithmetics_operations ::= MULTIPLY 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations", 32, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 162: // increment_operators ::= INCREMENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators", 33, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 163: // increment_operators ::= DECREMENT 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators", 33, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 164: // logical_operations ::= D_EQUAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 165: // logical_operations ::= MOD 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 166: // logical_operations ::= DIFFERENCE 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 167: // logical_operations ::= HIGHER 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 168: // logical_operations ::= H_EQUAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 169: // logical_operations ::= SMALLER 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 170: // logical_operations ::= S_EQUAL 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 171: // logical_operations ::= AND 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 172: // logical_operations ::= OR 
                {
                    Object RESULT = null;

                    CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations", 34, ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()), RESULT);
                }
                return CUP$Sintactic$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintactic$act_num + "found in internal parse table");

            }
        }

        /* end of method */
        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintactic$do_action(
                int CUP$Sintactic$act_num,
                java_cup.runtime.lr_parser CUP$Sintactic$parser,
                java.util.Stack CUP$Sintactic$stack,
                int CUP$Sintactic$top)
                throws java.lang.Exception {
            return CUP$Sintactic$do_action_part00000000(
                    CUP$Sintactic$act_num,
                    CUP$Sintactic$parser,
                    CUP$Sintactic$stack,
                    CUP$Sintactic$top);
        }
    }

}
