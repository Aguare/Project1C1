
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Backend.Analizers;

import Backend.Controller.SaveInfo;
import java_cup.runtime.*;
import java.util.ArrayList;
import Backend.Objects.ClassInfo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\006\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\006\010\000\002\006\007\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\010\006\000\002\010\005\000\002\010\006\000" +
    "\002\055\003\000\002\055\005\000\002\055\005\000\002" +
    "\055\007\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\007\000\002\012\010\000\002\012\007\000" +
    "\002\012\010\000\002\012\007\000\002\054\004\000\002" +
    "\054\005\000\002\054\005\000\002\054\006\000\002\054" +
    "\002\000\002\053\004\000\002\053\005\000\002\053\005" +
    "\000\002\046\003\000\002\046\004\000\002\046\004\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\006\000\002\014\015\000\002" +
    "\015\011\000\002\015\010\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\016\013\000\002\016\013" +
    "\000\002\017\011\000\002\017\010\000\002\052\003\000" +
    "\002\052\004\000\002\020\010\000\002\020\007\000\002" +
    "\020\007\000\002\020\006\000\002\021\005\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\026\011" +
    "\000\002\026\011\000\002\026\011\000\002\027\005\000" +
    "\002\027\007\000\002\027\005\000\002\023\013\000\002" +
    "\023\013\000\002\023\012\000\002\024\007\000\002\024" +
    "\007\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\025\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\012\000\002\030\006\000\002" +
    "\030\010\000\002\030\003\000\002\056\004\000\002\060" +
    "\005\000\002\057\003\000\002\057\006\000\002\057\005" +
    "\000\002\057\005\000\002\057\010\000\002\057\007\000" +
    "\002\051\007\000\002\051\006\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\005\000\002\032\003\000\002\032\003\000\002\032\005" +
    "\000\002\032\005\000\002\033\004\000\002\033\005\000" +
    "\002\034\005\000\002\034\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\012\006\007\064\004\071\011\072\010\001" +
    "\002\000\004\013\u0165\001\002\000\004\002\u0164\001\002" +
    "\000\004\064\004\001\002\000\004\071\u015d\001\002\000" +
    "\004\013\u015b\001\002\000\004\013\015\001\002\000\004" +
    "\002\ufffe\001\002\000\006\006\007\071\011\001\002\000" +
    "\004\002\uffff\001\002\000\004\014\016\001\002\000\016" +
    "\006\023\007\017\013\025\015\ufff3\066\026\067\020\001" +
    "\002\000\004\013\u0155\001\002\000\010\007\uffe3\013\uffe3" +
    "\066\u0154\001\002\000\006\007\u014f\013\u014e\001\002\000" +
    "\004\015\u014d\001\002\000\014\007\u0139\013\u0138\066\u013b" +
    "\067\u013a\070\u013c\001\002\000\016\006\023\007\017\013" +
    "\025\015\ufff3\066\026\067\020\001\002\000\016\013\u012e" +
    "\032\155\047\157\050\156\051\160\052\153\001\002\000" +
    "\010\007\uffe2\013\uffe2\067\u012d\001\002\000\004\013\032" +
    "\001\002\000\016\006\023\007\017\013\025\015\ufff3\066" +
    "\026\067\020\001\002\000\004\015\ufff5\001\002\000\004" +
    "\020\033\001\002\000\012\007\035\013\034\015\uffd8\021" +
    "\037\001\002\000\004\013\u012c\001\002\000\004\013\u0129" +
    "\001\002\000\004\021\u0126\001\002\000\004\014\042\001" +
    "\002\000\004\015\041\001\002\000\016\006\uffe1\007\uffe1" +
    "\013\uffe1\015\uffe1\066\uffe1\067\uffe1\001\002\000\042\003" +
    "\071\007\065\013\055\015\uffdc\045\066\046\046\053\054" +
    "\055\075\056\044\057\060\060\050\061\070\063\047\065" +
    "\061\074\074\075\057\001\002\000\044\003\uffc6\007\uffc6" +
    "\013\uffc6\015\uffc6\045\uffc6\046\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6" +
    "\074\uffc6\075\uffc6\001\002\000\004\020\u011c\001\002\000" +
    "\044\003\uffca\007\uffca\013\uffca\015\uffca\045\uffca\046\uffca" +
    "\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\065\uffca\074\uffca\075\uffca\001\002\000\010" +
    "\013\uff62\021\uff62\022\uff62\001\002\000\020\004\122\005" +
    "\117\010\127\011\125\012\131\013\u0119\073\124\001\002" +
    "\000\004\020\u010e\001\002\000\046\003\uffcb\007\uffcb\013" +
    "\uffcb\015\uffcb\045\uffcb\046\uffcb\053\uffcb\054\u0108\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\065" +
    "\uffcb\074\uffcb\075\uffcb\001\002\000\004\022\u0107\001\002" +
    "\000\044\003\uffd1\007\uffd1\013\uffd1\015\uffd1\045\uffd1\046" +
    "\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\065\uffd1\074\uffd1\075\uffd1\001\002\000" +
    "\004\020\367\001\002\000\024\013\257\020\360\032\155" +
    "\045\066\046\046\047\157\050\156\051\160\052\153\001" +
    "\002\000\044\003\uffcc\007\uffcc\013\uffcc\015\uffcc\045\uffcc" +
    "\046\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\065\uffcc\074\uffcc\075\uffcc\001\002" +
    "\000\004\025\355\001\002\000\004\014\342\001\002\000" +
    "\004\013\330\001\002\000\044\003\uffc7\007\uffc7\013\uffc7" +
    "\015\uffc7\045\uffc7\046\uffc7\053\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\074\uffc7" +
    "\075\uffc7\001\002\000\004\015\uffda\001\002\000\044\003" +
    "\uffd0\007\uffd0\013\uffd0\015\uffd0\045\uffd0\046\uffd0\053\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\065\uffd0\074\uffd0\075\uffd0\001\002\000\004\013\272" +
    "\001\002\000\010\013\uff63\021\uff63\022\uff63\001\002\000" +
    "\044\003\071\007\065\013\055\015\uffd4\045\066\046\046" +
    "\053\054\055\075\056\044\057\060\060\050\061\070\062" +
    "\uffd4\063\047\065\061\074\074\075\057\001\002\000\012" +
    "\004\314\010\315\012\317\013\313\001\002\000\036\007" +
    "\065\013\055\045\066\046\046\053\054\055\075\056\044" +
    "\057\060\060\050\061\070\063\047\065\061\074\074\075" +
    "\057\001\002\000\046\003\uff99\007\uff99\013\uff99\015\uff99" +
    "\022\uff99\045\uff99\046\uff99\053\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\065\uff99\074\uff99" +
    "\075\uff99\001\002\000\044\003\uffc9\007\uffc9\013\uffc9\015" +
    "\uffc9\045\uffc9\046\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\074\uffc9\075" +
    "\uffc9\001\002\000\004\023\305\001\002\000\004\020\105" +
    "\001\002\000\004\013\103\001\002\000\044\003\uffcd\007" +
    "\uffcd\013\uffcd\015\uffcd\045\uffcd\046\uffcd\053\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\044\003\uffcf\007\uffcf" +
    "\013\uffcf\015\uffcf\045\uffcf\046\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf" +
    "\074\uffcf\075\uffcf\001\002\000\044\003\uffce\007\uffce\013" +
    "\uffce\015\uffce\045\uffce\046\uffce\053\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce\074" +
    "\uffce\075\uffce\001\002\000\044\003\uffc8\007\uffc8\013\uffc8" +
    "\015\uffc8\045\uffc8\046\uffc8\053\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\074\uffc8" +
    "\075\uffc8\001\002\000\004\022\104\001\002\000\044\003" +
    "\uff82\007\uff82\013\uff82\015\uff82\045\uff82\046\uff82\053\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\065\uff82\074\uff82\075\uff82\001\002\000\012\007\065" +
    "\013\106\065\061\075\110\001\002\000\016\013\257\032" +
    "\155\047\157\050\156\051\160\052\153\001\002\000\004" +
    "\022\212\001\002\000\004\025\111\001\002\000\004\013" +
    "\113\001\002\000\014\032\155\047\157\050\156\051\160" +
    "\052\153\001\002\000\030\020\114\021\uff96\022\uff96\024" +
    "\uff96\025\115\026\uff96\032\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\001\002\000\022\004\122\005\117\010\127\011" +
    "\125\012\131\013\130\021\121\073\124\001\002\000\004" +
    "\013\113\001\002\000\024\021\uff93\022\uff93\024\uff93\026" +
    "\uff93\032\uff93\047\uff93\050\uff93\051\uff93\052\uff93\001\002" +
    "\000\010\021\uff75\022\uff75\024\uff75\001\002\000\004\021" +
    "\150\001\002\000\026\021\uff94\022\uff94\024\uff94\025\146" +
    "\026\uff94\032\uff94\047\uff94\050\uff94\051\uff94\052\uff94\001" +
    "\002\000\010\021\uff74\022\uff74\024\uff74\001\002\000\006" +
    "\021\uffa3\024\144\001\002\000\006\013\134\065\135\001" +
    "\002\000\010\021\uff72\022\uff72\024\uff72\001\002\000\006" +
    "\021\uffa2\024\132\001\002\000\010\021\uff76\022\uff76\024" +
    "\uff76\001\002\000\004\021\uffa1\001\002\000\010\021\uff73" +
    "\022\uff73\024\uff73\001\002\000\020\004\122\005\117\010" +
    "\127\011\125\012\131\013\130\073\124\001\002\000\004" +
    "\021\uff9f\001\002\000\004\020\141\001\002\000\004\020" +
    "\136\001\002\000\020\004\122\005\117\010\127\011\125" +
    "\012\131\013\130\073\124\001\002\000\004\021\140\001" +
    "\002\000\010\021\uffa5\022\uffa5\024\uffa5\001\002\000\020" +
    "\004\122\005\117\010\127\011\125\012\131\013\130\073" +
    "\124\001\002\000\004\021\143\001\002\000\010\021\uffa4" +
    "\022\uffa4\024\uffa4\001\002\000\020\004\122\005\117\010" +
    "\127\011\125\012\131\013\130\073\124\001\002\000\004" +
    "\021\uffa0\001\002\000\004\013\113\001\002\000\024\021" +
    "\uff91\022\uff91\024\uff91\026\uff91\032\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\001\002\000\026\021\uff95\022\uff95\024" +
    "\uff95\025\151\026\uff95\032\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\001\002\000\004\013\113\001\002\000\024\021" +
    "\uff92\022\uff92\024\uff92\026\uff92\032\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\001\002\000\022\004\uff78\005\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\020\uff78\075\uff78\001\002" +
    "\000\022\004\164\005\163\010\167\011\165\012\174\013" +
    "\171\020\161\075\173\001\002\000\022\004\uff77\005\uff77" +
    "\010\uff77\011\uff77\012\uff77\013\uff77\020\uff77\075\uff77\001" +
    "\002\000\022\004\uff7a\005\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\020\uff7a\075\uff7a\001\002\000\022\004\uff7b\005" +
    "\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\020\uff7b\075\uff7b" +
    "\001\002\000\022\004\uff79\005\uff79\010\uff79\011\uff79\012" +
    "\uff79\013\uff79\020\uff79\075\uff79\001\002\000\010\004\164" +
    "\005\163\020\161\001\002\000\012\021\uff8e\022\uff8e\024" +
    "\uff8e\026\uff8e\001\002\000\042\021\uff88\022\uff88\024\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\033\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\001\002\000\042\021\uff89\022\uff89\024\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\033\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\001\002\000" +
    "\012\021\uff6f\022\uff6f\024\uff6f\026\uff6f\001\002\000\006" +
    "\022\206\026\205\001\002\000\012\021\uff71\022\uff71\024" +
    "\uff71\026\uff71\001\002\000\020\021\uff8d\022\uff8d\024\uff8d" +
    "\026\177\027\203\030\201\031\200\001\002\000\012\021" +
    "\uff8c\022\uff8c\024\uff8c\026\uff8c\001\002\000\012\021\uff8b" +
    "\022\uff8b\024\uff8b\026\uff8b\001\002\000\004\025\175\001" +
    "\002\000\012\021\uff70\022\uff70\024\uff70\026\uff70\001\002" +
    "\000\004\013\113\001\002\000\012\021\uff97\022\uff97\024" +
    "\uff97\026\uff97\001\002\000\010\004\uff67\005\uff67\020\uff67" +
    "\001\002\000\010\004\uff65\005\uff65\020\uff65\001\002\000" +
    "\010\004\uff64\005\uff64\020\uff64\001\002\000\010\004\164" +
    "\005\163\020\161\001\002\000\010\004\uff66\005\uff66\020" +
    "\uff66\001\002\000\042\021\uff86\022\uff86\024\uff86\026\177" +
    "\027\203\030\201\031\200\033\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\001\002" +
    "\000\022\004\164\005\163\010\167\011\165\012\174\013" +
    "\171\020\161\075\173\001\002\000\046\003\uff9a\007\uff9a" +
    "\013\uff9a\015\uff9a\022\uff9a\045\uff9a\046\uff9a\053\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\065\uff9a\074\uff9a\075\uff9a\001\002\000\012\021\uff8a\022" +
    "\uff8a\024\uff8a\026\uff8a\001\002\000\014\021\211\026\177" +
    "\027\203\030\201\031\200\001\002\000\042\021\uff87\022" +
    "\uff87\024\uff87\026\uff87\027\uff87\030\uff87\031\uff87\033\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\001\002\000\016\004\164\005\163\011\214" +
    "\012\221\013\216\020\213\001\002\000\016\004\164\005" +
    "\163\011\214\012\221\013\216\020\213\001\002\000\030" +
    "\021\uff69\022\uff69\033\uff69\035\uff69\036\uff69\037\uff69\040" +
    "\uff69\041\uff69\042\uff69\043\uff69\044\uff69\001\002\000\034" +
    "\026\177\027\203\030\201\031\200\033\226\035\225\036" +
    "\230\037\223\040\231\041\224\042\227\043\222\044\233" +
    "\001\002\000\030\021\uff68\022\uff68\033\uff68\035\uff68\036" +
    "\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68" +
    "\001\002\000\004\022\242\001\002\000\024\033\226\035" +
    "\225\036\230\037\223\040\231\041\224\042\227\043\222" +
    "\044\233\001\002\000\030\021\uff6a\022\uff6a\033\uff6a\035" +
    "\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a" +
    "\044\uff6a\001\002\000\016\004\uff5a\005\uff5a\011\uff5a\012" +
    "\uff5a\013\uff5a\020\uff5a\001\002\000\016\004\uff5e\005\uff5e" +
    "\011\uff5e\012\uff5e\013\uff5e\020\uff5e\001\002\000\016\004" +
    "\uff5c\005\uff5c\011\uff5c\012\uff5c\013\uff5c\020\uff5c\001\002" +
    "\000\016\004\uff60\005\uff60\011\uff60\012\uff60\013\uff60\020" +
    "\uff60\001\002\000\016\004\uff61\005\uff61\011\uff61\012\uff61" +
    "\013\uff61\020\uff61\001\002\000\016\004\uff5b\005\uff5b\011" +
    "\uff5b\012\uff5b\013\uff5b\020\uff5b\001\002\000\016\004\uff5f" +
    "\005\uff5f\011\uff5f\012\uff5f\013\uff5f\020\uff5f\001\002\000" +
    "\016\004\uff5d\005\uff5d\011\uff5d\012\uff5d\013\uff5d\020\uff5d" +
    "\001\002\000\016\004\164\005\163\011\214\012\221\013" +
    "\216\020\213\001\002\000\016\004\uff59\005\uff59\011\uff59" +
    "\012\uff59\013\uff59\020\uff59\001\002\000\040\021\uff7d\022" +
    "\uff7d\026\177\027\203\030\201\031\200\033\226\035\225" +
    "\036\230\037\223\040\231\041\224\042\227\043\222\044" +
    "\233\001\002\000\006\021\uff7e\022\uff7e\001\002\000\030" +
    "\021\uff80\022\uff80\033\226\035\225\036\230\037\223\040" +
    "\231\041\224\042\227\043\222\044\233\001\002\000\016" +
    "\004\164\005\163\011\214\012\221\013\216\020\213\001" +
    "\002\000\040\021\uff81\022\uff81\026\177\027\203\030\201" +
    "\031\200\033\226\035\225\036\230\037\223\040\231\041" +
    "\224\042\227\043\222\044\233\001\002\000\006\021\uff7f" +
    "\022\uff7f\001\002\000\004\013\243\001\002\000\020\032" +
    "\155\045\066\046\046\047\157\050\156\051\160\052\153" +
    "\001\002\000\004\021\245\001\002\000\004\014\246\001" +
    "\002\000\040\003\071\007\065\013\055\045\066\046\046" +
    "\053\054\055\075\056\044\057\060\060\050\061\070\063" +
    "\047\065\061\074\074\075\057\001\002\000\004\015\250" +
    "\001\002\000\044\003\uffc2\007\uffc2\013\uffc2\015\uffc2\045" +
    "\uffc2\046\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\065\uffc2\074\uffc2\075\uffc2\001" +
    "\002\000\004\021\uff85\001\002\000\022\004\164\005\163" +
    "\010\167\011\165\012\174\013\171\020\161\075\173\001" +
    "\002\000\006\021\uff84\026\205\001\002\000\036\021\211" +
    "\026\177\027\203\030\201\031\200\033\226\035\225\036" +
    "\230\037\223\040\231\041\224\042\227\043\222\044\233" +
    "\001\002\000\004\021\256\001\002\000\006\021\uff7c\022" +
    "\uff7c\001\002\000\010\022\uffeb\024\265\032\266\001\002" +
    "\000\004\022\264\001\002\000\022\004\164\005\163\010" +
    "\167\011\165\012\174\013\171\020\161\075\173\001\002" +
    "\000\006\022\263\026\205\001\002\000\046\003\uff9b\007" +
    "\uff9b\013\uff9b\015\uff9b\022\uff9b\045\uff9b\046\uff9b\053\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\065\uff9b\074\uff9b\075\uff9b\001\002\000\046\003\uff9d" +
    "\007\uff9d\013\uff9d\015\uff9d\022\uff9d\045\uff9d\046\uff9d\053" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\065\uff9d\074\uff9d\075\uff9d\001\002\000\004\013" +
    "\272\001\002\000\024\004\164\005\163\010\167\011\165" +
    "\012\174\013\171\020\161\073\267\075\173\001\002\000" +
    "\004\013\275\001\002\000\010\022\uffea\024\271\026\205" +
    "\001\002\000\004\013\272\001\002\000\010\022\uffeb\024" +
    "\265\032\274\001\002\000\004\022\uffe8\001\002\000\022" +
    "\004\164\005\163\010\167\011\165\012\174\013\171\020" +
    "\161\075\173\001\002\000\004\020\276\001\002\000\022" +
    "\004\122\005\117\010\127\011\125\012\131\013\130\021" +
    "\300\073\124\001\002\000\004\021\302\001\002\000\004" +
    "\022\301\001\002\000\046\003\uff9c\007\uff9c\013\uff9c\015" +
    "\uff9c\022\uff9c\045\uff9c\046\uff9c\053\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c\074" +
    "\uff9c\075\uff9c\001\002\000\004\022\303\001\002\000\046" +
    "\003\uffa7\007\uffa7\013\uffa7\015\uffa7\022\uffa7\045\uffa7\046" +
    "\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\065\uffa7\074\uffa7\075\uffa7\001\002\000" +
    "\004\022\uffe9\001\002\000\040\003\071\007\065\013\055" +
    "\045\066\046\046\053\054\055\075\056\044\057\060\060" +
    "\050\061\070\063\047\065\061\074\074\075\057\001\002" +
    "\000\006\062\307\063\047\001\002\000\004\022\311\001" +
    "\002\000\044\003\uffb3\007\uffb3\013\uffb3\015\uffb3\045\uffb3" +
    "\046\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\065\uffb3\074\uffb3\075\uffb3\001\002" +
    "\000\044\003\uffb4\007\uffb4\013\uffb4\015\uffb4\045\uffb4\046" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\065\uffb4\074\uffb4\075\uffb4\001\002\000" +
    "\010\015\uffd2\062\uffd2\063\uffd2\001\002\000\006\021\uff6b" +
    "\023\uff6b\001\002\000\006\021\uff6d\023\uff6d\001\002\000" +
    "\006\021\uff6e\023\uff6e\001\002\000\004\023\320\001\002" +
    "\000\006\021\uff6c\023\uff6c\001\002\000\040\003\071\007" +
    "\065\013\055\045\066\046\046\053\054\055\075\056\044" +
    "\057\060\060\050\061\070\063\047\065\061\074\074\075" +
    "\057\001\002\000\006\062\322\063\047\001\002\000\004" +
    "\022\324\001\002\000\044\003\uffb5\007\uffb5\013\uffb5\015" +
    "\uffb5\045\uffb5\046\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\074\uffb5\075" +
    "\uffb5\001\002\000\044\003\uffb6\007\uffb6\013\uffb6\015\uffb6" +
    "\045\uffb6\046\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\074\uffb6\075\uffb6" +
    "\001\002\000\010\015\uffd3\062\uffd3\063\uffd3\001\002\000" +
    "\004\022\327\001\002\000\046\003\uff9e\007\uff9e\013\uff9e" +
    "\015\uff9e\022\uff9e\045\uff9e\046\uff9e\053\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\065\uff9e" +
    "\074\uff9e\075\uff9e\001\002\000\004\032\331\001\002\000" +
    "\004\073\332\001\002\000\004\065\333\001\002\000\004" +
    "\020\334\001\002\000\022\004\122\005\117\010\127\011" +
    "\125\012\131\013\130\021\336\073\124\001\002\000\004" +
    "\021\340\001\002\000\004\022\337\001\002\000\046\003" +
    "\uffa6\007\uffa6\013\uffa6\015\uffa6\022\uffa6\045\uffa6\046\uffa6" +
    "\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\065\uffa6\074\uffa6\075\uffa6\001\002\000\004" +
    "\022\341\001\002\000\046\003\uffa8\007\uffa8\013\uffa8\015" +
    "\uffa8\022\uffa8\045\uffa8\046\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\065\uffa8\074" +
    "\uffa8\075\uffa8\001\002\000\040\003\071\007\065\013\055" +
    "\045\066\046\046\053\054\055\075\056\044\057\060\060" +
    "\050\061\070\063\047\065\061\074\074\075\057\001\002" +
    "\000\004\015\344\001\002\000\004\056\345\001\002\000" +
    "\004\020\346\001\002\000\016\004\164\005\163\011\347" +
    "\012\221\013\216\020\213\001\002\000\026\021\353\033" +
    "\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69" +
    "\043\uff69\044\uff69\001\002\000\004\021\351\001\002\000" +
    "\004\022\352\001\002\000\044\003\uffbc\007\uffbc\013\uffbc" +
    "\015\uffbc\045\uffbc\046\uffbc\053\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\065\uffbc\074\uffbc" +
    "\075\uffbc\001\002\000\004\022\354\001\002\000\044\003" +
    "\uffbb\007\uffbb\013\uffbb\015\uffbb\045\uffbb\046\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\065\uffbb\074\uffbb\075\uffbb\001\002\000\004\013\113" +
    "\001\002\000\016\022\uff97\032\155\047\157\050\156\051" +
    "\160\052\153\001\002\000\004\022\366\001\002\000\022" +
    "\004\122\005\117\010\127\011\125\012\131\013\130\021" +
    "\362\073\124\001\002\000\004\021\364\001\002\000\004" +
    "\022\363\001\002\000\044\003\uff8f\007\uff8f\013\uff8f\015" +
    "\uff8f\045\uff8f\046\uff8f\053\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\074\uff8f\075" +
    "\uff8f\001\002\000\004\022\365\001\002\000\044\003\uff90" +
    "\007\uff90\013\uff90\015\uff90\045\uff90\046\uff90\053\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\065\uff90\074\uff90\075\uff90\001\002\000\044\003\uff83\007" +
    "\uff83\013\uff83\015\uff83\045\uff83\046\uff83\053\uff83\055\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\065" +
    "\uff83\074\uff83\075\uff83\001\002\000\016\004\164\005\163" +
    "\011\370\012\221\013\371\020\213\001\002\000\026\021" +
    "\u0103\033\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\001\002\000\026\021\377\033" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\043\uff68\044\uff68\001\002\000\004\021\373\001\002\000" +
    "\004\014\374\001\002\000\040\003\071\007\065\013\055" +
    "\045\066\046\046\053\054\055\075\056\044\057\060\060" +
    "\050\061\070\063\047\065\061\074\074\075\057\001\002" +
    "\000\004\015\376\001\002\000\046\003\uffae\007\uffae\013" +
    "\uffae\015\uffae\045\uffae\046\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\065" +
    "\uffae\074\uffae\075\uffae\001\002\000\004\014\u0100\001\002" +
    "\000\040\003\071\007\065\013\055\045\066\046\046\053" +
    "\054\055\075\056\044\057\060\060\050\061\070\063\047" +
    "\065\061\074\074\075\057\001\002\000\004\015\u0102\001" +
    "\002\000\046\003\uffac\007\uffac\013\uffac\015\uffac\045\uffac" +
    "\046\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\065\uffac\074\uffac\075\uffac" +
    "\001\002\000\004\014\u0104\001\002\000\040\003\071\007" +
    "\065\013\055\045\066\046\046\053\054\055\075\056\044" +
    "\057\060\060\050\061\070\063\047\065\061\074\074\075" +
    "\057\001\002\000\004\015\u0106\001\002\000\046\003\uffad" +
    "\007\uffad\013\uffad\015\uffad\045\uffad\046\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\065\uffad\074\uffad\075\uffad\001\002\000\044\003" +
    "\uff98\007\uff98\013\uff98\015\uff98\045\uff98\046\uff98\053\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\065\uff98\074\uff98\075\uff98\001\002\000\006\014\u010a" +
    "\053\054\001\002\000\044\003\uffa9\007\uffa9\013\uffa9\015" +
    "\uffa9\045\uffa9\046\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\065\uffa9\074\uffa9\075" +
    "\uffa9\001\002\000\040\003\071\007\065\013\055\045\066" +
    "\046\046\053\054\055\075\056\044\057\060\060\050\061" +
    "\070\063\047\065\061\074\074\075\057\001\002\000\046" +
    "\003\uffab\007\uffab\013\uffab\015\uffab\045\uffab\046\uffab\053" +
    "\uffab\054\u0108\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\065\uffab\074\uffab\075\uffab\001\002\000" +
    "\004\015\u010d\001\002\000\044\003\uffaa\007\uffaa\013\uffaa" +
    "\015\uffaa\045\uffaa\046\uffaa\053\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065\uffaa\074\uffaa" +
    "\075\uffaa\001\002\000\012\004\314\010\315\012\317\013" +
    "\313\001\002\000\004\021\u0110\001\002\000\004\014\u0111" +
    "\001\002\000\010\015\u0113\061\070\074\074\001\002\000" +
    "\004\015\u0116\001\002\000\044\003\uffb9\007\uffb9\013\uffb9" +
    "\015\uffb9\045\uffb9\046\uffb9\053\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9\074\uffb9" +
    "\075\uffb9\001\002\000\010\015\uffb8\061\070\074\074\001" +
    "\002\000\004\015\uffb7\001\002\000\044\003\uffba\007\uffba" +
    "\013\uffba\015\uffba\045\uffba\046\uffba\053\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065\uffba" +
    "\074\uffba\075\uffba\001\002\000\004\022\uffaf\001\002\000" +
    "\004\022\uffb0\001\002\000\004\022\uffb1\001\002\000\004" +
    "\022\u011b\001\002\000\044\003\uffb2\007\uffb2\013\uffb2\015" +
    "\uffb2\045\uffb2\046\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\074\uffb2\075" +
    "\uffb2\001\002\000\016\004\164\005\163\011\u011d\012\221" +
    "\013\u011e\020\213\001\002\000\026\021\uffbe\033\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\044\uff69\001\002\000\026\021\uffbd\033\uff68\035\uff68\036" +
    "\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68" +
    "\001\002\000\004\021\uffbf\001\002\000\004\021\u0121\001" +
    "\002\000\004\014\u0122\001\002\000\042\003\071\007\065" +
    "\013\055\015\u0123\045\066\046\046\053\054\055\075\056" +
    "\044\057\060\060\050\061\070\063\047\065\061\074\074" +
    "\075\057\001\002\000\044\003\uffc0\007\uffc0\013\uffc0\015" +
    "\uffc0\045\uffc0\046\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\074\uffc0\075" +
    "\uffc0\001\002\000\004\015\u0125\001\002\000\044\003\uffc1" +
    "\007\uffc1\013\uffc1\015\uffc1\045\uffc1\046\uffc1\053\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\065\uffc1\074\uffc1\075\uffc1\001\002\000\004\014\u0127\001" +
    "\002\000\042\003\071\007\065\013\055\015\uffdb\045\066" +
    "\046\046\053\054\055\075\056\044\057\060\060\050\061" +
    "\070\063\047\065\061\074\074\075\057\001\002\000\004" +
    "\015\uffd9\001\002\000\006\021\uffc5\024\u012a\001\002\000" +
    "\006\007\035\013\034\001\002\000\004\021\uffc3\001\002" +
    "\000\004\021\uffc4\001\002\000\006\007\uffe5\013\uffe5\001" +
    "\002\000\012\020\u0134\022\uffeb\024\265\032\274\001\002" +
    "\000\004\022\u0133\001\002\000\022\004\164\005\163\010" +
    "\167\011\165\012\174\013\171\020\161\075\173\001\002" +
    "\000\006\022\u0132\026\205\001\002\000\016\006\uffec\007" +
    "\uffec\013\uffec\015\uffec\066\uffec\067\uffec\001\002\000\016" +
    "\006\uffed\007\uffed\013\uffed\015\uffed\066\uffed\067\uffed\001" +
    "\002\000\012\007\035\013\034\015\uffd8\021\037\001\002" +
    "\000\004\015\u0136\001\002\000\016\006\uffdd\007\uffdd\013" +
    "\uffdd\015\uffdd\066\uffdd\067\uffdd\001\002\000\004\015\ufff4" +
    "\001\002\000\004\013\u0147\001\002\000\004\013\u0141\001" +
    "\002\000\010\007\u013e\066\u013f\070\u0140\001\002\000\004" +
    "\067\u013d\001\002\000\004\013\uffd7\001\002\000\006\007" +
    "\uffe6\013\uffe6\001\002\000\004\013\uffd5\001\002\000\006" +
    "\007\uffe7\013\uffe7\001\002\000\004\013\uffd6\001\002\000" +
    "\012\020\u0144\022\uffeb\024\265\032\274\001\002\000\004" +
    "\022\u0143\001\002\000\016\006\ufff1\007\ufff1\013\ufff1\015" +
    "\ufff1\066\ufff1\067\ufff1\001\002\000\012\007\035\013\034" +
    "\015\uffd8\021\037\001\002\000\004\015\u0146\001\002\000" +
    "\016\006\uffe0\007\uffe0\013\uffe0\015\uffe0\066\uffe0\067\uffe0" +
    "\001\002\000\012\020\u014a\022\uffeb\024\265\032\274\001" +
    "\002\000\004\022\u0149\001\002\000\016\006\uffee\007\uffee" +
    "\013\uffee\015\uffee\066\uffee\067\uffee\001\002\000\012\007" +
    "\035\013\034\015\uffd8\021\037\001\002\000\004\015\u014c" +
    "\001\002\000\016\006\uffde\007\uffde\013\uffde\015\uffde\066" +
    "\uffde\067\uffde\001\002\000\004\002\ufff6\001\002\000\004" +
    "\013\272\001\002\000\004\013\272\001\002\000\004\022" +
    "\u0151\001\002\000\016\006\ufff2\007\ufff2\013\ufff2\015\ufff2" +
    "\066\ufff2\067\ufff2\001\002\000\004\022\u0153\001\002\000" +
    "\016\006\uffef\007\uffef\013\uffef\015\uffef\066\uffef\067\uffef" +
    "\001\002\000\006\007\uffe4\013\uffe4\001\002\000\012\020" +
    "\u0158\022\uffeb\024\265\032\274\001\002\000\004\022\u0157" +
    "\001\002\000\016\006\ufff0\007\ufff0\013\ufff0\015\ufff0\066" +
    "\ufff0\067\ufff0\001\002\000\012\007\035\013\034\015\uffd8" +
    "\021\037\001\002\000\004\015\u015a\001\002\000\016\006" +
    "\uffdf\007\uffdf\013\uffdf\015\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\004\022\u015c\001\002\000\004\064\ufffd\001\002\000" +
    "\004\013\u015e\001\002\000\004\014\u015f\001\002\000\016" +
    "\006\023\007\017\013\025\015\ufff3\066\026\067\020\001" +
    "\002\000\004\015\u0161\001\002\000\004\002\ufff7\001\002" +
    "\000\006\006\007\071\011\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002\000\010\013\u0165\022\ufffa" +
    "\025\u016a\001\002\000\004\022\u0167\001\002\000\010\006" +
    "\ufffc\064\004\071\ufffc\001\002\000\006\006\ufffb\071\ufffb" +
    "\001\002\000\004\022\ufff8\001\002\000\004\030\u016b\001" +
    "\002\000\004\022\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\012\002\004\003\005\004\012\006\011\001" +
    "\001\000\004\005\u0165\001\001\000\002\001\001\000\004" +
    "\004\u0161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\021\010" +
    "\027\011\020\012\023\053\026\001\001\000\004\055\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\u0136\010\027\011\020" +
    "\012\023\053\026\001\001\000\006\036\u012f\055\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\030" +
    "\010\027\011\020\012\023\053\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\035\054\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\014\063\015\077\016\100\017\076\020\055\021\101\023" +
    "\071\026\050\027\044\030\052\034\072\043\075\045\066" +
    "\046\062\051\061\056\042\060\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\u0116\037\u0117\047\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\260\043\356\055\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\325\001\001\000\002\001\001" +
    "\000\044\014\063\015\077\016\100\017\076\020\055\021" +
    "\101\023\071\026\050\027\044\030\052\034\072\043\075" +
    "\045\066\046\324\051\061\056\042\060\051\001\001\000" +
    "\004\040\315\001\001\000\042\014\063\015\077\016\100" +
    "\017\076\020\055\021\101\023\071\026\050\027\044\030" +
    "\052\034\072\043\075\045\311\051\061\056\042\060\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\071\030\106" +
    "\001\001\000\006\036\260\055\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\111\001\001\000\004" +
    "\036\153\001\001\000\002\001\001\000\010\024\122\025" +
    "\117\037\125\001\001\000\004\057\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\122\025\132" +
    "\037\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\122\025\136\037\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\122\025" +
    "\141\037\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\122\025\144\037\125\001\001\000\002\001" +
    "\001\000\004\057\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\161\031\165\032\167\060\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\203\001\001\000\002\001\001\000\004" +
    "\042\201\001\001\000\012\022\161\031\206\032\167\060" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\201\001\001\000\002\001\001\000\010\032\214\035" +
    "\216\041\217\001\001\000\010\032\253\035\254\041\217" +
    "\001\001\000\002\001\001\000\006\042\201\044\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\233\035\234\041\235\001\001\000\002\001\001" +
    "\000\006\042\201\044\236\001\001\000\002\001\001\000" +
    "\004\044\231\001\001\000\010\032\237\035\240\041\217" +
    "\001\001\000\006\042\201\044\236\001\001\000\002\001" +
    "\001\000\004\033\243\001\001\000\006\036\251\043\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\014" +
    "\063\015\077\016\100\017\076\020\055\021\101\023\071" +
    "\026\050\027\044\030\052\034\072\043\075\045\066\046" +
    "\246\051\061\056\042\060\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\161\031" +
    "\252\032\167\060\171\001\001\000\002\001\001\000\006" +
    "\042\201\044\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\161" +
    "\031\261\032\167\060\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\303\001\001" +
    "\000\012\022\161\031\267\032\167\060\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\161\031" +
    "\267\032\167\060\171\001\001\000\002\001\001\000\010" +
    "\024\122\025\276\037\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\014\063\015\077\016" +
    "\100\017\076\020\055\021\101\023\071\026\050\027\044" +
    "\030\052\034\072\043\075\045\066\046\305\051\061\056" +
    "\042\060\051\001\001\000\004\021\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\014\063\015" +
    "\077\016\100\017\076\020\055\021\101\023\071\026\050" +
    "\027\044\030\052\034\072\043\075\045\066\046\320\051" +
    "\061\056\042\060\051\001\001\000\004\021\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\122\025\334\037\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\063\015\077\016\100" +
    "\017\076\020\055\021\101\023\071\026\050\027\044\030" +
    "\052\034\072\043\075\045\066\046\342\051\061\056\042" +
    "\060\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\214\035\347\041\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\355\001\001\000\004\036\153\001\001\000\002\001" +
    "\001\000\010\024\122\025\360\037\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\214" +
    "\035\371\041\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\014\063" +
    "\015\077\016\100\017\076\020\055\021\101\023\071\026" +
    "\050\027\044\030\052\034\072\043\075\045\066\046\374" +
    "\051\061\056\042\060\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\063\015\077" +
    "\016\100\017\076\020\055\021\101\023\071\026\050\027" +
    "\044\030\052\034\072\043\075\045\066\046\u0100\051\061" +
    "\056\042\060\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\063\015\077\016\100" +
    "\017\076\020\055\021\101\023\071\026\050\027\044\030" +
    "\052\034\072\043\075\045\066\046\u0104\051\061\056\042" +
    "\060\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\u010a\027\u0108\001\001\000\002" +
    "\001\001\000\044\014\063\015\077\016\100\017\076\020" +
    "\055\021\101\023\071\026\050\027\044\030\052\034\072" +
    "\043\075\045\066\046\u010b\051\061\056\042\060\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u0113\052\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\u0113\052\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\032\214\035\u011e\041\217\050\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\063\015\077" +
    "\016\100\017\076\020\055\021\101\023\071\026\050\027" +
    "\044\030\052\034\072\043\075\045\066\046\u0123\051\061" +
    "\056\042\060\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\014\063" +
    "\015\077\016\100\017\076\020\055\021\101\023\071\026" +
    "\050\027\044\030\052\034\072\043\075\045\066\046\u0127" +
    "\051\061\056\042\060\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\161\031\u0130\032\167\060\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\035\054\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0147\001" +
    "\001\000\004\055\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\035\054" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\035\054\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0151\001\001\000\004\055" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\035" +
    "\054\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\u015f\010\027\011\020\012\023\053" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0168\001\001\000\002\001\001\000\004\004\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();
        private SaveInfo record = new SaveInfo();
        private ArrayList<String> var_entries = new ArrayList<>();

        public Sintactic(Lexer lexer){
             super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                }
                printStack();
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "Pendiente"));
                } catch (Exception e) {
                }
                printStack();
        }

        public void printStack() {
                System.out.println("------------STACK--------------");
                for (Object object : stack) {
                        if (object != null) {
                                Symbol s = (Symbol) object;
                                if (s.value != null) {
                                        System.out.println("L: " + s.left + " C:" + s.right + " Contenido: " + s.value);
                                }
                        }
                }
                System.out.println("________________________________");
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }

        public ClassInfo getResult(ArrayList<String> comments) {
                return record.getResult(comments); 
        }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactic$actions {
  private final Sintactic parser;

  /** Constructor */
  CUP$Sintactic$actions(Sintactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action_part00000000(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactic$result;

      /* select the action based on the action number */
      switch (CUP$Sintactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		RESULT = start_val;
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactic$parser.done_parsing();
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= package_estructure import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= import_estructure class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= class_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_estructure ::= PACKAGE ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("package_estructure",1, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_estructure ::= IMPORT import_id_estructure SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_estructure ::= IMPORT import_id_estructure SEMICOLON import_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_estructure",2, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_id_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_id_estructure ::= ID DOT MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_id_estructure ::= ID import_id_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("import_id_estructure",3, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_estructure ::= VISIBILITY CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;
		int name_classleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int name_classright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name_class = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setname_class(name_class.toString());
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_estructure ::= CLASS ID O_BRACE class_internal_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_estructure",4, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_internal_estructure ::= declarated_variable_class_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_internal_estructure ::= function_estructure class_internal_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_internal_estructure ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("class_internal_estructure",5, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarated_variable_class_estructure ::= properties_variables TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarated_variable_class_estructure ::= VISIBILITY TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarated_variable_class_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarated_variable_class_estructure ::= properties_variables ID declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarated_variable_class_estructure ::= VISIBILITY ID declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarated_variable_class_estructure ::= ID declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToClass(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarated_variable_class_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_class_estructure",6, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarated_several_variables ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		var_entries.add(String.valueOf(id));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarated_several_variables ::= ID EQUAL variable_values 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		var_entries.add(String.valueOf(id));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarated_several_variables ::= ID COMMA declarated_several_variables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		var_entries.add(String.valueOf(id));var_entries.add(String.valueOf(id2));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarated_several_variables ::= ID EQUAL variable_values COMMA declarated_several_variables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		var_entries.add(String.valueOf(id));var_entries.add(String.valueOf(id2));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_several_variables",43, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // properties_variables ::= VISIBILITY STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // properties_variables ::= VISIBILITY FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // properties_variables ::= FINAL STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // properties_variables ::= STATIC FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // properties_variables ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // properties_variables ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_variables",7, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_estructure ::= properties_function ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setName_function(String.valueOf(name)); record.setType_return(String.valueOf(type)); record.closeDeclarationFun(typeleft, typeright);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_estructure ::= VISIBILITY TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setName_function(String.valueOf(name)); record.setType_return(String.valueOf(type)); record.closeDeclarationFun(typeleft, typeright);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_estructure ::= TYPE_VARIABLE ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setName_function(String.valueOf(name)); record.setType_return(String.valueOf(type)); record.closeDeclarationFun(typeleft, typeright);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_estructure ::= VISIBILITY ID ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setName_function(String.valueOf(name)); record.setType_return(String.valueOf(type)); record.closeDeclarationFun(typeleft, typeright);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_estructure ::= ID ID O_PARENT internal_function C_BRACE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		record.setName_function(String.valueOf(name)); record.setType_return(String.valueOf(type)); record.closeDeclarationFun(typeleft, typeright);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_estructure",8, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // internal_function ::= C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internal_function ::= function_args_estructure C_PARENT O_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internal_function ::= C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // internal_function ::= function_args_estructure C_PARENT O_BRACE internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // internal_function ::= 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_function",42, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // properties_function ::= VISIBILITY VOID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // properties_function ::= VISIBILITY STATIC VOID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // properties_function ::= VISIBILITY STATIC TYPE_VARIABLE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("properties_function",41, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // internal_estructures ::= all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // internal_estructures ::= all_estructures internal_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // internal_estructures ::= error all_estructures 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_estructures",36, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // all_estructures ::= declarated_variable_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_estructures ::= for_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_estructures ::= while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_estructures ::= do_while_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_estructures ::= switch_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // all_estructures ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // all_estructures ::= if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // all_estructures ::= if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // all_estructures ::= inc_dec_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // all_estructures ::= return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_estructures ::= call_function_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_estructures ::= this_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("all_estructures",35, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_args_estructure ::= TYPE_VARIABLE ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_args_estructure ::= ID ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.peek()).value;
		record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_args_estructure ::= TYPE_VARIABLE ID COMMA function_args_estructure 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		record.addParameter(idleft, idright, String.valueOf(id), String.valueOf(type));
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("function_args_estructure",9, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_estructure ::= FOR O_PARENT declarated_variable_estructure SEMICOLON logical_comparation SEMICOLON for_increment_in C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_estructure",10, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while_estructure ::= WHILE O_PARENT internal_while C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("while_estructure",11, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // internal_while ::= logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // internal_while ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // internal_while ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_while",38, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT logical_comparation C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // do_while_estructure ::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT BOOLEAN C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("do_while_estructure",12, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE internal_switch C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch_estructure ::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("switch_estructure",13, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // internal_switch ::= case_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // internal_switch ::= case_estructure internal_switch 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_switch",40, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_estructure ::= CASE types_values_switch COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_estructure ::= CASE types_values_switch COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_estructure ::= DEFAULT COLONS internal_estructures BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_estructure ::= DEFAULT COLONS internal_estructures return_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("case_estructure",14, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // return_estructure ::= RETURN internal_return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("return_estructure",15, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // internal_return ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // internal_return ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // internal_return ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("internal_return",37, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_estructure ::= IF O_PARENT logical_comparation C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_estructure ::= IF O_PARENT BOOLEAN C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_estructure ::= IF O_PARENT ID C_PARENT O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_estructure",20, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_else_estructure ::= if_estructure ELSE if_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_else_estructure ::= if_estructure ELSE O_BRACE internal_estructures C_BRACE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_else_estructure ::= if_estructure ELSE if_else_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("if_else_estructure",21, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		var_entries.add(String.valueOf(id)); record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // create_obj_estructure ::= ID ID EQUAL NEW ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		var_entries.add(String.valueOf(id)); record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // create_obj_estructure ::= OBJECT ID EQUAL NEW OBJECT O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		var_entries.add(String.valueOf(id)); record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("create_obj_estructure",17, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // new_estructure ::= NEW OBJECT O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // new_estructure ::= NEW ID O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("new_estructure",18, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // args_estructure ::= new_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // args_estructure ::= types_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // args_estructure ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // args_estructure ::= new_estructure COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // args_estructure ::= types_values COMMA args_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("args_estructure",19, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declarated_variable_estructure ::= TYPE_VARIABLE declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declarated_variable_estructure ::= ID declarated_several_variables SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)).value;
		record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declarated_variable_estructure ::= ID ID EQUAL NEW ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-6)).value;
		var_entries.add(String.valueOf(id)); record.addVarToFunc(idleft, idright, var_entries, String.valueOf(type)); var_entries.clear();
              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declarated_variable_estructure ::= ID asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declarated_variable_estructure ::= THIS DOT call_function_this asign_values variable_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declarated_variable_estructure ::= create_obj_estructure 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("declarated_variable_estructure",22, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // this_estructure ::= this_internal SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_estructure",44, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // this_internal ::= THIS DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("this_internal",46, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // call_function_this ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // call_function_this ::= ID O_PARENT args_estructure C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // call_function_this ::= ID O_PARENT C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // call_function_this ::= ID DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // call_function_this ::= ID O_PARENT args_estructure C_PARENT DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // call_function_this ::= ID O_PARENT C_PARENT DOT call_function_this 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_this",45, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // call_function_estructure ::= ID O_PARENT args_estructure C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // call_function_estructure ::= ID O_PARENT C_PARENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("call_function_estructure",39, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_values ::= types_values_other 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable_values ::= number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variable_values ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variable_values ::= this_internal 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable_values ::= variable_values SUM variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("variable_values",23, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // number_operations ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // number_operations ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // number_operations ::= O_PARENT number_operations C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // number_operations ::= number_operations arithmetics_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("number_operations",24, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_increment_in ::= ID increment_operators 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for_increment_in ::= ID asign_values variable_values 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("for_increment_in",25, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // inc_dec_estructure ::= ID increment_operators SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // inc_dec_estructure ::= increment_operators ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("inc_dec_estructure",26, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_comparation ::= number_operations logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_comparation ::= types_values_without logical_operations types_values_without 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_comparation ::= number_operations logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_comparation ::= types_values_without logical_operations logical_comparation 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_comparation ::= types_values_without logical_operations number_operations 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logical_comparation ::= O_PARENT logical_comparation C_PARENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_comparation",27, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.elementAt(CUP$Sintactic$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asign_values ::= C_SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // asign_values ::= C_REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asign_values ::= C_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asign_values ::= C_DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asign_values ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("asign_values",28, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // types_values ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // types_values ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // types_values ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // types_values ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // types_values ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values",29, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // types_values_other ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // types_values_other ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // types_values_other ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_other",16, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // types_values_switch ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // types_values_switch ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // types_values_switch ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // types_values_switch ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_switch",30, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // types_values_without ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // types_values_without ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // types_values_without ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("types_values_without",31, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arithmetics_operations ::= SUM 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arithmetics_operations ::= REST 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arithmetics_operations ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arithmetics_operations ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",32, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // increment_operators ::= INCREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // increment_operators ::= DECREMENT 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("increment_operators",33, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // logical_operations ::= D_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // logical_operations ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // logical_operations ::= DIFFERENCE 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // logical_operations ::= HIGHER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // logical_operations ::= H_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // logical_operations ::= SMALLER 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // logical_operations ::= S_EQUAL 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // logical_operations ::= AND 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // logical_operations ::= OR 
            {
              Object RESULT =null;

              CUP$Sintactic$result = parser.getSymbolFactory().newSymbol("logical_operations",34, ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactic$stack.peek()), RESULT);
            }
          return CUP$Sintactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactic$do_action(
    int                        CUP$Sintactic$act_num,
    java_cup.runtime.lr_parser CUP$Sintactic$parser,
    java.util.Stack            CUP$Sintactic$stack,
    int                        CUP$Sintactic$top)
    throws java.lang.Exception
    {
              return CUP$Sintactic$do_action_part00000000(
                               CUP$Sintactic$act_num,
                               CUP$Sintactic$parser,
                               CUP$Sintactic$stack,
                               CUP$Sintactic$top);
    }
}

}
