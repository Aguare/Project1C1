/* SECTION 1: user code */
package Analizers;

import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:

        private ArrayList<ErrorLP> errors = new ArrayList<>();

        public Sintactic(Lexer lexer){
             super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                }
                printStack();
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "Pendiente"));
                } catch (Exception e) {
                }
                printStack();
        }

        public void printStack() {
                System.out.println("------------STACK--------------");
                for (Object object : stack) {
                        if (object != null) {
                                Symbol s = (Symbol) object;
                                if (s.value != null) {
                                System.out.println("L: " + s.left + " C:" + s.right + " Contenido: " + s.value);
                                }
                        }
                }
                System.out.println("________________________________");
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }
    
:};

/* Terminals (tokens returned by the scanner). */
terminal Integer INTEGER;
terminal Double DECIMAL;
/*terminal VISIBILITY, TYPE_VARIABLE, STRING, BOOLEAN, CHAR, ID, 
         O_BRACE, C_BRACE,O_PARENT, C_PARENT, 
         SEMICOLON, COLONS, COMMA, DOT, SUM, REST, MULTIPLY, DIV, EQUAL, 
         D_EQUAL, MOD, DIFFERENCE, HIGHER, H_EQUAL, SMALLER, S_EQUAL,
         AND, OR, INCREMENT, DECREMENT, C_SUM, C_REST, C_MULTIPLY, C_DIV,
         IF, ELSE, FOR, WHILE, DO, SWITCH, CASE, BREAK, RETURN, IMPORT,
         OBJECT, FINAL, STATIC, VOID, CLASS, PACKAGE, NEW, DEFAULT;*/

terminal VISIBILITY, TYPE_VARIABLE, STRING, BOOLEAN, CHAR, ID, 
         O_BRACE, C_BRACE, O_SBRACKET, C_SBRACKET, O_PARENT, C_PARENT, 
         SEMICOLON, COLONS, COMMA, DOT, SUM, REST, MULTIPLY, DIV, EQUAL, 
         D_EQUAL, APOS, MOD, DIFFERENCE, HIGHER, H_EQUAL, SMALLER, S_EQUAL,
         AND, OR, INCREMENT, DECREMENT, C_SUM, C_REST, C_MULTIPLY, C_DIV,
         IF, ELSE, FOR, WHILE, DO, SWITCH, CASE, BREAK, RETURN, IMPORT,
         OBJECT, FINAL, STATIC, VOID, CLASS, PACKAGE, NEW, DEFAULT;       

/* Non terminals */
non terminal initial, package_estructure, import_estructure, import_id_estructure, class_estructure,
             class_internal_estructure, declarated_variable_class_estructure, properties_variables,
             function_estructure, function_args_estructure, for_estructure, while_estructure, 
             do_while_estructure, switch_estructure, case_estructure, return_estructure, types_values_other,
             create_obj_estructure, new_estructure, args_estructure, if_estructure, if_else_estructure,
             declarated_variable_estructure, variable_values, number_operations, for_increment_in,
             inc_dec_estructure, logical_comparation, asign_values, types_values, types_values_switch,
             types_values_without, arithmetics_operations, increment_operators, logical_operations,
             all_estructures, internal_estructures, internal_return, internal_while, call_function_estructure,
             internal_switch, properties_function, internal_function, declarated_several_variables;

/* The Precedence rules*/
precedence left SUM, REST, RETURN;
precedence left MULTIPLY, DIV;

start with initial;

/* The grammar rules */
initial::= package_estructure import_estructure class_estructure
         | import_estructure class_estructure
         | class_estructure
         ;

package_estructure::= PACKAGE ID SEMICOLON;

import_estructure::= IMPORT import_id_estructure SEMICOLON
                   | IMPORT import_id_estructure SEMICOLON import_estructure
                   ;

import_id_estructure::= ID
                      | ID DOT MULTIPLY
                      | ID import_id_estructure
                      ;

class_estructure::= VISIBILITY CLASS ID O_BRACE class_internal_estructure C_BRACE
                  | CLASS ID O_BRACE class_internal_estructure C_BRACE
                  ;

class_internal_estructure::= declarated_variable_class_estructure class_internal_estructure
                           | function_estructure class_internal_estructure
                           |
                           ;

declarated_variable_class_estructure::= properties_variables TYPE_VARIABLE declarated_several_variables SEMICOLON
                                      | VISIBILITY TYPE_VARIABLE declarated_several_variables SEMICOLON
                                      | TYPE_VARIABLE declarated_several_variables SEMICOLON
                                      | ID asign_values variable_values SEMICOLON
                                      ;

declarated_several_variables::= ID 
                              | ID EQUAL variable_values
                              | ID COMMA declarated_several_variables
                              | ID EQUAL variable_values COMMA declarated_several_variables
                              ;

properties_variables::= VISIBILITY STATIC FINAL
                      | VISIBILITY FINAL STATIC
                      | FINAL STATIC
                      | STATIC FINAL
                      | STATIC
                      | FINAL
                      ;

function_estructure::= properties_function ID O_PARENT internal_function C_BRACE
                     | VISIBILITY TYPE_VARIABLE ID O_PARENT internal_function C_BRACE
                     | TYPE_VARIABLE ID O_PARENT internal_function C_BRACE
                     ;

internal_function::= C_PARENT O_BRACE
                   | function_args_estructure C_PARENT O_BRACE
                   | C_PARENT O_BRACE internal_estructures
                   | function_args_estructure C_PARENT O_BRACE internal_estructures
                   |
                   ; 

properties_function::= VISIBILITY VOID 
                     | VISIBILITY STATIC VOID
                     | VISIBILITY STATIC TYPE_VARIABLE
                     ;

/*All estructures for internal estructure*/
internal_estructures::= all_estructures
                      | all_estructures internal_estructures
                      | error all_estructures
                      ;

all_estructures::= declarated_variable_estructure
                 | for_estructure
                 | while_estructure
                 | do_while_estructure
                 | switch_estructure
                 | case_estructure
                 | if_estructure
                 | if_else_estructure
                 | inc_dec_estructure
                 | return_estructure
                 | call_function_estructure
                 ;

/*parameters for declarated functions*/
function_args_estructure::= TYPE_VARIABLE ID
                          | TYPE_VARIABLE ID COMMA function_args_estructure
                          ;

/*All declarations for loops*/
for_estructure::= FOR O_PARENT declarated_variable_estructure SEMICOLON logical_comparation SEMICOLON for_increment_in C_PARENT O_BRACE internal_estructures C_BRACE;

while_estructure::= WHILE O_PARENT internal_while C_PARENT O_BRACE internal_estructures C_BRACE
                  | WHILE O_PARENT internal_while C_PARENT O_BRACE C_BRACE
                  ;

internal_while::= logical_comparation 
                | BOOLEAN
                | ID
                ;

do_while_estructure::= DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT logical_comparation C_PARENT SEMICOLON
                     | DO O_BRACE internal_estructures C_BRACE WHILE O_PARENT BOOLEAN C_PARENT SEMICOLON
                     ;

switch_estructure::= SWITCH O_PARENT types_values_switch C_PARENT O_BRACE internal_switch C_BRACE
                   | SWITCH O_PARENT types_values_switch C_PARENT O_BRACE C_BRACE
                   ;

internal_switch::= case_estructure
                 | case_estructure internal_switch
                 ;                   

case_estructure::= CASE types_values_switch COLONS internal_estructures BREAK SEMICOLON
                 | CASE types_values_switch COLONS internal_estructures return_estructure
                 | DEFAULT COLONS internal_estructures BREAK SEMICOLON
                 | DEFAULT COLONS internal_estructures return_estructure
                 ;

/*Return declaration*/
return_estructure::= RETURN internal_return SEMICOLON;

internal_return::= ID
                 | types_values
                 | new_estructure
                 ;                   

/*All declarations for if*/
if_estructure::= IF O_PARENT logical_comparation C_PARENT O_BRACE internal_estructures C_BRACE
               | IF O_PARENT BOOLEAN C_PARENT O_BRACE internal_estructures C_BRACE
               | IF O_PARENT ID C_PARENT O_BRACE internal_estructures C_BRACE
               ;

if_else_estructure::= if_estructure ELSE if_estructure
                    | if_estructure ELSE O_BRACE internal_estructures C_BRACE
                    | if_estructure ELSE if_else_estructure
                    ;

/*Create new obj declaration*/
create_obj_estructure::= OBJECT ID EQUAL NEW OBJECT O_PARENT args_estructure C_PARENT SEMICOLON
                       | ID ID EQUAL NEW ID O_PARENT args_estructure C_PARENT SEMICOLON
                       | OBJECT ID EQUAL NEW OBJECT O_PARENT C_PARENT SEMICOLON
                       | ID ID EQUAL NEW ID O_PARENT C_PARENT SEMICOLON
                       ;

new_estructure::= NEW OBJECT O_PARENT args_estructure C_PARENT
                | NEW ID O_PARENT args_estructure C_PARENT
                ;

/*internal arguments for call functions*/
args_estructure::= new_estructure
                 | types_values
                 | ID
                 | new_estructure COMMA args_estructure
                 | types_values COMMA args_estructure
                 ;                                   

/*All declarations for intern structure*/
declarated_variable_estructure::= TYPE_VARIABLE declarated_several_variables SEMICOLON
                                | ID asign_values variable_values SEMICOLON
                                | create_obj_estructure
                                ;

/*Call other functions*/
call_function_estructure::= ID O_PARENT args_estructure C_PARENT SEMICOLON
                          | ID O_PARENT C_PARENT SEMICOLON
                          ;                           

variable_values::= types_values_other
                 | number_operations
                 | ID
                 | variable_values SUM variable_values
                 ;

number_operations::= INTEGER
                   | DECIMAL
                   | O_PARENT number_operations C_PARENT
                   | number_operations arithmetics_operations number_operations
                   ;

for_increment_in::= ID increment_operators
                  | ID asign_values variable_values
                  ;

inc_dec_estructure::= ID increment_operators SEMICOLON;

logical_comparation::= number_operations logical_operations number_operations
                     | types_values_without logical_operations types_values_without
                     | number_operations logical_operations logical_comparation
                     | types_values_without logical_operations logical_comparation
                     | types_values_without logical_operations number_operations
                     | O_PARENT logical_comparation C_PARENT
                     ; 

asign_values::= C_SUM           // +=
              | C_REST          // -=
              | C_MULTIPLY      // *=
              | C_DIV           // /=
              | EQUAL           // =
              ;

types_values::= STRING
              | DECIMAL
              | INTEGER
              | CHAR
              | BOOLEAN
              ;

types_values_other::= STRING
                    | CHAR
                    | BOOLEAN
                    ;

types_values_switch::= STRING
                     | INTEGER
                     | CHAR
                     | ID
                     ;

types_values_without::= CHAR
                      | BOOLEAN
                      | ID
                      ;                   

arithmetics_operations::= SUM           // +
                        | REST          // -
                        | DIV           // /
                        | MULTIPLY      // *
                        ;

increment_operators::= INCREMENT //++
                     | DECREMENT //--
                     ;

logical_operations::= D_EQUAL           // ==
                    | MOD               // %
                    | DIFFERENCE        // !=
                    | HIGHER            // >
                    | H_EQUAL           // >=
                    | SMALLER           // <
                    | S_EQUAL           // <=
                    | AND               // &&, &
                    | OR        
                    ;

                    