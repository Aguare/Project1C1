/* SECTION 1: user code */
package Analizers;

import java_cup.runtime.*;

parser code {:

        public Sintactic(Lexer lexer){
                super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        //addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                //addError(cur_token);
        }
    
:};

/* Terminals (tokens returned by the scanner). */
terminal Integer INT;
terminal Double DECIMAL;
terminal VISIBILITY, TYPE_VARIABLE, STRING, INTEGER, BOOLEAN, CHAR, ID, 
         O_BRACE, C_BRACE, O_SBRACKET, C_SBRACKET, O_PARENT, C_PARENT, 
         SEMICOLON, COLONS, COMMA, DOT, SUM, REST, MULTIPLY, DIV, D_EQUAL,
         MOD, DIFFERENCE, HIGHER, H_EQUAL, SMALLER, S_EQUAL, AND, OR, 
         INCREMENT, DECREMENT, C_SUM, C_REST, C_MULTIPLY, C_DIV, IF, 
         ELSE, FOR, WHILE, DO, SWITCH, CASE, BREAK, RETURN, IMPORT,
         OBJECT, FINAL, STATIC, VOID, CLASS, PACKAGE, NEW, OVERRIDE;

/* Non terminals */
non terminal initial, package_estructure, class_estructure;


/* The Precedence rules*/
precedence left SUM, REST;
precedence left MULTIPLY, DIV;

start with initial;

/* The grammar rules */
initial::= package_estructure class_estructure;

package_estructure::= PACKAGE ID;

class_estructure::= VISIBILITY CLASS ID O_BRACE C_BRACE
                  | CLASS ID O_BRACE C_BRACE
                  ;

