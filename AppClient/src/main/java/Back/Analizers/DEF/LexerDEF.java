/* The following code was generated by JFlex 1.7.0 */

/* SECTION 1: user code */
package Back.Analizers.DEF;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Back.Analizers.ErrorLP;

/* SECTION 2: config */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexerDEF.jflex</tt>
 */
public class LexerDEF implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    58, 58, 58, 58, 58, 58, 58, 58, 58,  9,  2, 42, 42,  2, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
     9, 58,  1, 58, 24, 58, 58, 58, 13, 14,  7, 21, 19, 22, 18,  6, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 17, 20,  5, 23,  8, 58, 
    58,  4,  4, 30,  4, 53, 46,  4,  4, 50,  4,  4, 55, 37, 43,  4, 
    48,  4, 52, 25, 44, 54, 34,  4,  4,  4,  4, 15, 58, 16, 58,  4, 
    58, 32, 36, 26, 39, 29, 56, 51, 57, 35,  4,  4, 31, 40, 41, 27, 
    45,  4, 28, 33, 38, 47,  4,  4, 49,  4,  4, 58,  4, 58, 58, 58, 
    58, 58, 58, 58, 58, 42, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
     9, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4, 11,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4, 12,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\11\4"+
    "\1\1\5\0\1\24\4\0\1\3\5\4\7\0\1\25"+
    "\13\4\12\0\5\4\1\26\10\0\1\1\11\4\1\27"+
    "\1\4\12\0\5\4\1\30\1\2\6\0\12\4\2\0"+
    "\1\31\4\0\1\31\2\0\2\4\1\31\2\4\2\0"+
    "\1\31\2\0\1\32\10\4\1\33\1\0\1\34\3\0"+
    "\1\34\2\0\1\4\1\34\2\4\1\0\1\34\2\0"+
    "\1\35\1\4\1\36\4\4\1\37\1\40\2\0\1\40"+
    "\2\0\1\40\2\4\1\40\2\0\3\4\1\41\1\42"+
    "\1\43\1\0\1\43\1\0\1\43\1\4\1\43\1\0"+
    "\2\4\1\44\2\0\1\4\1\0\1\4\1\45\2\0"+
    "\1\4\1\0\1\4\4\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\73"+
    "\0\73\0\73\0\u019d\0\u01d8\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\u0213"+
    "\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb"+
    "\0\u0426\0\73\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u0588\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0588\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u06ea"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u0fac\0\u0fac\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u0588\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u054d\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u06ea\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u0811\0\u1e6c\0\u1ea7\0\u06ea\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u06ea"+
    "\0\u20ba\0\u0588\0\u20f5\0\u2130\0\u216b\0\u054d\0\u21a6\0\u21e1"+
    "\0\u221c\0\u06ea\0\u2257\0\u2292\0\u22cd\0\u0811\0\u2308\0\u2343"+
    "\0\u06ea\0\u237e\0\u06ea\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u06ea"+
    "\0\u0588\0\u24a5\0\u24e0\0\u054d\0\u251b\0\u2556\0\u06ea\0\u2591"+
    "\0\u25cc\0\u0811\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u06ea"+
    "\0\u06ea\0\u0588\0\u272e\0\u054d\0\u2769\0\u06ea\0\u27a4\0\u0811"+
    "\0\u27df\0\u281a\0\u2855\0\u06ea\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u06ea\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u0588"+
    "\0\u054d\0\u06ea\0\u0811\0\u06ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\6\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\4\6\1\32\3\6\1\33\1\34\1\6\1\35"+
    "\4\6\1\4\7\6\1\36\1\6\1\37\3\6\1\40"+
    "\1\41\1\42\53\0\1\43\1\44\1\0\1\45\1\0"+
    "\1\46\12\0\1\47\1\50\1\0\50\47\1\51\1\52"+
    "\1\47\1\53\1\47\1\54\12\47\2\0\1\4\6\0"+
    "\1\4\40\0\1\4\23\0\1\55\1\56\6\0\2\56"+
    "\14\0\21\56\1\0\1\57\1\60\1\56\1\61\1\56"+
    "\1\62\11\56\4\0\2\56\6\0\2\56\14\0\21\56"+
    "\1\0\1\57\1\60\1\56\1\61\1\56\1\62\11\56"+
    "\4\0\2\63\1\0\1\64\4\0\2\63\14\0\21\63"+
    "\1\0\1\65\1\66\1\63\1\67\1\63\1\70\11\63"+
    "\3\0\1\4\6\0\1\4\40\0\1\4\1\43\1\44"+
    "\1\0\1\45\1\0\1\46\25\0\1\71\37\0\1\43"+
    "\1\44\1\0\1\45\1\0\1\46\42\0\1\72\22\0"+
    "\1\43\1\44\1\0\1\45\1\0\1\46\15\0\2\56"+
    "\6\0\2\56\14\0\1\56\1\73\13\56\1\74\3\56"+
    "\1\0\1\57\1\60\1\56\1\61\1\56\1\62\11\56"+
    "\4\0\2\56\6\0\2\56\14\0\2\56\1\75\3\56"+
    "\1\76\12\56\1\0\1\57\1\60\1\56\1\61\1\56"+
    "\1\62\11\56\4\0\2\56\6\0\2\56\14\0\7\56"+
    "\1\77\11\56\1\0\1\57\1\60\1\56\1\61\1\56"+
    "\1\62\11\56\4\0\2\56\6\0\2\56\14\0\15\56"+
    "\1\100\3\56\1\0\1\57\1\60\1\56\1\61\1\56"+
    "\1\62\11\56\4\0\2\56\6\0\2\56\14\0\4\56"+
    "\1\101\14\56\1\0\1\57\1\60\1\56\1\61\1\56"+
    "\1\62\11\56\4\0\2\56\6\0\2\56\14\0\20\56"+
    "\1\102\1\0\1\57\1\60\1\56\1\61\1\56\1\62"+
    "\11\56\4\0\2\56\6\0\2\56\14\0\21\56\1\0"+
    "\1\57\1\60\1\56\1\61\1\56\1\62\4\56\1\103"+
    "\4\56\4\0\2\56\6\0\2\56\14\0\2\56\1\104"+
    "\16\56\1\0\1\57\1\60\1\56\1\61\1\56\1\62"+
    "\11\56\4\0\2\56\6\0\2\56\14\0\7\56\1\105"+
    "\11\56\1\0\1\57\1\60\1\56\1\61\1\56\1\62"+
    "\11\56\34\0\1\106\74\0\1\107\5\0\1\110\106\0"+
    "\1\111\53\0\1\112\32\0\1\47\1\50\1\0\70\47"+
    "\73\0\1\47\1\50\1\0\30\47\1\113\40\47\1\50"+
    "\1\0\32\47\1\114\5\47\1\115\30\47\1\50\1\0"+
    "\54\47\1\116\14\47\1\50\1\0\35\47\1\117\32\47"+
    "\3\0\1\55\1\56\6\0\2\56\14\0\21\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\21\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\2\56\1\120"+
    "\16\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\4\56\1\121\5\56\1\122\6\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\21\56\1\0\4\56\1\123"+
    "\12\56\4\0\2\56\6\0\2\56\14\0\7\56\1\124"+
    "\11\56\1\0\17\56\4\0\2\63\3\0\1\125\2\0"+
    "\2\63\14\0\21\63\1\0\17\63\1\0\3\126\2\127"+
    "\1\0\1\130\4\126\2\127\14\126\21\127\1\126\17\127"+
    "\1\126\3\0\2\63\3\0\1\125\2\0\2\63\14\0"+
    "\2\63\1\131\16\63\1\0\17\63\4\0\2\63\3\0"+
    "\1\125\2\0\2\63\14\0\4\63\1\132\5\63\1\133"+
    "\6\63\1\0\17\63\4\0\2\63\3\0\1\125\2\0"+
    "\2\63\14\0\21\63\1\0\4\63\1\134\12\63\4\0"+
    "\2\63\3\0\1\125\2\0\2\63\14\0\7\63\1\135"+
    "\11\63\1\0\17\63\15\0\1\136\61\0\2\56\6\0"+
    "\2\56\14\0\2\56\1\137\16\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\3\56\1\140\15\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\17\56\1\141"+
    "\1\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\7\56\1\142\11\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\3\56\1\143\15\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\4\56\1\144\14\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\15\56\1\145"+
    "\3\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\15\56\1\146\3\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\1\147\20\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\3\56\1\150\15\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\10\56\1\151\10\56"+
    "\1\0\17\56\51\0\1\152\103\0\1\153\66\0\1\154"+
    "\66\0\1\155\55\0\1\156\36\0\1\47\1\50\1\0"+
    "\45\47\1\157\23\47\1\50\1\0\56\47\1\160\12\47"+
    "\1\50\1\0\52\47\1\161\16\47\1\50\1\0\46\47"+
    "\1\162\22\47\1\50\1\0\31\47\1\163\36\47\3\0"+
    "\2\56\6\0\2\56\14\0\17\56\1\164\1\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\21\56\1\0"+
    "\6\56\1\165\10\56\4\0\2\56\6\0\2\56\14\0"+
    "\21\56\1\0\2\56\1\166\14\56\4\0\2\56\6\0"+
    "\2\56\14\0\20\56\1\167\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\3\56\1\170\15\56\1\0\17\56"+
    "\1\0\5\126\1\0\1\130\67\126\2\127\1\0\1\130"+
    "\1\126\1\171\2\126\2\127\14\126\21\127\1\126\17\127"+
    "\6\126\1\0\1\130\1\126\1\172\62\126\3\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\17\63\1\173\1\63"+
    "\1\0\17\63\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\21\63\1\0\6\63\1\174\10\63\4\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\21\63\1\0\2\63"+
    "\1\175\14\63\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\20\63\1\176\1\0\17\63\4\0\2\63\3\0"+
    "\1\125\2\0\2\63\14\0\3\63\1\177\15\63\1\0"+
    "\17\63\13\0\1\200\63\0\2\56\6\0\2\56\14\0"+
    "\3\56\1\201\15\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\12\56\1\202\6\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\4\56\1\203\14\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\10\56\1\204"+
    "\10\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\12\56\1\205\6\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\3\56\1\206\15\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\2\56\1\207\16\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\4\56\1\210"+
    "\14\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\21\56\1\0\13\56\1\211\3\56\4\0\2\56\6\0"+
    "\2\56\14\0\15\56\1\212\3\56\1\0\17\56\45\0"+
    "\1\213\74\0\1\214\57\0\1\215\71\0\1\216\100\0"+
    "\1\217\32\0\1\47\1\50\1\0\41\47\1\220\27\47"+
    "\1\50\1\0\43\47\1\221\25\47\1\50\1\0\30\47"+
    "\1\222\40\47\1\50\1\0\27\47\1\223\41\47\1\50"+
    "\1\0\35\47\1\224\32\47\3\0\2\56\6\0\2\56"+
    "\14\0\13\56\1\225\5\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\15\56\1\226\3\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\2\56\1\227\16\56"+
    "\1\0\17\56\4\0\2\56\6\0\2\56\14\0\1\56"+
    "\1\230\17\56\1\0\17\56\4\0\2\56\6\0\2\56"+
    "\14\0\7\56\1\231\11\56\1\0\17\56\4\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\13\63\1\232\5\63"+
    "\1\0\17\63\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\15\63\1\233\3\63\1\0\17\63\4\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\2\63\1\234\16\63"+
    "\1\0\17\63\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\1\63\1\235\17\63\1\0\17\63\4\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\7\63\1\236\11\63"+
    "\1\0\17\63\14\0\1\71\62\0\2\56\6\0\2\56"+
    "\14\0\4\56\1\237\14\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\20\56\1\240\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\20\56\1\241\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\4\56\1\242\14\56"+
    "\1\0\17\56\4\0\2\56\6\0\2\56\14\0\7\56"+
    "\1\243\11\56\1\0\17\56\4\0\2\56\6\0\2\56"+
    "\14\0\7\56\1\244\11\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\16\56\1\245\2\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\21\56\1\0\10\56"+
    "\1\246\6\56\4\0\2\56\6\0\2\56\14\0\21\56"+
    "\1\0\14\56\1\247\2\56\4\0\2\56\6\0\2\56"+
    "\14\0\7\56\1\250\11\56\1\0\17\56\35\0\1\251"+
    "\71\0\1\252\102\0\1\253\77\0\1\254\22\0\1\47"+
    "\1\50\1\0\31\47\1\255\37\47\1\50\1\0\30\47"+
    "\1\256\40\47\1\50\1\0\40\47\1\257\30\47\1\50"+
    "\1\0\45\47\1\260\22\47\3\0\2\56\6\0\2\56"+
    "\14\0\3\56\1\261\15\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\2\56\1\262\16\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\12\56\1\263\6\56"+
    "\1\0\17\56\4\0\2\56\6\0\2\56\14\0\17\56"+
    "\1\264\1\56\1\0\17\56\4\0\2\63\3\0\1\125"+
    "\2\0\2\63\14\0\3\63\1\265\15\63\1\0\17\63"+
    "\4\0\2\63\3\0\1\125\2\0\2\63\14\0\2\63"+
    "\1\266\16\63\1\0\17\63\4\0\2\63\3\0\1\125"+
    "\2\0\2\63\14\0\12\63\1\267\6\63\1\0\17\63"+
    "\4\0\2\63\3\0\1\125\2\0\2\63\14\0\17\63"+
    "\1\270\1\63\1\0\17\63\4\0\2\56\6\0\2\56"+
    "\14\0\21\56\1\0\10\56\1\271\6\56\4\0\2\56"+
    "\6\0\2\56\14\0\15\56\1\272\3\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\10\56\1\273\10\56"+
    "\1\0\17\56\4\0\2\56\6\0\2\56\14\0\13\56"+
    "\1\274\5\56\1\0\17\56\4\0\2\56\6\0\2\56"+
    "\14\0\16\56\1\275\2\56\1\0\17\56\4\0\2\56"+
    "\6\0\2\56\14\0\2\56\1\276\16\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\4\56\1\277\14\56"+
    "\1\0\17\56\4\0\2\56\6\0\2\56\14\0\21\56"+
    "\1\0\1\56\1\300\15\56\36\0\1\301\70\0\1\302"+
    "\74\0\1\303\35\0\1\47\1\50\1\0\32\47\1\304"+
    "\36\47\1\50\1\0\30\47\1\305\40\47\1\50\1\0"+
    "\32\47\1\306\35\47\3\0\2\56\6\0\2\56\14\0"+
    "\4\56\1\307\14\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\2\56\1\310\16\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\4\56\1\311\14\56\1\0"+
    "\17\56\4\0\2\63\3\0\1\125\2\0\2\63\14\0"+
    "\4\63\1\312\14\63\1\0\17\63\4\0\2\63\3\0"+
    "\1\125\2\0\2\63\14\0\2\63\1\313\16\63\1\0"+
    "\17\63\4\0\2\63\3\0\1\125\2\0\2\63\14\0"+
    "\4\63\1\314\14\63\1\0\17\63\4\0\2\56\6\0"+
    "\2\56\14\0\7\56\1\315\11\56\1\0\17\56\4\0"+
    "\2\56\6\0\2\56\14\0\6\56\1\316\12\56\1\0"+
    "\17\56\4\0\2\56\6\0\2\56\14\0\2\56\1\317"+
    "\16\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\10\56\1\320\10\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\3\56\1\321\15\56\1\0\17\56\52\0"+
    "\1\322\67\0\1\323\24\0\1\47\1\50\1\0\46\47"+
    "\1\324\22\47\1\50\1\0\43\47\1\325\24\47\3\0"+
    "\2\56\6\0\2\56\14\0\20\56\1\326\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\15\56\1\327\3\56"+
    "\1\0\17\56\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\20\63\1\330\1\0\17\63\4\0\2\63\3\0"+
    "\1\125\2\0\2\63\14\0\15\63\1\331\3\63\1\0"+
    "\17\63\4\0\2\56\6\0\2\56\14\0\3\56\1\332"+
    "\15\56\1\0\17\56\4\0\2\56\6\0\2\56\14\0"+
    "\4\56\1\333\14\56\1\0\17\56\4\0\2\56\6\0"+
    "\2\56\14\0\3\56\1\334\15\56\1\0\17\56\35\0"+
    "\1\335\36\0\1\47\1\50\1\0\31\47\1\336\36\47"+
    "\3\0\2\56\6\0\2\56\14\0\3\56\1\337\15\56"+
    "\1\0\17\56\4\0\2\63\3\0\1\125\2\0\2\63"+
    "\14\0\3\63\1\340\15\63\1\0\17\63\4\0\2\56"+
    "\6\0\2\56\14\0\12\56\1\341\6\56\1\0\17\56"+
    "\4\0\2\56\6\0\2\56\14\0\10\56\1\342\10\56"+
    "\1\0\17\56\34\0\1\343\37\0\1\47\1\50\1\0"+
    "\30\47\1\344\37\47\3\0\2\56\6\0\2\56\14\0"+
    "\2\56\1\345\16\56\1\0\17\56\4\0\2\63\3\0"+
    "\1\125\2\0\2\63\14\0\2\63\1\346\16\63\1\0"+
    "\17\63\4\0\2\56\6\0\2\56\14\0\2\56\1\347"+
    "\16\56\1\0\17\56\42\0\1\350\31\0\1\47\1\50"+
    "\1\0\36\47\1\351\31\47\3\0\2\56\6\0\2\56"+
    "\14\0\10\56\1\352\10\56\1\0\17\56\4\0\2\63"+
    "\3\0\1\125\2\0\2\63\14\0\10\63\1\353\10\63"+
    "\1\0\17\63\4\0\2\56\6\0\2\56\14\0\10\56"+
    "\1\354\10\56\1\0\17\56\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\11\1\1\0\26\1\5\0\1\11\4\0\6\1"+
    "\7\0\1\11\13\1\12\0\5\1\1\11\10\0\14\1"+
    "\12\0\7\1\6\0\12\1\2\0\1\11\4\0\1\1"+
    "\2\0\5\1\2\0\1\1\2\0\12\1\1\0\1\11"+
    "\3\0\1\1\2\0\4\1\1\0\1\1\2\0\10\1"+
    "\1\11\2\0\1\1\2\0\4\1\2\0\5\1\1\11"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\2\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\1\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ArrayList<ErrorLP> errors = new ArrayList<>();

    public void viewSymbol(int sym, int line, int column, String value) {
        System.out.println("L: " + line + " C: " + column + " Tipo:" + symDEF.terminalNames[sym] + "\t Content: " + value);
    }

    public void addError(String lexema, int line, int column){
        errors.add(new ErrorLP(line, column, lexema, 0, "El símbolo no se reconoce "));
    }

    public ArrayList<ErrorLP> getErrors(){
        return errors;
    }

    public Symbol getSymbol(String text, int line, int column, boolean isClose){
        int type = 0;
        text = text.replaceAll("<|>|/", "");
        switch(text.toLowerCase()){
            case "h1":
                type = isClose ? symDEF.C_H1 : symDEF.O_H1;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "h2":
                type = isClose ? symDEF.C_H2 : symDEF.O_H2;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "html":
                type = isClose ? symDEF.C_HTML : symDEF.O_HTML;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "table":
                type = isClose ? symDEF.C_TABLE : symDEF.O_TABLE;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "tr":
                type = isClose ? symDEF.C_TR : symDEF.O_TR;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "td":
                type = isClose ? symDEF.C_TD : symDEF.O_TD;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "th":
                type = isClose ? symDEF.C_TH : symDEF.O_TH;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            case "br":
                return new Symbol(symDEF.BR, yyline+1, yycolumn+1, yytext());
            case "for":
                type = isClose ? symDEF.FOR_C : symDEF.FOR;
                return new Symbol(type, yyline+1, yycolumn+1, yytext());
            default:
                errors.add(new ErrorLP(line, column, text, 0, "No corresponde a una etiqueta HTML"));
                return new Symbol(symDEF.UNDEFINED, yyline+1, yycolumn+1, yytext());
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerDEF(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symDEF.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 40: break;
          case 2: 
            { /*Ignore*/
            } 
            // fall through
          case 41: break;
          case 3: 
            { return new Symbol(symDEF.INTEGER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 42: break;
          case 4: 
            { return new Symbol(symDEF.ID, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 43: break;
          case 5: 
            { return new Symbol(symDEF.SMALLER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 44: break;
          case 6: 
            { return new Symbol(symDEF.DIV, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 45: break;
          case 7: 
            { return new Symbol(symDEF.MULTIPLY, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 46: break;
          case 8: 
            { return new Symbol(symDEF.HIGHER, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 47: break;
          case 9: 
            { return new Symbol(symDEF.O_PARENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 48: break;
          case 10: 
            { return new Symbol(symDEF.C_PARENT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 49: break;
          case 11: 
            { return new Symbol(symDEF.O_SBRACKET, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 50: break;
          case 12: 
            { return new Symbol(symDEF.C_SBRACKET, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 51: break;
          case 13: 
            { return new Symbol(symDEF.COLONS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 52: break;
          case 14: 
            { return new Symbol(symDEF.DOT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 53: break;
          case 15: 
            { return new Symbol(symDEF.COMMA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 54: break;
          case 16: 
            { return new Symbol(symDEF.SEMICOLON, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 55: break;
          case 17: 
            { return new Symbol(symDEF.SUM, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 56: break;
          case 18: 
            { return new Symbol(symDEF.REST, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 57: break;
          case 19: 
            { return new Symbol(symDEF.EQUAL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 58: break;
          case 20: 
            { return new Symbol(symDEF.STRING, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 59: break;
          case 21: 
            { return new Symbol(symDEF.D_DOLLAR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 60: break;
          case 22: 
            { return getSymbol(yytext(), yyline+1, yycolumn+1, false);
            } 
            // fall through
          case 61: break;
          case 23: 
            { return new Symbol(symDEF.FOR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 62: break;
          case 24: 
            { return getSymbol(yytext(), yyline+1, yycolumn+1, true);
            } 
            // fall through
          case 63: break;
          case 25: 
            { return new Symbol(symDEF.TYPE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 64: break;
          case 26: 
            { return new Symbol(symDEF.SCORE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 65: break;
          case 27: 
            { return new Symbol(symDEF.UNTIL, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 66: break;
          case 28: 
            { return new Symbol(symDEF.TEXT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 67: break;
          case 29: 
            { return new Symbol(symDEF.T_STRING, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 68: break;
          case 30: 
            { return new Symbol(symDEF.CLASSES, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 69: break;
          case 31: 
            { return new Symbol(symDEF.T_RESULT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 70: break;
          case 32: 
            { return new Symbol(symDEF.NAME, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 71: break;
          case 33: 
            { return new Symbol(symDEF.METHODS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 72: break;
          case 34: 
            { return new Symbol(symDEF.T_INT, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 73: break;
          case 35: 
            { return new Symbol(symDEF.FUNCTION, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 74: break;
          case 36: 
            { return new Symbol(symDEF.ITERATOR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 75: break;
          case 37: 
            { return new Symbol(symDEF.VARIABLES, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 76: break;
          case 38: 
            { return new Symbol(symDEF.PARAMETERS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 77: break;
          case 39: 
            { return new Symbol(symDEF.COMMENTS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
