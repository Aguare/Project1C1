
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Back.Analizers.DEF;

import java_cup.runtime.*;
import java.util.ArrayList;
import Back.Analizers.ErrorLP;
import Back.Analizers.RecordJSON;
import Back.Sintactic.SymbolTable;
import Back.Sintactic.Variable;
import Back.Sintactic.TypeVar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticDEF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDEF.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticDEF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticDEF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticDEF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\006\000\002\010\007\000\002\011" +
    "\003\000\002\011\006\000\002\011\007\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\006\000\002\013\007\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\007\000\002\016\005\000\002\016\006" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\007\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\021" +
    "\003\000\002\021\005\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\004\003\000\002\004\003\000\002\023\005\000\002" +
    "\024\014\000\002\025\003\000\002\025\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\045\003\000" +
    "\002\045\003\000\002\026\005\000\002\027\003\000\002" +
    "\027\004\000\002\027\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\007\000\002\031\007\000\002\032\005\000" +
    "\002\032\004\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\034\005\000\002\034" +
    "\004\000\002\035\005\000\002\035\004\000\002\036\005" +
    "\000\002\036\004\000\002\037\003\000\002\037\003\000" +
    "\002\037\004\000\002\037\004\000\002\040\005\000\002" +
    "\040\004\000\002\041\005\000\002\041\004\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\043\003\000\002" +
    "\043\004\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\012\003\006\036\012\037\011\062\004\001" +
    "\002\000\004\020\250\001\002\000\004\002\247\001\002" +
    "\000\010\036\012\037\011\062\004\001\002\000\014\003" +
    "\006\036\012\037\011\040\uffff\062\004\001\002\000\004" +
    "\062\214\001\002\000\004\062\uffd0\001\002\000\004\062" +
    "\uffd1\001\002\000\004\040\015\001\002\000\004\002\000" +
    "\001\002\000\016\003\026\021\016\042\031\044\027\046" +
    "\024\056\023\001\002\000\004\057\203\001\002\000\016" +
    "\021\016\042\031\044\027\046\024\050\144\056\175\001" +
    "\002\000\020\003\uffbd\021\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\046\uffbd\056\uffbd\001\002\000\020\003\uffbe\021\uffbe\041" +
    "\uffbe\042\uffbe\044\uffbe\046\uffbe\056\uffbe\001\002\000\020" +
    "\003\uffbf\021\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf\056" +
    "\uffbf\001\002\000\020\003\uffbb\021\uffbb\041\uffbb\042\uffbb" +
    "\044\uffbb\046\uffbb\056\uffbb\001\002\000\010\021\016\047" +
    "\142\050\144\001\002\000\020\003\uffbc\021\uffbc\041\uffbc" +
    "\042\uffbc\044\uffbc\046\uffbc\056\uffbc\001\002\000\014\021" +
    "\016\042\031\044\027\046\024\056\023\001\002\000\030" +
    "\012\034\013\047\020\041\023\050\042\031\044\027\045" +
    "\136\056\043\062\045\063\042\065\046\001\002\000\020" +
    "\003\026\021\016\041\uffc2\042\031\044\027\046\024\056" +
    "\023\001\002\000\030\012\034\013\047\020\041\023\050" +
    "\042\031\043\052\044\027\056\043\062\045\063\042\065" +
    "\046\001\002\000\004\041\033\001\002\000\004\002\uffc3" +
    "\001\002\000\026\012\uff94\013\uff94\020\uff94\043\uff94\045" +
    "\uff94\053\uff94\055\uff94\062\uff94\063\uff94\065\uff94\001\002" +
    "\000\012\043\uffa0\045\uffa0\053\uffa0\055\uffa0\001\002\000" +
    "\036\012\034\013\047\020\041\023\050\042\031\043\uffa1" +
    "\044\027\045\uffa1\053\uffa1\055\uffa1\056\043\062\045\063" +
    "\042\065\046\001\002\000\036\012\034\013\047\020\041" +
    "\023\050\042\031\043\uffa4\044\027\045\uffa4\053\uffa4\055" +
    "\uffa4\056\043\062\045\063\042\065\046\001\002\000\036" +
    "\012\034\013\047\020\041\023\050\042\031\043\uffa2\044" +
    "\027\045\uffa2\053\uffa2\055\uffa2\056\043\062\045\063\042" +
    "\065\046\001\002\000\026\012\uff96\013\uff96\020\uff96\043" +
    "\uff96\045\uff96\053\uff96\055\uff96\062\uff96\063\uff96\065\uff96" +
    "\001\002\000\026\012\uff97\013\uff97\020\uff97\043\uff97\045" +
    "\uff97\053\uff97\055\uff97\062\uff97\063\uff97\065\uff97\001\002" +
    "\000\036\012\034\013\047\020\041\023\050\042\031\043" +
    "\uffa3\044\027\045\uffa3\053\uffa3\055\uffa3\056\043\062\045" +
    "\063\042\065\046\001\002\000\026\012\034\013\047\020" +
    "\041\043\uff9b\045\uff9b\053\uff9b\055\uff9b\062\045\063\042" +
    "\065\046\001\002\000\026\012\uff99\013\uff99\020\uff99\043" +
    "\uff99\045\uff99\053\uff99\055\uff99\062\uff99\063\uff99\065\uff99" +
    "\001\002\000\026\012\uff95\013\uff95\020\uff95\043\uff95\045" +
    "\uff95\053\uff95\055\uff95\062\uff95\063\uff95\065\uff95\001\002" +
    "\000\026\012\uff98\013\uff98\020\uff98\043\uff98\045\uff98\053" +
    "\uff98\055\uff98\062\uff98\063\uff98\065\uff98\001\002\000\004" +
    "\004\054\001\002\000\004\043\053\001\002\000\052\003" +
    "\uffb1\012\uffb1\013\uffb1\020\uffb1\021\uffb1\023\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\053" +
    "\uffb1\055\uffb1\056\uffb1\060\uffb1\062\uffb1\063\uffb1\065\uffb1" +
    "\001\002\000\052\003\uffb2\012\uffb2\013\uffb2\020\uffb2\021" +
    "\uffb2\023\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\050\uffb2\053\uffb2\055\uffb2\056\uffb2\060\uffb2\062" +
    "\uffb2\063\uffb2\065\uffb2\001\002\000\006\062\055\064\056" +
    "\001\002\000\004\005\126\001\002\000\004\011\062\001" +
    "\002\000\004\005\060\001\002\000\004\023\061\001\002" +
    "\000\036\012\uffb9\013\uffb9\020\uffb9\023\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\053\uffb9\055\uffb9\056\uffb9\062\uffb9" +
    "\063\uffb9\065\uffb9\001\002\000\014\024\073\025\071\026" +
    "\064\027\067\030\074\001\002\000\012\005\ufffa\013\ufffa" +
    "\014\ufffa\065\ufffa\001\002\000\014\005\ufff2\006\117\013" +
    "\ufff2\014\ufff2\065\ufff2\001\002\000\012\005\ufff9\013\ufff9" +
    "\014\ufff9\065\ufff9\001\002\000\012\005\ufffc\013\ufffc\014" +
    "\ufffc\065\ufffc\001\002\000\014\005\uffec\006\110\013\uffec" +
    "\014\uffec\065\uffec\001\002\000\012\005\ufff8\013\ufff8\014" +
    "\ufff8\065\ufff8\001\002\000\014\005\ufff5\006\104\013\ufff5" +
    "\014\ufff5\065\ufff5\001\002\000\012\005\ufffb\013\ufffb\014" +
    "\ufffb\065\ufffb\001\002\000\012\005\ufff6\013\ufff6\014\ufff6" +
    "\065\ufff6\001\002\000\014\005\uffe6\006\076\013\uffe6\014" +
    "\uffe6\065\uffe6\001\002\000\012\005\ufff7\013\ufff7\014\ufff7" +
    "\065\ufff7\001\002\000\006\012\100\062\077\001\002\000" +
    "\006\007\uffc4\013\uffc4\001\002\000\006\007\uffc5\013\uffc5" +
    "\001\002\000\004\007\102\001\002\000\014\005\uffe5\013" +
    "\uffe5\014\uffe5\035\103\065\uffe5\001\002\000\012\005\uffe4" +
    "\013\uffe4\014\uffe4\065\uffe4\001\002\000\006\012\100\062" +
    "\077\001\002\000\004\007\106\001\002\000\014\005\ufff4" +
    "\013\ufff4\014\ufff4\031\107\065\ufff4\001\002\000\012\005" +
    "\ufff3\013\ufff3\014\ufff3\065\ufff3\001\002\000\006\012\100" +
    "\062\077\001\002\000\004\007\112\001\002\000\020\005" +
    "\uffeb\013\uffeb\014\uffeb\031\114\032\116\034\115\065\uffeb" +
    "\001\002\000\012\005\uffea\013\uffea\014\uffea\065\uffea\001" +
    "\002\000\012\005\uffe9\013\uffe9\014\uffe9\065\uffe9\001\002" +
    "\000\012\005\uffe7\013\uffe7\014\uffe7\065\uffe7\001\002\000" +
    "\012\005\uffe8\013\uffe8\014\uffe8\065\uffe8\001\002\000\006" +
    "\012\100\062\077\001\002\000\004\007\121\001\002\000" +
    "\020\005\ufff1\013\ufff1\014\ufff1\031\123\032\125\033\124" +
    "\065\ufff1\001\002\000\012\005\ufff0\013\ufff0\014\ufff0\065" +
    "\ufff0\001\002\000\012\005\uffef\013\uffef\014\uffef\065\uffef" +
    "\001\002\000\012\005\uffed\013\uffed\014\uffed\065\uffed\001" +
    "\002\000\012\005\uffee\013\uffee\014\uffee\065\uffee\001\002" +
    "\000\004\023\127\001\002\000\036\012\uffba\013\uffba\020" +
    "\uffba\023\uffba\042\uffba\043\uffba\044\uffba\045\uffba\053\uffba" +
    "\055\uffba\056\uffba\062\uffba\063\uffba\065\uffba\001\002\000" +
    "\012\043\uff9a\045\uff9a\053\uff9a\055\uff9a\001\002\000\012" +
    "\043\uff9f\045\uff9f\053\uff9f\055\uff9f\001\002\000\012\043" +
    "\uff9e\045\uff9e\053\uff9e\055\uff9e\001\002\000\012\043\uff9c" +
    "\045\uff9c\053\uff9c\055\uff9c\001\002\000\012\043\uff9d\045" +
    "\uff9d\053\uff9d\055\uff9d\001\002\000\004\041\uffc1\001\002" +
    "\000\052\003\uffaf\012\uffaf\013\uffaf\020\uffaf\021\uffaf\023" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\050\uffaf\053\uffaf\055\uffaf\056\uffaf\060\uffaf\062\uffaf\063" +
    "\uffaf\065\uffaf\001\002\000\004\045\140\001\002\000\052" +
    "\003\uffb0\012\uffb0\013\uffb0\020\uffb0\021\uffb0\023\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0" +
    "\053\uffb0\055\uffb0\056\uffb0\060\uffb0\062\uffb0\063\uffb0\065" +
    "\uffb0\001\002\000\004\041\uffc0\001\002\000\024\003\uffb7" +
    "\021\uffb7\041\uffb7\042\uffb7\044\uffb7\046\uffb7\050\uffb7\056" +
    "\uffb7\060\uffb7\001\002\000\010\021\016\047\uffb5\050\144" +
    "\001\002\000\010\051\155\052\156\054\153\001\002\000" +
    "\010\021\016\047\uffb6\050\144\001\002\000\004\047\147" +
    "\001\002\000\024\003\uffb8\021\uffb8\041\uffb8\042\uffb8\044" +
    "\uffb8\046\uffb8\050\uffb8\056\uffb8\060\uffb8\001\002\000\004" +
    "\047\uffb3\001\002\000\010\051\uffab\052\156\054\153\001" +
    "\002\000\004\051\166\001\002\000\030\012\034\013\047" +
    "\020\041\023\050\042\031\044\027\055\163\056\043\062" +
    "\045\063\042\065\046\001\002\000\010\051\uffac\052\156" +
    "\054\153\001\002\000\022\021\uffad\042\uffad\044\uffad\046" +
    "\uffad\047\uffad\050\uffad\056\uffad\060\uffad\001\002\000\030" +
    "\012\034\013\047\020\041\023\050\042\031\044\027\053" +
    "\160\056\043\062\045\063\042\065\046\001\002\000\004" +
    "\053\161\001\002\000\010\051\uffa5\052\uffa5\054\uffa5\001" +
    "\002\000\010\051\uffa6\052\uffa6\054\uffa6\001\002\000\004" +
    "\051\uffaa\001\002\000\010\051\uffa7\052\uffa7\054\uffa7\001" +
    "\002\000\004\055\165\001\002\000\010\051\uffa8\052\uffa8" +
    "\054\uffa8\001\002\000\022\021\uffae\042\uffae\044\uffae\046" +
    "\uffae\047\uffae\050\uffae\056\uffae\060\uffae\001\002\000\004" +
    "\051\uffa9\001\002\000\004\047\uffb4\001\002\000\020\021" +
    "\uffc6\042\uffc6\044\uffc6\046\uffc6\050\uffc6\056\uffc6\060\uffc6" +
    "\001\002\000\020\021\uffc9\042\uffc9\044\uffc9\046\uffc9\050" +
    "\uffc9\056\uffc9\060\uffc9\001\002\000\020\021\uffca\042\uffca" +
    "\044\uffca\046\uffca\050\uffca\056\uffca\060\uffca\001\002\000" +
    "\020\021\uffcb\042\uffcb\044\uffcb\046\uffcb\050\uffcb\056\uffcb" +
    "\060\uffcb\001\002\000\020\021\uffc7\042\uffc7\044\uffc7\046" +
    "\uffc7\050\uffc7\056\uffc7\060\uffc7\001\002\000\020\021\016" +
    "\042\031\044\027\046\024\050\144\056\175\060\uffcd\001" +
    "\002\000\020\021\uffc8\042\uffc8\044\uffc8\046\uffc8\050\uffc8" +
    "\056\uffc8\060\uffc8\001\002\000\004\060\201\001\002\000" +
    "\026\003\uffcf\021\uffcf\041\uffcf\042\uffcf\044\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\056\uffcf\060\uffcf\001\002\000\004\060" +
    "\uffcc\001\002\000\004\066\204\001\002\000\004\010\205" +
    "\001\002\000\004\062\206\001\002\000\004\061\207\001" +
    "\002\000\004\010\210\001\002\000\006\012\100\062\077" +
    "\001\002\000\004\013\212\001\002\000\004\022\213\001" +
    "\002\000\016\021\uffce\042\uffce\044\uffce\046\uffce\050\uffce" +
    "\056\uffce\001\002\000\010\013\uffe1\020\220\065\217\001" +
    "\002\000\004\013\216\001\002\000\014\003\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\062\uffe3\001\002\000\004\062\214\001" +
    "\002\000\014\004\223\012\221\062\222\063\224\064\056" +
    "\001\002\000\020\005\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\065\uffd8\001\002\000\010\013\uffdd\014\uffdd" +
    "\065\uffdd\001\002\000\006\004\223\012\221\001\002\000" +
    "\010\013\uffdb\014\uffdb\065\uffdb\001\002\000\010\013\uffe0" +
    "\014\237\065\236\001\002\000\016\013\uffdc\014\230\015" +
    "\234\016\233\017\231\065\uffdc\001\002\000\010\013\uffda" +
    "\014\uffda\065\uffda\001\002\000\006\004\uffd5\012\uffd5\001" +
    "\002\000\006\004\uffd2\012\uffd2\001\002\000\006\004\223" +
    "\012\221\001\002\000\006\004\uffd3\012\uffd3\001\002\000" +
    "\006\004\uffd4\012\uffd4\001\002\000\020\005\uffd6\013\uffd6" +
    "\014\230\015\234\016\233\017\231\065\uffd6\001\002\000" +
    "\004\062\214\001\002\000\014\004\223\012\221\062\222" +
    "\063\224\064\056\001\002\000\010\013\uffd9\014\uffd9\065" +
    "\uffd9\001\002\000\004\013\uffde\001\002\000\014\005\243" +
    "\014\230\015\234\016\233\017\231\001\002\000\020\005" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\065\uffd7" +
    "\001\002\000\004\013\uffdf\001\002\000\004\040\ufffe\001" +
    "\002\000\004\040\ufffd\001\002\000\004\002\001\001\002" +
    "\000\014\004\223\012\221\062\222\063\224\064\056\001" +
    "\002\000\006\013\252\014\237\001\002\000\014\003\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\062\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\012\002\004\003\012\004\007\016\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\007" +
    "\016\245\001\001\000\010\003\244\004\007\016\006\001" +
    "\001\000\004\017\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\013\001\001\000\002\001\001\000" +
    "\020\023\024\024\016\027\031\030\027\032\021\034\020" +
    "\035\017\001\001\000\002\001\001\000\022\023\176\024" +
    "\016\025\177\032\173\034\172\035\171\036\170\046\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\142\024\016\033\145" +
    "\036\144\001\001\000\002\001\001\000\016\023\024\024" +
    "\016\030\140\032\021\034\020\035\017\001\001\000\016" +
    "\031\036\034\037\035\035\042\136\043\034\044\043\001" +
    "\001\000\020\023\024\024\016\027\134\030\027\032\021" +
    "\034\020\035\017\001\001\000\016\031\036\034\037\035" +
    "\035\042\050\043\034\044\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\036\034\037\035\035\042\133\043\034\044\043" +
    "\001\001\000\016\031\036\034\037\035\035\042\132\043" +
    "\034\044\043\001\001\000\016\031\036\034\037\035\035" +
    "\042\131\043\034\044\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\036\034\037\035\035\042\130" +
    "\043\034\044\043\001\001\000\006\043\127\044\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\065\007\071\010\062\011\064" +
    "\013\067\015\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\110\001\001\000\002\001\001" +
    "\000\004\014\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\117" +
    "\001\001\000\002\001\001\000\004\012\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\142\024\016\033\167\036\144\001" +
    "\001\000\010\037\151\040\150\041\153\001\001\000\012" +
    "\023\142\024\016\033\147\036\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\166" +
    "\040\150\041\153\001\001\000\002\001\001\000\016\031" +
    "\036\034\037\035\035\042\163\043\034\044\043\001\001" +
    "\000\010\037\161\040\150\041\153\001\001\000\002\001" +
    "\001\000\016\031\036\034\037\035\035\042\156\043\034" +
    "\044\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\176\024\016\025\201\032\173\034\172\035\171" +
    "\036\170\046\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\243\001\001" +
    "\000\010\005\226\020\224\021\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\231\001\001\000\004\017\240\001\001\000\010" +
    "\005\226\020\237\021\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\226\020\250\021\225\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticDEF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticDEF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticDEF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();
        private SymbolTable table;
        private ArrayList<Variable> vars = new ArrayList<>();

        public SintacticDEF(LexerDEF lexer, RecordJSON json) {
                super(lexer);
                table = new SymbolTable(json);
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != symDEF.EOF){
                        addError(cur_token);
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "No se esperaba el simbolo"));
                        for (Integer i : expected_token_ids()) {
                                System.out.println("Se esperaba -> "+symDEF.terminalNames[i]);
                        }
                printStack();
                } catch (Exception e) {
                }
        }

        public ArrayList<ErrorLP> getErrors(){
                errors.addAll(table.getErrors());
                return errors;
        }

        public void registerVars(String type, int line, int column) {
                for (Variable v : vars) {
                        table.declaratedVar(v.getId(), v.getValue(), type, line, column);
                }
                vars.clear();
        }

        public void printStack(){
            for (Object o : stack) {
                if (o instanceof Symbol) {
                    if (((Symbol) o).value != null) {
                        System.out.println("L: " + ((Symbol) o).left + " C: " + ((Symbol) o).right + " Tipo:" + symDEF.terminalNames[((Symbol) o).sym] + "\t Content: " + ((Symbol) o).value.toString());
                    }
                }
            }
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticDEF$actions {
  private final SintacticDEF parser;

  /** Constructor */
  CUP$SintacticDEF$actions(SintacticDEF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticDEF$do_action_part00000000(
    int                        CUP$SintacticDEF$act_num,
    java_cup.runtime.lr_parser CUP$SintacticDEF$parser,
    java.util.Stack            CUP$SintacticDEF$stack,
    int                        CUP$SintacticDEF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticDEF$result;

      /* select the action based on the action number */
      switch (CUP$SintacticDEF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;
		RESULT = start_val;
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticDEF$parser.done_parsing();
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= var_decla_estructure initial_html 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var_decla_estructure ::= declaration_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_decla_estructure",1, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_decla_estructure ::= declaration_var var_decla_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_decla_estructure",1, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_decla_estructure ::= error declaration_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_decla_estructure",1, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // result_estructure ::= T_RESULT DOT all_result_estructure 
            {
              Object RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(end);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("result_estructure",3, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // all_result_estructure ::= score_estructure 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object score = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=score.toString();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // all_result_estructure ::= classes_estructure 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=name.toString();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // all_result_estructure ::= variables_estructure 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=var.toString();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // all_result_estructure ::= methods_estructure 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=me.toString();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // all_result_estructure ::= comments_estructure 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=com.toString();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // score_estructure ::= SCORE 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object score = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = table.getScore();
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("score_estructure",5, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classes_estructure ::= CLASSES 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classes_estructure ::= CLASSES O_SBRACKET integer_or_id C_SBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classes_estructure ::= CLASSES O_SBRACKET integer_or_id C_SBRACKET NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		RESULT = table.getClass(n.toString(), nleft, nright);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_estructure ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_estructure ::= VARIABLES O_SBRACKET integer_or_id C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables_estructure ::= VARIABLES O_SBRACKET integer_or_id C_SBRACKET var_option_string 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = table.getVar(n.toString(), nleft, nright).getAttibute(op.toString());
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_option_string ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(name);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_option_string ::= TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_option_string ::= FUNCTION 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(function);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // methods_estructure ::= METHODS 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // methods_estructure ::= METHODS O_SBRACKET integer_or_id C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methods_estructure ::= METHODS O_SBRACKET integer_or_id C_SBRACKET method_option_var 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = table.getMethod(n.toString(), nleft, nright).getAttibute(op.toString());
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_option_var ::= NAME 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(name);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_option_var ::= TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_option_var ::= PARAMETERS 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(param);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comments_estructure ::= COMMENTS 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comments_estructure ::= COMMENTS O_SBRACKET integer_or_id C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comments_estructure ::= COMMENTS O_SBRACKET integer_or_id C_SBRACKET TEXT 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_var ::= types_var multiple_statements_var SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		registerVars(String.valueOf(type), typeleft, typeright);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("declaration_var",12, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_var ::= ID EQUAL var_values SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;
		table.asignValue(String.valueOf(id), String.valueOf(value), idleft, idright);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("declaration_var",12, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multiple_statements_var ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		vars.add(new Variable(TypeVar.UNDEFINED, "", String.valueOf(id)));
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // multiple_statements_var ::= ID EQUAL var_values 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		vars.add(new Variable(TypeVar.UNDEFINED, String.valueOf(value), String.valueOf(id)));
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiple_statements_var ::= ID COMMA multiple_statements_var 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		vars.add(new Variable(TypeVar.UNDEFINED, "", String.valueOf(id)));
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multiple_statements_var ::= ID EQUAL var_values COMMA multiple_statements_var 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		vars.add(new Variable(TypeVar.UNDEFINED, String.valueOf(value), String.valueOf(id)));
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_values ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=table.getValueVar(String.valueOf(id), idleft, idright);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_values ::= number_operations 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=String.valueOf(number);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_values ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=String.valueOf(string);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_values ::= result_estructure 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=String.valueOf(result);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_values ::= var_values SUM var_values 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=String.valueOf(v1)+String.valueOf(v2);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // number_operations ::= INTEGER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=Integer.valueOf(number.toString());
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // number_operations ::= O_PARENT number_operations C_PARENT 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;
		RESULT=Integer.valueOf(number.toString());
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // number_operations ::= number_operations arithmetics_operations number_operations 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		
                                                                                                String opera = String.valueOf(op);
                                                                                                int n11 = Integer.valueOf(n1.toString());
                                                                                                int n22 = Integer.valueOf(n2.toString());
                                                                                                switch(opera){
                                                                                                        case "SUM":
                                                                                                                RESULT = n11 + n22;
                                                                                                                break;
                                                                                                        case "REST":
                                                                                                                RESULT = n11 - n22;
                                                                                                                break;
                                                                                                        case "MULTIPLY":
                                                                                                                RESULT = n11 * n22;
                                                                                                                break;
                                                                                                        case "DIV":
                                                                                                                RESULT = (int)(n11 / n22);
                                                                                                                break;
                                                                                                        default:
                                                                                                                errors.add(new ErrorLP(n1left, n1right, "", 3, "Operador no soportado"));
                                                                                                                break;
                                                                                                }
                                                                                           
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithmetics_operations ::= SUM 
            {
              Object RESULT =null;
		RESULT="SUM";
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithmetics_operations ::= REST 
            {
              Object RESULT =null;
		RESULT="REST";
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithmetics_operations ::= MULTIPLY 
            {
              Object RESULT =null;
		RESULT="MULTIPLY";
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmetics_operations ::= DIV 
            {
              Object RESULT =null;
		RESULT="DIV";
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // types_var ::= T_INT 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("types_var",2, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // types_var ::= T_STRING 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("types_var",2, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_estructure ::= for_open internal_for FOR_C 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("for_estructure",17, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // for_open ::= SMALLER FOR ITERATOR COLONS ID UNTIL COLONS integer_or_id SEMICOLON HIGHER 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("for_open",18, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // internal_for ::= internal_for_es 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for",19, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // internal_for ::= internal_for_es internal_for 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for",19, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // internal_for_es ::= table_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // internal_for_es ::= h1_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // internal_for_es ::= h2_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // internal_for_es ::= for_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // internal_for_es ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // internal_for_es ::= tr_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for_es",36, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // integer_or_id ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=Integer.valueOf(n.toString());
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("integer_or_id",35, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // integer_or_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.peek()).value;
		RESULT=table.getValueVar(String.valueOf(id), idleft, idright);
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("integer_or_id",35, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // initial_html ::= O_HTML all_estructures C_HTML 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("initial_html",20, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // all_estructures ::= all_html_structure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_estructures",21, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // all_estructures ::= all_html_structure all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_estructures",21, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // all_estructures ::= error all_html_structure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_estructures",21, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // all_html_structure ::= table_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // all_html_structure ::= h1_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // all_html_structure ::= h2_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // all_html_structure ::= for_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // all_html_structure ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // call_internal_var ::= D_DOLLAR O_PARENT ID C_PARENT D_DOLLAR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("call_internal_var",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // call_internal_var ::= D_DOLLAR O_PARENT result_estructure C_PARENT D_DOLLAR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("call_internal_var",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // table_estructure ::= O_TABLE internal_table C_TABLE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("table_estructure",24, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // table_estructure ::= O_TABLE C_TABLE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("table_estructure",24, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // internal_table ::= tr_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // internal_table ::= for_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // internal_table ::= for_estructure internal_table 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // internal_table ::= tr_estructure internal_table 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // h1_estructure ::= O_H1 internal_content C_H1 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h1_estructure",26, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // h1_estructure ::= O_H1 C_H1 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h1_estructure",26, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // h2_estructure ::= O_H2 internal_content C_H2 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h2_estructure",27, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // h2_estructure ::= O_H2 C_H2 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h2_estructure",27, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tr_estructure ::= O_TR internal_tr C_TR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("tr_estructure",28, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tr_estructure ::= O_TR C_TR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("tr_estructure",28, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // internal_tr ::= td_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // internal_tr ::= th_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // internal_tr ::= td_estructure internal_tr 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // internal_tr ::= th_estructure internal_tr 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // th_estructure ::= O_TH internal_content C_TH 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("th_estructure",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // th_estructure ::= O_TH C_TH 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("th_estructure",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // td_estructure ::= O_TD internal_content C_TD 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("td_estructure",31, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // td_estructure ::= O_TD C_TD 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("td_estructure",31, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // internal_content ::= call_internal_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // internal_content ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // internal_content ::= h1_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // internal_content ::= h2_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // internal_content ::= internal_tag 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // internal_content ::= BR internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // internal_content ::= h1_estructure internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // internal_content ::= h2_estructure internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // internal_content ::= call_internal_var internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // internal_tag ::= internal_string 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tag",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // internal_tag ::= internal_string internal_tag 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tag",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // internal_string ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // internal_string ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // internal_string ::= STRING 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // internal_string ::= EQUAL 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // internal_string ::= COMMA 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // internal_string ::= INTEGER 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_string",34, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticDEF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticDEF$do_action(
    int                        CUP$SintacticDEF$act_num,
    java_cup.runtime.lr_parser CUP$SintacticDEF$parser,
    java.util.Stack            CUP$SintacticDEF$stack,
    int                        CUP$SintacticDEF$top)
    throws java.lang.Exception
    {
              return CUP$SintacticDEF$do_action_part00000000(
                               CUP$SintacticDEF$act_num,
                               CUP$SintacticDEF$parser,
                               CUP$SintacticDEF$stack,
                               CUP$SintacticDEF$top);
    }
}

}
