
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Back.Analizers.DEF;

import java_cup.runtime.*;
import java.util.ArrayList;
import Back.Analizers.ErrorLP;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticDEF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDEF.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticDEF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticDEF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticDEF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\005\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\010\003\000\002" +
    "\010\006\000\002\010\010\000\002\011\003\000\002\011" +
    "\006\000\002\011\010\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\006\000" +
    "\002\013\010\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\006\000\002\015" +
    "\010\000\002\016\005\000\002\016\006\000\002\017\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\007\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\005\000\002\021\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\004\003\000" +
    "\002\004\003\000\002\023\005\000\002\024\014\000\002" +
    "\025\003\000\002\026\006\000\002\027\005\000\002\030" +
    "\003\000\002\030\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\007\000\002\032\007\000\002\033\005\000\002" +
    "\033\004\000\002\034\003\000\002\034\004\000\002\035" +
    "\005\000\002\035\004\000\002\036\005\000\002\036\004" +
    "\000\002\037\005\000\002\037\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\004\000\002" +
    "\041\005\000\002\041\004\000\002\042\005\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\036\011\037\010\061\004\001\002\000" +
    "\004\020\230\001\002\000\004\002\227\001\002\000\012" +
    "\036\011\037\010\040\uffff\061\004\001\002\000\004\061" +
    "\175\001\002\000\004\061\uffd1\001\002\000\004\061\uffd2" +
    "\001\002\000\004\040\014\001\002\000\004\002\000\001" +
    "\002\000\014\021\015\042\027\044\025\046\023\056\022" +
    "\001\002\000\004\057\164\001\002\000\014\021\015\042" +
    "\027\044\025\046\023\056\022\001\002\000\016\021\uffc7" +
    "\041\uffc7\042\uffc7\044\uffc7\046\uffc7\056\uffc7\001\002\000" +
    "\016\021\uffc8\041\uffc8\042\uffc8\044\uffc8\046\uffc8\056\uffc8" +
    "\001\002\000\016\021\uffc9\041\uffc9\042\uffc9\044\uffc9\046" +
    "\uffc9\056\uffc9\001\002\000\016\021\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\046\uffc5\056\uffc5\001\002\000\006\047\130\050" +
    "\131\001\002\000\016\021\uffc6\041\uffc6\042\uffc6\044\uffc6" +
    "\046\uffc6\056\uffc6\001\002\000\014\023\036\042\027\044" +
    "\025\045\125\056\035\001\002\000\016\021\015\041\uffcb" +
    "\042\027\044\025\046\023\056\022\001\002\000\014\023" +
    "\036\042\027\043\037\044\025\056\035\001\002\000\004" +
    "\041\031\001\002\000\004\002\uffcc\001\002\000\022\023" +
    "\036\042\027\043\uffad\044\025\045\uffad\053\uffad\055\uffad" +
    "\056\035\001\002\000\022\023\036\042\027\043\uffb0\044" +
    "\025\045\uffb0\053\uffb0\055\uffb0\056\035\001\002\000\022" +
    "\023\036\042\027\043\uffae\044\025\045\uffae\053\uffae\055" +
    "\uffae\056\035\001\002\000\022\023\036\042\027\043\uffaf" +
    "\044\025\045\uffaf\053\uffaf\055\uffaf\056\035\001\002\000" +
    "\004\005\042\001\002\000\030\021\uffbd\023\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\053\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\004\043\041\001\002\000\030" +
    "\021\uffbe\023\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\053\uffbe\055\uffbe\056\uffbe\001\002\000\006" +
    "\061\043\063\044\001\002\000\004\006\116\001\002\000" +
    "\004\012\050\001\002\000\004\006\046\001\002\000\004" +
    "\023\047\001\002\000\022\023\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\053\uffc3\055\uffc3\056\uffc3\001\002\000\014" +
    "\024\061\025\056\026\052\027\055\030\062\001\002\000" +
    "\012\006\ufffb\013\ufffb\014\ufffb\064\ufffb\001\002\000\014" +
    "\006\ufff3\007\106\013\ufff3\014\ufff3\064\ufff3\001\002\000" +
    "\012\006\ufffa\013\ufffa\014\ufffa\064\ufffa\001\002\000\012" +
    "\006\ufffd\013\ufffd\014\ufffd\064\ufffd\001\002\000\014\006" +
    "\uffed\007\076\013\uffed\014\uffed\064\uffed\001\002\000\014" +
    "\006\ufff6\007\071\013\ufff6\014\ufff6\064\ufff6\001\002\000" +
    "\012\006\ufff9\013\ufff9\014\ufff9\064\ufff9\001\002\000\012" +
    "\006\ufffc\013\ufffc\014\ufffc\064\ufffc\001\002\000\012\006" +
    "\ufff7\013\ufff7\014\ufff7\064\ufff7\001\002\000\014\006\uffe7" +
    "\007\064\013\uffe7\014\uffe7\064\uffe7\001\002\000\012\006" +
    "\ufff8\013\ufff8\014\ufff8\064\ufff8\001\002\000\004\004\065" +
    "\001\002\000\004\010\066\001\002\000\014\006\uffe6\012" +
    "\067\013\uffe6\014\uffe6\064\uffe6\001\002\000\004\035\070" +
    "\001\002\000\012\006\uffe5\013\uffe5\014\uffe5\064\uffe5\001" +
    "\002\000\004\004\072\001\002\000\004\010\073\001\002" +
    "\000\014\006\ufff5\012\074\013\ufff5\014\ufff5\064\ufff5\001" +
    "\002\000\004\031\075\001\002\000\012\006\ufff4\013\ufff4" +
    "\014\ufff4\064\ufff4\001\002\000\004\004\077\001\002\000" +
    "\004\010\100\001\002\000\014\006\uffec\012\101\013\uffec" +
    "\014\uffec\064\uffec\001\002\000\010\031\103\032\105\034" +
    "\104\001\002\000\012\006\uffeb\013\uffeb\014\uffeb\064\uffeb" +
    "\001\002\000\012\006\uffea\013\uffea\014\uffea\064\uffea\001" +
    "\002\000\012\006\uffe8\013\uffe8\014\uffe8\064\uffe8\001\002" +
    "\000\012\006\uffe9\013\uffe9\014\uffe9\064\uffe9\001\002\000" +
    "\004\004\107\001\002\000\004\010\110\001\002\000\014" +
    "\006\ufff2\012\111\013\ufff2\014\ufff2\064\ufff2\001\002\000" +
    "\010\031\112\032\115\033\114\001\002\000\012\006\ufff0" +
    "\013\ufff0\014\ufff0\064\ufff0\001\002\000\012\006\ufff1\013" +
    "\ufff1\014\ufff1\064\ufff1\001\002\000\012\006\uffee\013\uffee" +
    "\014\uffee\064\uffee\001\002\000\012\006\uffef\013\uffef\014" +
    "\uffef\064\uffef\001\002\000\004\023\117\001\002\000\022" +
    "\023\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\053\uffc4\055" +
    "\uffc4\056\uffc4\001\002\000\012\043\uffac\045\uffac\053\uffac" +
    "\055\uffac\001\002\000\012\043\uffab\045\uffab\053\uffab\055" +
    "\uffab\001\002\000\012\043\uffa9\045\uffa9\053\uffa9\055\uffa9" +
    "\001\002\000\012\043\uffaa\045\uffaa\053\uffaa\055\uffaa\001" +
    "\002\000\006\021\uffca\041\uffca\001\002\000\030\021\uffbb" +
    "\023\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\053\uffbb\055\uffbb\056\uffbb\001\002\000\004\045\127" +
    "\001\002\000\030\021\uffbc\023\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\053\uffbc\055\uffbc\056\uffbc" +
    "\001\002\000\016\021\uffc1\041\uffc1\042\uffc1\044\uffc1\046" +
    "\uffc1\056\uffc1\001\002\000\010\051\142\052\143\054\140" +
    "\001\002\000\004\047\135\001\002\000\006\047\uffc0\050" +
    "\131\001\002\000\004\047\uffbf\001\002\000\016\021\uffc2" +
    "\041\uffc2\042\uffc2\044\uffc2\046\uffc2\056\uffc2\001\002\000" +
    "\010\051\uffb7\052\143\054\140\001\002\000\004\051\153" +
    "\001\002\000\014\023\036\042\027\044\025\055\150\056" +
    "\035\001\002\000\010\051\uffb8\052\143\054\140\001\002" +
    "\000\006\047\uffb9\050\uffb9\001\002\000\014\023\036\042" +
    "\027\044\025\053\145\056\035\001\002\000\004\053\146" +
    "\001\002\000\010\051\uffb1\052\uffb1\054\uffb1\001\002\000" +
    "\010\051\uffb2\052\uffb2\054\uffb2\001\002\000\004\051\uffb6" +
    "\001\002\000\010\051\uffb3\052\uffb3\054\uffb3\001\002\000" +
    "\004\055\152\001\002\000\010\051\uffb4\052\uffb4\054\uffb4" +
    "\001\002\000\006\047\uffba\050\uffba\001\002\000\004\051" +
    "\uffb5\001\002\000\004\021\160\001\002\000\004\021\uffce" +
    "\001\002\000\016\021\uffd0\041\uffd0\042\uffd0\044\uffd0\046" +
    "\uffd0\056\uffd0\001\002\000\004\017\161\001\002\000\004" +
    "\057\162\001\002\000\004\022\163\001\002\000\016\021" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\046\uffcd\056\uffcd\001\002" +
    "\000\004\065\165\001\002\000\004\011\166\001\002\000" +
    "\004\061\167\001\002\000\004\060\170\001\002\000\004" +
    "\011\171\001\002\000\004\004\172\001\002\000\004\013" +
    "\173\001\002\000\004\022\174\001\002\000\014\021\uffcf" +
    "\042\uffcf\044\uffcf\046\uffcf\056\uffcf\001\002\000\010\013" +
    "\uffe2\020\201\064\200\001\002\000\004\013\177\001\002" +
    "\000\012\036\uffe4\037\uffe4\040\uffe4\061\uffe4\001\002\000" +
    "\004\061\175\001\002\000\014\004\204\005\203\061\202" +
    "\062\205\063\044\001\002\000\010\013\uffde\014\uffde\064" +
    "\uffde\001\002\000\006\004\204\005\203\001\002\000\020" +
    "\006\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\064" +
    "\uffd9\001\002\000\010\013\uffdc\014\uffdc\064\uffdc\001\002" +
    "\000\010\013\uffe1\014\220\064\217\001\002\000\016\013" +
    "\uffdd\014\211\015\215\016\214\017\212\064\uffdd\001\002" +
    "\000\010\013\uffdb\014\uffdb\064\uffdb\001\002\000\006\004" +
    "\uffd6\005\uffd6\001\002\000\006\004\uffd3\005\uffd3\001\002" +
    "\000\006\004\204\005\203\001\002\000\006\004\uffd4\005" +
    "\uffd4\001\002\000\006\004\uffd5\005\uffd5\001\002\000\020" +
    "\006\uffd7\013\uffd7\014\211\015\215\016\214\017\212\064" +
    "\uffd7\001\002\000\004\061\175\001\002\000\014\004\204" +
    "\005\203\061\202\062\205\063\044\001\002\000\010\013" +
    "\uffda\014\uffda\064\uffda\001\002\000\004\013\uffdf\001\002" +
    "\000\014\006\224\014\211\015\215\016\214\017\212\001" +
    "\002\000\020\006\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\064\uffd8\001\002\000\004\013\uffe0\001\002\000" +
    "\004\040\ufffe\001\002\000\004\002\001\001\002\000\014" +
    "\004\204\005\203\061\202\062\205\063\044\001\002\000" +
    "\006\013\232\014\220\001\002\000\012\036\uffe3\037\uffe3" +
    "\040\uffe3\061\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\012\002\004\003\011\004\006\016\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\225" +
    "\004\006\016\005\001\001\000\004\017\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\012\001\001" +
    "\000\002\001\001\000\020\023\023\024\015\030\027\031" +
    "\025\033\020\035\017\036\016\001\001\000\002\001\001" +
    "\000\022\023\023\024\015\025\154\030\155\031\025\033" +
    "\020\035\017\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\131\037\132\001\001\000\002\001\001\000\012\032\032" +
    "\035\033\036\031\043\125\001\001\000\020\023\023\024" +
    "\015\030\123\031\025\033\020\035\017\036\016\001\001" +
    "\000\012\032\032\035\033\036\031\043\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\032\035\033" +
    "\036\031\043\122\001\001\000\012\032\032\035\033\036" +
    "\031\043\121\001\001\000\012\032\032\035\033\036\031" +
    "\043\120\001\001\000\012\032\032\035\033\036\031\043" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\053\007\057\010" +
    "\050\011\052\013\056\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\136\041\135\042\140\001\001\000\002\001\001\000\006" +
    "\034\133\037\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\153\041\135\042\140\001\001\000\002" +
    "\001\001\000\012\032\032\035\033\036\031\043\150\001" +
    "\001\000\010\040\146\041\135\042\140\001\001\000\002" +
    "\001\001\000\012\032\032\035\033\036\031\043\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\224\001\001\000\010\005\207\020\205\021\206\001" +
    "\001\000\002\001\001\000\004\021\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\212\001\001\000\004\017\221" +
    "\001\001\000\010\005\207\020\220\021\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\207\020\230\021\206\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticDEF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticDEF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticDEF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();

        public SintacticDEF(LexerDEF lexer) {
                super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != symDEF.EOF){
                        addError(cur_token);
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "No se esperaba el simbolo"));
                } catch (Exception e) {
                }
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticDEF$actions {
  private final SintacticDEF parser;

  /** Constructor */
  CUP$SintacticDEF$actions(SintacticDEF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticDEF$do_action_part00000000(
    int                        CUP$SintacticDEF$act_num,
    java_cup.runtime.lr_parser CUP$SintacticDEF$parser,
    java.util.Stack            CUP$SintacticDEF$stack,
    int                        CUP$SintacticDEF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticDEF$result;

      /* select the action based on the action number */
      switch (CUP$SintacticDEF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)).value;
		RESULT = start_val;
              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticDEF$parser.done_parsing();
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= var_decla_estructure initial_html 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var_decla_estructure ::= declaration_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_decla_estructure",1, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_decla_estructure ::= declaration_var var_decla_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_decla_estructure",1, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // result_estructure ::= T_RESULT DOT all_result_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("result_estructure",3, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // all_result_estructure ::= score_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // all_result_estructure ::= classes_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // all_result_estructure ::= variables_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // all_result_estructure ::= methods_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // all_result_estructure ::= comments_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_result_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // score_estructure ::= SCORE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("score_estructure",5, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classes_estructure ::= CLASSES 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classes_estructure ::= CLASSES O_SBRACKET INTEGER C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classes_estructure ::= CLASSES O_SBRACKET INTEGER C_SBRACKET DOT NAME 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("classes_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_estructure ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_estructure ::= VARIABLES O_SBRACKET INTEGER C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_estructure ::= VARIABLES O_SBRACKET INTEGER C_SBRACKET DOT var_option_string 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("variables_estructure",7, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_option_string ::= NAME 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_option_string ::= TYPE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_option_string ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_option_string",8, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methods_estructure ::= METHODS 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // methods_estructure ::= METHODS O_SBRACKET INTEGER C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // methods_estructure ::= METHODS O_SBRACKET INTEGER C_SBRACKET DOT method_option_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("methods_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_option_var ::= NAME 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_option_var ::= TYPE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_option_var ::= PARAMETERS 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("method_option_var",10, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comments_estructure ::= COMMENTS 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comments_estructure ::= COMMENTS O_SBRACKET INTEGER C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comments_estructure ::= COMMENTS O_SBRACKET INTEGER C_SBRACKET DOT TEXT 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("comments_estructure",11, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_var ::= types_var multiple_statements_var SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("declaration_var",12, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_var ::= ID EQUAL var_values SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("declaration_var",12, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // multiple_statements_var ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multiple_statements_var ::= ID EQUAL var_values 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // multiple_statements_var ::= ID COMMA multiple_statements_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiple_statements_var ::= ID EQUAL var_values COMMA multiple_statements_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("multiple_statements_var",13, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_values ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_values ::= number_operations 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_values ::= STRING 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_values ::= result_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_values ::= var_values SUM var_values 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("var_values",14, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // number_operations ::= INTEGER 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // number_operations ::= O_PARENT number_operations C_PARENT 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // number_operations ::= number_operations arithmetics_operations number_operations 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("number_operations",15, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithmetics_operations ::= SUM 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithmetics_operations ::= REST 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithmetics_operations ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithmetics_operations ::= DIV 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("arithmetics_operations",16, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // types_var ::= T_INT 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("types_var",2, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // types_var ::= T_STRING 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("types_var",2, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_estructure ::= for_open internal_for for_close 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("for_estructure",17, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_open ::= SMALLER FOR ITERATOR COLONS ID UNTIL COLONS INTEGER SEMICOLON HIGHER 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("for_open",18, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // internal_for ::= all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_for",19, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_close ::= SMALLER DIV FOR HIGHER 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("for_close",20, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // initial_html ::= O_HTML all_estructures C_HTML 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("initial_html",21, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // all_estructures ::= all_html_structure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_estructures",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // all_estructures ::= all_html_structure all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_estructures",22, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // all_html_structure ::= table_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // all_html_structure ::= h1_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_html_structure ::= h2_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_html_structure ::= for_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // all_html_structure ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("all_html_structure",23, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // call_internal_var ::= D_DOLLAR O_PARENT ID C_PARENT D_DOLLAR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("call_internal_var",24, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call_internal_var ::= D_DOLLAR O_PARENT result_estructure C_PARENT D_DOLLAR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("call_internal_var",24, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // table_estructure ::= O_TABLE internal_table C_TABLE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("table_estructure",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // table_estructure ::= O_TABLE C_TABLE 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("table_estructure",25, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // internal_table ::= tr_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",26, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // internal_table ::= tr_estructure internal_table 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_table",26, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // h1_estructure ::= O_H1 internal_content C_H1 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h1_estructure",27, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // h1_estructure ::= O_H1 C_H1 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h1_estructure",27, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // h2_estructure ::= O_H2 internal_content C_H2 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h2_estructure",28, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // h2_estructure ::= O_H2 C_H2 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("h2_estructure",28, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tr_estructure ::= O_TR internal_tr C_TR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("tr_estructure",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tr_estructure ::= O_TR C_TR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("tr_estructure",29, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // internal_tr ::= td_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // internal_tr ::= th_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // internal_tr ::= td_estructure internal_tr 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // internal_tr ::= th_estructure internal_tr 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_tr",30, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // th_estructure ::= O_TH internal_content C_TH 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("th_estructure",31, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // th_estructure ::= O_TH C_TH 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("th_estructure",31, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // td_estructure ::= O_TD internal_content C_TD 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("td_estructure",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // td_estructure ::= O_TD C_TD 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("td_estructure",32, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // internal_content ::= call_internal_var 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // internal_content ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // internal_content ::= h1_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // internal_content ::= h2_estructure 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // internal_content ::= BR internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // internal_content ::= h1_estructure internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // internal_content ::= h2_estructure internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // internal_content ::= call_internal_var internal_content 
            {
              Object RESULT =null;

              CUP$SintacticDEF$result = parser.getSymbolFactory().newSymbol("internal_content",33, ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.elementAt(CUP$SintacticDEF$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticDEF$stack.peek()), RESULT);
            }
          return CUP$SintacticDEF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticDEF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticDEF$do_action(
    int                        CUP$SintacticDEF$act_num,
    java_cup.runtime.lr_parser CUP$SintacticDEF$parser,
    java.util.Stack            CUP$SintacticDEF$stack,
    int                        CUP$SintacticDEF$top)
    throws java.lang.Exception
    {
              return CUP$SintacticDEF$do_action_part00000000(
                               CUP$SintacticDEF$act_num,
                               CUP$SintacticDEF$parser,
                               CUP$SintacticDEF$stack,
                               CUP$SintacticDEF$top);
    }
}

}
