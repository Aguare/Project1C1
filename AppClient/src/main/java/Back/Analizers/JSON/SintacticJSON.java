
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Back.Analizers.JSON;

import java_cup.runtime.*;
import java.util.ArrayList;
import Back.Analizers.ErrorLP;
import Back.Analizers.RecordJSON;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticJSON extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symJSON.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticJSON() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticJSON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticJSON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\006\007\000\002" +
    "\006\006\000\002\007\005\000\002\007\007\000\002\007" +
    "\004\000\002\010\007\000\002\010\006\000\002\011\003" +
    "\000\002\011\005\000\002\011\004\000\002\012\011\000" +
    "\002\013\007\000\002\013\006\000\002\014\003\000\002" +
    "\014\005\000\002\014\004\000\002\015\011\000\002\024" +
    "\007\000\002\024\006\000\002\017\005\000\002\017\007" +
    "\000\002\017\004\000\002\020\005\000\002\021\005\000" +
    "\002\022\005\000\002\023\005\000\002\016\005\000\002" +
    "\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\004\005\001\002\000\004\002\143\001" +
    "\002\000\016\003\013\012\014\013\007\014\012\015\022" +
    "\024\021\001\002\000\006\005\ufffb\011\ufffb\001\002\000" +
    "\004\010\117\001\002\000\006\005\ufffa\011\ufffa\001\002" +
    "\000\006\005\ufff8\011\ufff8\001\002\000\004\010\070\001" +
    "\002\000\014\012\014\013\007\014\012\015\022\024\021" +
    "\001\002\000\004\010\050\001\002\000\006\005\ufffc\011" +
    "\ufffc\001\002\000\004\005\047\001\002\000\006\005\ufff9" +
    "\011\ufff9\001\002\000\006\005\uffff\011\045\001\002\000" +
    "\004\010\043\001\002\000\004\010\023\001\002\000\004" +
    "\006\024\001\002\000\010\003\025\004\027\007\026\001" +
    "\002\000\006\003\025\004\027\001\002\000\006\005\uffe4" +
    "\011\uffe4\001\002\000\004\023\032\001\002\000\004\007" +
    "\031\001\002\000\006\005\uffe5\011\uffe5\001\002\000\004" +
    "\010\037\001\002\000\004\005\034\001\002\000\006\007" +
    "\uffe3\011\035\001\002\000\006\003\025\004\027\001\002" +
    "\000\004\007\uffe2\001\002\000\006\016\040\025\041\001" +
    "\002\000\004\005\uffdb\001\002\000\004\005\uffdc\001\002" +
    "\000\004\007\uffe1\001\002\000\004\016\044\001\002\000" +
    "\006\005\ufff7\011\ufff7\001\002\000\016\003\013\012\014" +
    "\013\007\014\012\015\022\024\021\001\002\000\004\005" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\006\051" +
    "\001\002\000\010\003\053\004\055\007\054\001\002\000" +
    "\004\007\066\001\002\000\006\003\053\004\055\001\002" +
    "\000\006\005\ufff5\011\ufff5\001\002\000\004\017\057\001" +
    "\002\000\004\005\062\001\002\000\004\010\060\001\002" +
    "\000\004\016\061\001\002\000\006\005\uffe0\011\uffe0\001" +
    "\002\000\006\007\ufff4\011\063\001\002\000\006\003\053" +
    "\004\055\001\002\000\004\007\ufff3\001\002\000\004\007" +
    "\ufff2\001\002\000\006\005\ufff6\011\ufff6\001\002\000\004" +
    "\005\ufffd\001\002\000\004\006\071\001\002\000\010\003" +
    "\073\004\075\007\074\001\002\000\004\007\116\001\002" +
    "\000\006\003\073\004\075\001\002\000\006\005\uffea\011" +
    "\uffea\001\002\000\004\017\057\001\002\000\006\007\uffe9" +
    "\011\077\001\002\000\006\003\073\004\075\001\002\000" +
    "\004\007\uffe8\001\002\000\004\011\102\001\002\000\004" +
    "\020\104\001\002\000\004\011\107\001\002\000\004\010" +
    "\105\001\002\000\004\016\106\001\002\000\004\011\uffdf" +
    "\001\002\000\004\022\111\001\002\000\004\005\114\001" +
    "\002\000\004\010\112\001\002\000\004\026\113\001\002" +
    "\000\004\005\uffde\001\002\000\006\007\uffe6\011\uffe6\001" +
    "\002\000\004\007\uffe7\001\002\000\006\005\uffeb\011\uffeb" +
    "\001\002\000\004\006\120\001\002\000\010\003\122\004" +
    "\124\007\123\001\002\000\004\007\142\001\002\000\006" +
    "\003\122\004\124\001\002\000\006\005\ufff0\011\ufff0\001" +
    "\002\000\004\017\057\001\002\000\006\007\uffef\011\126" +
    "\001\002\000\006\003\122\004\124\001\002\000\004\007" +
    "\uffee\001\002\000\004\011\131\001\002\000\004\020\104" +
    "\001\002\000\004\011\133\001\002\000\004\021\135\001" +
    "\002\000\004\005\140\001\002\000\004\010\136\001\002" +
    "\000\004\016\137\001\002\000\004\005\uffdd\001\002\000" +
    "\006\007\uffec\011\uffec\001\002\000\004\007\uffed\001\002" +
    "\000\006\005\ufff1\011\ufff1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\015\004\017\005\014\006\005\010\007\013\016" +
    "\024\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\066\005\014\006\005\010\007\013\016\024\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\027\001\001" +
    "\000\004\017\041\001\001\000\002\001\001\000\004\016" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\045\004\017\005\014" +
    "\006\005\010\007\013\016\024\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\051" +
    "\001\001\000\002\001\001\000\004\007\064\001\001\000" +
    "\002\001\001\000\004\020\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\071\015\075\001\001\000\002" +
    "\001\001\000\006\014\114\015\075\001\001\000\002\001" +
    "\001\000\004\020\100\001\001\000\002\001\001\000\006" +
    "\014\077\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\120" +
    "\012\124\001\001\000\002\001\001\000\006\011\140\012" +
    "\124\001\001\000\002\001\001\000\004\020\127\001\001" +
    "\000\002\001\001\000\006\011\126\012\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\004\023\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticJSON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticJSON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticJSON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();
        private RecordJSON record = new RecordJSON();

        public SintacticJSON(LexerJSON lexer) {
                super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != symJSON.EOF){
                        addError(cur_token);
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "No se esperaba el simbolo"));
                } catch (Exception e) {
                }
        }

        public ArrayList<ErrorLP> getErrors(){
                errors.addAll(record.getError());
                return errors;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticJSON$actions {
  private final SintacticJSON parser;

  /** Constructor */
  CUP$SintacticJSON$actions(SintacticJSON parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticJSON$do_action_part00000000(
    int                        CUP$SintacticJSON$act_num,
    java_cup.runtime.lr_parser CUP$SintacticJSON$parser,
    java.util.Stack            CUP$SintacticJSON$stack,
    int                        CUP$SintacticJSON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticJSON$result;

      /* select the action based on the action number */
      switch (CUP$SintacticJSON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).value;
		RESULT = start_val;
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticJSON$parser.done_parsing();
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= O_BRACE internal_json C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // internal_json ::= all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_json",1, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // internal_json ::= all_estructures COMMA internal_json 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_json",1, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // internal_json ::= error all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_json",1, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // all_estructures ::= score_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // all_estructures ::= classes_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // all_estructures ::= variables_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // all_estructures ::= method_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // all_estructures ::= comments_estructure_general 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // score_estructure ::= SCORE COLONS STRING 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object score = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		record.addScore(Double.parseDouble(String.valueOf(score).replaceAll("\"", "")));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("score_estructure",3, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classes_estructure ::= CLASSES COLONS O_SBRACKET internal_class C_SBRACKET 
            {
              Object RESULT =null;
		record.countCClass();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("classes_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classes_estructure ::= CLASSES COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;
		record.countCClass();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("classes_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // internal_class ::= O_BRACE name_estructure C_BRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).value;
		record.addClass(String.valueOf(name));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_class",5, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // internal_class ::= O_BRACE name_estructure C_BRACE COMMA internal_class 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).value;
		record.addClass(String.valueOf(name));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_class",5, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // internal_class ::= error internal_class 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_class",5, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables_estructure ::= VARIABLES COLONS O_SBRACKET internal_variable C_SBRACKET 
            {
              Object RESULT =null;
		record.countCVar();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variables_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables_estructure ::= VARIABLES COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;
		record.countCVar();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variables_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // internal_variable ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_variable",7, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // internal_variable ::= variable_declaration COMMA internal_variable 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_variable",7, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // internal_variable ::= error internal_variable 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_variable",7, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= O_BRACE name_estructure COMMA type_estructure COMMA functions_estructure C_BRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).value;
		record.addVar(String.valueOf(name), String.valueOf(type), String.valueOf(func));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variable_declaration",8, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_estructure ::= METHODS COLONS O_SBRACKET internal_method C_SBRACKET 
            {
              Object RESULT =null;
		record.countCMethod();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_estructure ::= METHODS COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;
		record.countCMethod();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // internal_method ::= method_declaration 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_method",10, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // internal_method ::= method_declaration COMMA internal_method 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_method",10, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // internal_method ::= error internal_method 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_method",10, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_declaration ::= O_BRACE name_estructure COMMA type_estructure COMMA parameters_estructure C_BRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)).value;
		int amountleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).right;
		Object amount = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).value;
		
                                                                                                                                if (amount != null){
                                                                                                                                        record.addMethod(String.valueOf(name), String.valueOf(type),Integer.parseInt(amount.toString()));
                                                                                                                                }else{
                                                                                                                                        errors.add(new ErrorLP(cur_token.left, cur_token.right, cur_token.value.toString(), 1, "Se esperaba un número entero"));
                                                                                                                                }
                                                                                                                        
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_declaration",11, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comments_estructure_general ::= COMMENTS COLONS O_SBRACKET internal_comment C_SBRACKET 
            {
              Object RESULT =null;
		record.countCComm();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure_general",18, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comments_estructure_general ::= COMMENTS COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;
		record.countCComm();
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure_general",18, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // internal_comment ::= O_BRACE comments_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_comment",13, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // internal_comment ::= O_BRACE comments_estructure C_BRACE COMMA internal_comment 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_comment",13, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // internal_comment ::= error internal_comment 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_comment",13, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // name_estructure ::= NAME COLONS STRING 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		RESULT = String.valueOf(name);
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("name_estructure",14, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_estructure ::= TYPE COLONS STRING 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		RESULT = String.valueOf(type);
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("type_estructure",15, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters_estructure ::= PARAMETERS COLONS INTEGER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		RESULT = Integer.valueOf(String.valueOf(c));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("parameters_estructure",16, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // functions_estructure ::= FUNCTION COLONS STRING 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		RESULT = String.valueOf(function);
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("functions_estructure",17, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comments_estructure ::= TEXT COLONS COM 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		record.addComment(String.valueOf(com));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure",12, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comments_estructure ::= TEXT COLONS STRING 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.peek()).value;
		record.addComment(String.valueOf(com));
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure",12, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticJSON$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticJSON$do_action(
    int                        CUP$SintacticJSON$act_num,
    java_cup.runtime.lr_parser CUP$SintacticJSON$parser,
    java.util.Stack            CUP$SintacticJSON$stack,
    int                        CUP$SintacticJSON$top)
    throws java.lang.Exception
    {
              return CUP$SintacticJSON$do_action_part00000000(
                               CUP$SintacticJSON$act_num,
                               CUP$SintacticJSON$parser,
                               CUP$SintacticJSON$stack,
                               CUP$SintacticJSON$top);
    }
}

}
