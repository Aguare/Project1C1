
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Back.Analizers.JSON;

import java_cup.runtime.*;
import java.util.ArrayList;
import Back.Analizers.ErrorLP;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticJSON extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symJSON.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticJSON() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticJSON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticJSON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\006\007\000\002\006\006\000\002" +
    "\007\005\000\002\007\007\000\002\010\007\000\002\010" +
    "\006\000\002\011\005\000\002\011\007\000\002\012\007" +
    "\000\002\013\007\000\002\013\006\000\002\014\005\000" +
    "\002\014\007\000\002\015\007\000\002\024\007\000\002" +
    "\024\006\000\002\017\005\000\002\017\007\000\002\020" +
    "\005\000\002\021\005\000\002\022\005\000\002\023\005" +
    "\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\005\005\001\002\000\004\002\130\001" +
    "\002\000\014\013\013\014\007\015\012\016\021\025\020" +
    "\001\002\000\006\006\ufffc\012\ufffc\001\002\000\004\011" +
    "\106\001\002\000\006\006\ufffb\012\ufffb\001\002\000\006" +
    "\006\ufff9\012\ufff9\001\002\000\004\011\061\001\002\000" +
    "\004\011\044\001\002\000\006\006\ufffd\012\ufffd\001\002" +
    "\000\004\006\043\001\002\000\006\006\ufffa\012\ufffa\001" +
    "\002\000\006\006\uffff\012\041\001\002\000\004\011\037" +
    "\001\002\000\004\011\022\001\002\000\004\007\023\001" +
    "\002\000\006\005\025\010\024\001\002\000\006\006\uffe8" +
    "\012\uffe8\001\002\000\004\024\030\001\002\000\004\010" +
    "\027\001\002\000\006\006\uffe9\012\uffe9\001\002\000\004" +
    "\011\035\001\002\000\004\006\032\001\002\000\006\010" +
    "\uffe7\012\033\001\002\000\004\005\025\001\002\000\004" +
    "\010\uffe6\001\002\000\004\026\036\001\002\000\004\006" +
    "\uffe1\001\002\000\004\017\040\001\002\000\006\006\ufff8" +
    "\012\ufff8\001\002\000\014\013\013\014\007\015\012\016" +
    "\021\025\020\001\002\000\004\006\ufffe\001\002\000\004" +
    "\002\000\001\002\000\004\007\045\001\002\000\006\005" +
    "\050\010\047\001\002\000\004\010\060\001\002\000\006" +
    "\006\ufff6\012\ufff6\001\002\000\004\020\052\001\002\000" +
    "\004\006\055\001\002\000\004\011\053\001\002\000\004" +
    "\017\054\001\002\000\006\006\uffe5\012\uffe5\001\002\000" +
    "\006\010\ufff5\012\056\001\002\000\004\005\050\001\002" +
    "\000\004\010\ufff4\001\002\000\006\006\ufff7\012\ufff7\001" +
    "\002\000\004\007\062\001\002\000\006\005\065\010\064" +
    "\001\002\000\004\010\105\001\002\000\006\006\uffed\012" +
    "\uffed\001\002\000\004\020\052\001\002\000\004\012\073" +
    "\001\002\000\004\006\070\001\002\000\006\010\uffec\012" +
    "\071\001\002\000\004\005\065\001\002\000\004\010\uffeb" +
    "\001\002\000\004\021\075\001\002\000\004\012\100\001" +
    "\002\000\004\011\076\001\002\000\004\017\077\001\002" +
    "\000\004\012\uffe4\001\002\000\004\023\102\001\002\000" +
    "\004\006\uffea\001\002\000\004\011\103\001\002\000\004" +
    "\004\104\001\002\000\004\006\uffe3\001\002\000\006\006" +
    "\uffee\012\uffee\001\002\000\004\007\107\001\002\000\006" +
    "\005\112\010\111\001\002\000\004\010\127\001\002\000" +
    "\006\006\ufff2\012\ufff2\001\002\000\004\020\052\001\002" +
    "\000\004\012\120\001\002\000\004\006\115\001\002\000" +
    "\006\010\ufff1\012\116\001\002\000\004\005\112\001\002" +
    "\000\004\010\ufff0\001\002\000\004\021\075\001\002\000" +
    "\004\012\122\001\002\000\004\022\124\001\002\000\004" +
    "\006\uffef\001\002\000\004\011\125\001\002\000\004\017" +
    "\126\001\002\000\004\006\uffe2\001\002\000\006\006\ufff3" +
    "\012\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\014\004\016\005\013\006\005\010\007\013\015" +
    "\024\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\025\001\001\000\002\001" +
    "\001\000\004\016\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\041\004\016\005\013\006\005\010\007" +
    "\013\015\024\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\066\020\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\071\001\001\000" +
    "\002\001\001\000\004\021\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\113\020\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\116\001\001\000\002\001\001\000\004\021\120\001" +
    "\001\000\002\001\001\000\004\023\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticJSON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticJSON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticJSON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<ErrorLP> errors = new ArrayList<>();

        public SintacticJSON(LexerJSON lexer) {
                super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != symJSON.EOF){
                        addError(cur_token);
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }

        public void addError(Symbol token) {
                try {
                        errors.add(new ErrorLP(token.left, token.right, token.value.toString(), 1, "No se esperaba el simbolo"));
                } catch (Exception e) {
                }
                printStack();
        }

        public ArrayList<ErrorLP> getErrors(){
                return errors;
        }

        public void printStack(){
            for (Object o : stack) {
                if (o instanceof Symbol) {
                    if (((Symbol) o).value != null) {
                        System.out.println("L:"+((Symbol) o).left+" C:"+((Symbol) o).right+" -> "+((Symbol) o).value);
                    }
                } else {
                }
            }
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticJSON$actions {
  private final SintacticJSON parser;

  /** Constructor */
  CUP$SintacticJSON$actions(SintacticJSON parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticJSON$do_action_part00000000(
    int                        CUP$SintacticJSON$act_num,
    java_cup.runtime.lr_parser CUP$SintacticJSON$parser,
    java.util.Stack            CUP$SintacticJSON$stack,
    int                        CUP$SintacticJSON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticJSON$result;

      /* select the action based on the action number */
      switch (CUP$SintacticJSON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)).value;
		RESULT = start_val;
              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticJSON$parser.done_parsing();
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= O_BRACE internal_json C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // internal_json ::= all_estructures 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_json",1, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // internal_json ::= all_estructures COMMA internal_json 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_json",1, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // all_estructures ::= score_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // all_estructures ::= classes_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // all_estructures ::= variables_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // all_estructures ::= method_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // all_estructures ::= comments_estructure_general 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("all_estructures",2, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // score_estructure ::= SCORE COLONS STRING 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("score_estructure",3, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classes_estructure ::= CLASSES COLONS O_SBRACKET internal_class C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("classes_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classes_estructure ::= CLASSES COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("classes_estructure",4, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // internal_class ::= O_BRACE name_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_class",5, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // internal_class ::= O_BRACE name_estructure C_BRACE COMMA internal_class 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_class",5, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables_estructure ::= VARIABLES COLONS O_SBRACKET internal_variable C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variables_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables_estructure ::= VARIABLES COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variables_estructure",6, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // internal_variable ::= O_BRACE variable_declaration C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_variable",7, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // internal_variable ::= O_BRACE variable_declaration C_BRACE COMMA internal_variable 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_variable",7, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_declaration ::= name_estructure COMMA type_estructure COMMA functions_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("variable_declaration",8, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_estructure ::= METHODS COLONS O_SBRACKET internal_method C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_estructure ::= METHODS COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_estructure",9, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // internal_method ::= O_BRACE method_declaration C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_method",10, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // internal_method ::= O_BRACE method_declaration C_BRACE COMMA internal_method 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_method",10, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_declaration ::= name_estructure COMMA type_estructure COMMA parameters_estructure 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("method_declaration",11, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comments_estructure_general ::= COMMENTS COLONS O_SBRACKET internal_comment C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure_general",18, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comments_estructure_general ::= COMMENTS COLONS O_SBRACKET C_SBRACKET 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure_general",18, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // internal_comment ::= O_BRACE comments_estructure C_BRACE 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_comment",13, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // internal_comment ::= O_BRACE comments_estructure C_BRACE COMMA internal_comment 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("internal_comment",13, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // name_estructure ::= NAME COLONS STRING 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("name_estructure",14, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_estructure ::= TYPE COLONS STRING 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("type_estructure",15, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters_estructure ::= PARAMETERS COLONS INTEGER 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("parameters_estructure",16, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions_estructure ::= FUNCTION COLONS STRING 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("functions_estructure",17, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comments_estructure ::= TEXT COLONS COM 
            {
              Object RESULT =null;

              CUP$SintacticJSON$result = parser.getSymbolFactory().newSymbol("comments_estructure",12, ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.elementAt(CUP$SintacticJSON$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticJSON$stack.peek()), RESULT);
            }
          return CUP$SintacticJSON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticJSON$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticJSON$do_action(
    int                        CUP$SintacticJSON$act_num,
    java_cup.runtime.lr_parser CUP$SintacticJSON$parser,
    java.util.Stack            CUP$SintacticJSON$stack,
    int                        CUP$SintacticJSON$top)
    throws java.lang.Exception
    {
              return CUP$SintacticJSON$do_action_part00000000(
                               CUP$SintacticJSON$act_num,
                               CUP$SintacticJSON$parser,
                               CUP$SintacticJSON$stack,
                               CUP$SintacticJSON$top);
    }
}

}
